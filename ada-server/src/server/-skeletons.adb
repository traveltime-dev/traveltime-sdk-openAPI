--  TravelTime API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 1.2.2
--  Contact: support@igeolise.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Geocoding_Reverse_Search is
         new Swagger.Servers.Operation (Handler => Geocoding_Reverse_Search,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/geocoding/reverse");

      --  
      procedure Geocoding_Reverse_Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Lat : double;
         Lng : double;
         Within_Periodcountry : Swagger.Nullable_UString;
         Result : .Models.ResponseGeocoding_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "lat", Lat);
         Swagger.Servers.Get_Query_Parameter (Req, "lng", Lng);
         Swagger.Servers.Get_Query_Parameter (Req, "within.country", Within_Periodcountry);
         Impl.Geocoding_Reverse_Search
            (Lat,
             Lng,
             Within_Periodcountry, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Geocoding_Reverse_Search;

      package API_Geocoding_Search is
         new Swagger.Servers.Operation (Handler => Geocoding_Search,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/geocoding/search");

      --  
      procedure Geocoding_Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Query : Swagger.UString;
         Focus_Periodlat : double;
         Focus_Periodlng : double;
         Within_Periodcountry : Swagger.Nullable_UString;
         Result : .Models.ResponseGeocoding_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "query", Query);
         Swagger.Servers.Get_Query_Parameter (Req, "focus.lat", Focus_Periodlat);
         Swagger.Servers.Get_Query_Parameter (Req, "focus.lng", Focus_Periodlng);
         Swagger.Servers.Get_Query_Parameter (Req, "within.country", Within_Periodcountry);
         Impl.Geocoding_Search
            (Query,
             Focus_Periodlat,
             Focus_Periodlng,
             Within_Periodcountry, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Geocoding_Search;

      package API_Map_Info is
         new Swagger.Servers.Operation (Handler => Map_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/map-info");

      --  
      procedure Map_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.ResponseMapInfo_Type;
      begin
         Impl.Map_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Map_Info;

      package API_Routes is
         new Swagger.Servers.Operation (Handler => Routes,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/routes");

      --  
      procedure Routes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Routes_Type : RequestRoutes_Type;
         Result : .Models.ResponseRoutes_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestRoutes_Type", Request_Routes_Type);
         Impl.Routes
            (Request_Routes_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Routes;

      package API_Supported_Locations is
         new Swagger.Servers.Operation (Handler => Supported_Locations,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/supported-locations");

      --  
      procedure Supported_Locations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Supported_Locations_Type : RequestSupportedLocations_Type;
         Result : .Models.ResponseSupportedLocations_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestSupportedLocations_Type", Request_Supported_Locations_Type);
         Impl.Supported_Locations
            (Request_Supported_Locations_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Supported_Locations;

      package API_Time_Filter is
         new Swagger.Servers.Operation (Handler => Time_Filter,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter");

      --  
      procedure Time_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Filter_Type : RequestTimeFilter_Type;
         Result : .Models.ResponseTimeFilter_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeFilter_Type", Request_Time_Filter_Type);
         Impl.Time_Filter
            (Request_Time_Filter_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter;

      package API_Time_Filter_Fast is
         new Swagger.Servers.Operation (Handler => Time_Filter_Fast,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/fast");

      --  
      procedure Time_Filter_Fast
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Filter_Fast_Type : RequestTimeFilterFast_Type;
         Result : .Models.ResponseTimeFilterFast_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeFilterFast_Type", Request_Time_Filter_Fast_Type);
         Impl.Time_Filter_Fast
            (Request_Time_Filter_Fast_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Fast;

      package API_Time_Filter_Postcode_Districts is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcode_Districts,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcode-districts");

      --  
      procedure Time_Filter_Postcode_Districts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Filter_Postcode_Districts_Type : RequestTimeFilterPostcodeDistricts_Type;
         Result : .Models.ResponseTimeFilterPostcodeDistricts_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeFilterPostcodeDistricts_Type", Request_Time_Filter_Postcode_Districts_Type);
         Impl.Time_Filter_Postcode_Districts
            (Request_Time_Filter_Postcode_Districts_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcode_Districts;

      package API_Time_Filter_Postcode_Sectors is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcode_Sectors,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcode-sectors");

      --  
      procedure Time_Filter_Postcode_Sectors
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Filter_Postcode_Sectors_Type : RequestTimeFilterPostcodeSectors_Type;
         Result : .Models.ResponseTimeFilterPostcodeSectors_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeFilterPostcodeSectors_Type", Request_Time_Filter_Postcode_Sectors_Type);
         Impl.Time_Filter_Postcode_Sectors
            (Request_Time_Filter_Postcode_Sectors_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcode_Sectors;

      package API_Time_Filter_Postcodes is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcodes,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcodes");

      --  
      procedure Time_Filter_Postcodes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Filter_Postcodes_Type : RequestTimeFilterPostcodes_Type;
         Result : .Models.ResponseTimeFilterPostcodes_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeFilterPostcodes_Type", Request_Time_Filter_Postcodes_Type);
         Impl.Time_Filter_Postcodes
            (Request_Time_Filter_Postcodes_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcodes;

      package API_Time_Map is
         new Swagger.Servers.Operation (Handler => Time_Map,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-map");

      --  
      procedure Time_Map
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Request_Time_Map_Type : RequestTimeMap_Type;
         Result : .Models.ResponseTimeMap_Type;
      begin
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "RequestTimeMap_Type", Request_Time_Map_Type);
         Impl.Time_Map
            (Request_Time_Map_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Map;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Geocoding_Reverse_Search.Definition);
         Swagger.Servers.Register (Server, API_Geocoding_Search.Definition);
         Swagger.Servers.Register (Server, API_Map_Info.Definition);
         Swagger.Servers.Register (Server, API_Routes.Definition);
         Swagger.Servers.Register (Server, API_Supported_Locations.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Fast.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcode_Districts.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcode_Sectors.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcodes.Definition);
         Swagger.Servers.Register (Server, API_Time_Map.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  
      procedure Geocoding_Reverse_Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Lat : double;
         Lng : double;
         Within_Periodcountry : Swagger.Nullable_UString;
         Result : .Models.ResponseGeocoding_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "lat", Lat);
         Swagger.Servers.Get_Query_Parameter (Req, "lng", Lng);
         Swagger.Servers.Get_Query_Parameter (Req, "within.country", Within_Periodcountry);
         Server.Geocoding_Reverse_Search
            (Lat,
             Lng,
             Within_Periodcountry, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Geocoding_Reverse_Search;

      package API_Geocoding_Reverse_Search is
         new Swagger.Servers.Operation (Handler => Geocoding_Reverse_Search,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/geocoding/reverse");

      --  
      procedure Geocoding_Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Query : Swagger.UString;
         Focus_Periodlat : double;
         Focus_Periodlng : double;
         Within_Periodcountry : Swagger.Nullable_UString;
         Result : .Models.ResponseGeocoding_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "query", Query);
         Swagger.Servers.Get_Query_Parameter (Req, "focus.lat", Focus_Periodlat);
         Swagger.Servers.Get_Query_Parameter (Req, "focus.lng", Focus_Periodlng);
         Swagger.Servers.Get_Query_Parameter (Req, "within.country", Within_Periodcountry);
         Server.Geocoding_Search
            (Query,
             Focus_Periodlat,
             Focus_Periodlng,
             Within_Periodcountry, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Geocoding_Search;

      package API_Geocoding_Search is
         new Swagger.Servers.Operation (Handler => Geocoding_Search,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/geocoding/search");

      --  
      procedure Map_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.ResponseMapInfo_Type;
      begin
         Server.Map_Info (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Map_Info;

      package API_Map_Info is
         new Swagger.Servers.Operation (Handler => Map_Info,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/v4/map-info");

      --  
      procedure Routes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Routes_Type : RequestRoutes_Type;
         Result : .Models.ResponseRoutes_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestRoutes_Type", Request_Routes_Type);
         Server.Routes
            (Request_Routes_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Routes;

      package API_Routes is
         new Swagger.Servers.Operation (Handler => Routes,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/routes");

      --  
      procedure Supported_Locations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Supported_Locations_Type : RequestSupportedLocations_Type;
         Result : .Models.ResponseSupportedLocations_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestSupportedLocations_Type", Request_Supported_Locations_Type);
         Server.Supported_Locations
            (Request_Supported_Locations_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Supported_Locations;

      package API_Supported_Locations is
         new Swagger.Servers.Operation (Handler => Supported_Locations,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/supported-locations");

      --  
      procedure Time_Filter
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Filter_Type : RequestTimeFilter_Type;
         Result : .Models.ResponseTimeFilter_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeFilter_Type", Request_Time_Filter_Type);
         Server.Time_Filter
            (Request_Time_Filter_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter;

      package API_Time_Filter is
         new Swagger.Servers.Operation (Handler => Time_Filter,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter");

      --  
      procedure Time_Filter_Fast
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Filter_Fast_Type : RequestTimeFilterFast_Type;
         Result : .Models.ResponseTimeFilterFast_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeFilterFast_Type", Request_Time_Filter_Fast_Type);
         Server.Time_Filter_Fast
            (Request_Time_Filter_Fast_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Fast;

      package API_Time_Filter_Fast is
         new Swagger.Servers.Operation (Handler => Time_Filter_Fast,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/fast");

      --  
      procedure Time_Filter_Postcode_Districts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Filter_Postcode_Districts_Type : RequestTimeFilterPostcodeDistricts_Type;
         Result : .Models.ResponseTimeFilterPostcodeDistricts_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeFilterPostcodeDistricts_Type", Request_Time_Filter_Postcode_Districts_Type);
         Server.Time_Filter_Postcode_Districts
            (Request_Time_Filter_Postcode_Districts_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcode_Districts;

      package API_Time_Filter_Postcode_Districts is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcode_Districts,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcode-districts");

      --  
      procedure Time_Filter_Postcode_Sectors
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Filter_Postcode_Sectors_Type : RequestTimeFilterPostcodeSectors_Type;
         Result : .Models.ResponseTimeFilterPostcodeSectors_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeFilterPostcodeSectors_Type", Request_Time_Filter_Postcode_Sectors_Type);
         Server.Time_Filter_Postcode_Sectors
            (Request_Time_Filter_Postcode_Sectors_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcode_Sectors;

      package API_Time_Filter_Postcode_Sectors is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcode_Sectors,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcode-sectors");

      --  
      procedure Time_Filter_Postcodes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Filter_Postcodes_Type : RequestTimeFilterPostcodes_Type;
         Result : .Models.ResponseTimeFilterPostcodes_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeFilterPostcodes_Type", Request_Time_Filter_Postcodes_Type);
         Server.Time_Filter_Postcodes
            (Request_Time_Filter_Postcodes_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Filter_Postcodes;

      package API_Time_Filter_Postcodes is
         new Swagger.Servers.Operation (Handler => Time_Filter_Postcodes,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-filter/postcodes");

      --  
      procedure Time_Map
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Request_Time_Map_Type : RequestTimeMap_Type;
         Result : .Models.ResponseTimeMap_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "RequestTimeMap_Type", Request_Time_Map_Type);
         Server.Time_Map
            (Request_Time_Map_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Time_Map;

      package API_Time_Map is
         new Swagger.Servers.Operation (Handler => Time_Map,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/v4/time-map");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Geocoding_Reverse_Search.Definition);
         Swagger.Servers.Register (Server, API_Geocoding_Search.Definition);
         Swagger.Servers.Register (Server, API_Map_Info.Definition);
         Swagger.Servers.Register (Server, API_Routes.Definition);
         Swagger.Servers.Register (Server, API_Supported_Locations.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Fast.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcode_Districts.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcode_Sectors.Definition);
         Swagger.Servers.Register (Server, API_Time_Filter_Postcodes.Definition);
         Swagger.Servers.Register (Server, API_Time_Map.Definition);
      end Register;

      protected body Server is
         --  
         procedure Geocoding_Reverse_Search
            (Lat : in double;
             Lng : in double;
             Within_Periodcountry : in Swagger.Nullable_UString;
             Result : out .Models.ResponseGeocoding_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Geocoding_Reverse_Search
               (Lat,
                Lng,
                Within_Periodcountry,
                Result,
                Context);
         end Geocoding_Reverse_Search;

         --  
         procedure Geocoding_Search
            (Query : in Swagger.UString;
             Focus_Periodlat : in double;
             Focus_Periodlng : in double;
             Within_Periodcountry : in Swagger.Nullable_UString;
             Result : out .Models.ResponseGeocoding_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Geocoding_Search
               (Query,
                Focus_Periodlat,
                Focus_Periodlng,
                Within_Periodcountry,
                Result,
                Context);
         end Geocoding_Search;

         --  
         procedure Map_Info (Result : out .Models.ResponseMapInfo_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Map_Info (Result, Context);
         end Map_Info;

         --  
         procedure Routes
            (Request_Routes_Type : in RequestRoutes_Type;
             Result : out .Models.ResponseRoutes_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Routes
               (Request_Routes_Type,
                Result,
                Context);
         end Routes;

         --  
         procedure Supported_Locations
            (Request_Supported_Locations_Type : in RequestSupportedLocations_Type;
             Result : out .Models.ResponseSupportedLocations_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Supported_Locations
               (Request_Supported_Locations_Type,
                Result,
                Context);
         end Supported_Locations;

         --  
         procedure Time_Filter
            (Request_Time_Filter_Type : in RequestTimeFilter_Type;
             Result : out .Models.ResponseTimeFilter_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Filter
               (Request_Time_Filter_Type,
                Result,
                Context);
         end Time_Filter;

         --  
         procedure Time_Filter_Fast
            (Request_Time_Filter_Fast_Type : in RequestTimeFilterFast_Type;
             Result : out .Models.ResponseTimeFilterFast_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Filter_Fast
               (Request_Time_Filter_Fast_Type,
                Result,
                Context);
         end Time_Filter_Fast;

         --  
         procedure Time_Filter_Postcode_Districts
            (Request_Time_Filter_Postcode_Districts_Type : in RequestTimeFilterPostcodeDistricts_Type;
             Result : out .Models.ResponseTimeFilterPostcodeDistricts_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Filter_Postcode_Districts
               (Request_Time_Filter_Postcode_Districts_Type,
                Result,
                Context);
         end Time_Filter_Postcode_Districts;

         --  
         procedure Time_Filter_Postcode_Sectors
            (Request_Time_Filter_Postcode_Sectors_Type : in RequestTimeFilterPostcodeSectors_Type;
             Result : out .Models.ResponseTimeFilterPostcodeSectors_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Filter_Postcode_Sectors
               (Request_Time_Filter_Postcode_Sectors_Type,
                Result,
                Context);
         end Time_Filter_Postcode_Sectors;

         --  
         procedure Time_Filter_Postcodes
            (Request_Time_Filter_Postcodes_Type : in RequestTimeFilterPostcodes_Type;
             Result : out .Models.ResponseTimeFilterPostcodes_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Filter_Postcodes
               (Request_Time_Filter_Postcodes_Type,
                Result,
                Context);
         end Time_Filter_Postcodes;

         --  
         procedure Time_Map
            (Request_Time_Map_Type : in RequestTimeMap_Type;
             Result : out .Models.ResponseTimeMap_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Time_Map
               (Request_Time_Map_Type,
                Result,
                Context);
         end Time_Map;

      end Server;

   end Shared_Instance;

end .Skeletons;
