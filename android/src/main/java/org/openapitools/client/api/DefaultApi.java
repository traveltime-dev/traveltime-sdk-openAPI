/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.RequestRoutes;
import org.openapitools.client.model.RequestSupportedLocations;
import org.openapitools.client.model.RequestTimeFilter;
import org.openapitools.client.model.RequestTimeFilterFast;
import org.openapitools.client.model.RequestTimeFilterPostcodeDistricts;
import org.openapitools.client.model.RequestTimeFilterPostcodeSectors;
import org.openapitools.client.model.RequestTimeFilterPostcodes;
import org.openapitools.client.model.RequestTimeMap;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseGeocoding;
import org.openapitools.client.model.ResponseMapInfo;
import org.openapitools.client.model.ResponseRoutes;
import org.openapitools.client.model.ResponseSupportedLocations;
import org.openapitools.client.model.ResponseTimeFilter;
import org.openapitools.client.model.ResponseTimeFilterFast;
import org.openapitools.client.model.ResponseTimeFilterPostcodeDistricts;
import org.openapitools.client.model.ResponseTimeFilterPostcodeSectors;
import org.openapitools.client.model.ResponseTimeFilterPostcodes;
import org.openapitools.client.model.ResponseTimeMap;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "https://api.traveltimeapp.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param lat 
   * @param lng 
   * @param withinCountry 
   * @return ResponseGeocoding
  */
  public ResponseGeocoding geocodingReverseSearch (Double lat, Double lng, String withinCountry) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling geocodingReverseSearch",
        new ApiException(400, "Missing the required parameter 'lat' when calling geocodingReverseSearch"));
    }
    // verify the required parameter 'lng' is set
    if (lng == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lng' when calling geocodingReverseSearch",
        new ApiException(400, "Missing the required parameter 'lng' when calling geocodingReverseSearch"));
    }

    // create path and map variables
    String path = "/v4/geocoding/reverse";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lng", lng));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "within.country", withinCountry));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseGeocoding) ApiInvoker.deserialize(localVarResponse, "", ResponseGeocoding.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param lat    * @param lng    * @param withinCountry 
  */
  public void geocodingReverseSearch (Double lat, Double lng, String withinCountry, final Response.Listener<ResponseGeocoding> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling geocodingReverseSearch",
        new ApiException(400, "Missing the required parameter 'lat' when calling geocodingReverseSearch"));
    }
    // verify the required parameter 'lng' is set
    if (lng == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lng' when calling geocodingReverseSearch",
        new ApiException(400, "Missing the required parameter 'lng' when calling geocodingReverseSearch"));
    }

    // create path and map variables
    String path = "/v4/geocoding/reverse".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lng", lng));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "within.country", withinCountry));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseGeocoding) ApiInvoker.deserialize(localVarResponse,  "", ResponseGeocoding.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param query 
   * @param focusLat 
   * @param focusLng 
   * @param withinCountry 
   * @return ResponseGeocoding
  */
  public ResponseGeocoding geocodingSearch (String query, Double focusLat, Double focusLng, String withinCountry) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling geocodingSearch",
        new ApiException(400, "Missing the required parameter 'query' when calling geocodingSearch"));
    }

    // create path and map variables
    String path = "/v4/geocoding/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "focus.lat", focusLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "focus.lng", focusLng));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "within.country", withinCountry));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseGeocoding) ApiInvoker.deserialize(localVarResponse, "", ResponseGeocoding.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param query    * @param focusLat    * @param focusLng    * @param withinCountry 
  */
  public void geocodingSearch (String query, Double focusLat, Double focusLng, String withinCountry, final Response.Listener<ResponseGeocoding> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling geocodingSearch",
        new ApiException(400, "Missing the required parameter 'query' when calling geocodingSearch"));
    }

    // create path and map variables
    String path = "/v4/geocoding/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "focus.lat", focusLat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "focus.lng", focusLng));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "within.country", withinCountry));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseGeocoding) ApiInvoker.deserialize(localVarResponse,  "", ResponseGeocoding.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @return ResponseMapInfo
  */
  public ResponseMapInfo mapInfo () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v4/map-info";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseMapInfo) ApiInvoker.deserialize(localVarResponse, "", ResponseMapInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 

  */
  public void mapInfo (final Response.Listener<ResponseMapInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v4/map-info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseMapInfo) ApiInvoker.deserialize(localVarResponse,  "", ResponseMapInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestRoutes 
   * @return ResponseRoutes
  */
  public ResponseRoutes routes (RequestRoutes requestRoutes) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestRoutes;
    // verify the required parameter 'requestRoutes' is set
    if (requestRoutes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestRoutes' when calling routes",
        new ApiException(400, "Missing the required parameter 'requestRoutes' when calling routes"));
    }

    // create path and map variables
    String path = "/v4/routes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseRoutes) ApiInvoker.deserialize(localVarResponse, "", ResponseRoutes.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestRoutes 
  */
  public void routes (RequestRoutes requestRoutes, final Response.Listener<ResponseRoutes> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestRoutes;

    // verify the required parameter 'requestRoutes' is set
    if (requestRoutes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestRoutes' when calling routes",
        new ApiException(400, "Missing the required parameter 'requestRoutes' when calling routes"));
    }

    // create path and map variables
    String path = "/v4/routes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseRoutes) ApiInvoker.deserialize(localVarResponse,  "", ResponseRoutes.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestSupportedLocations 
   * @return ResponseSupportedLocations
  */
  public ResponseSupportedLocations supportedLocations (RequestSupportedLocations requestSupportedLocations) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestSupportedLocations;
    // verify the required parameter 'requestSupportedLocations' is set
    if (requestSupportedLocations == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations",
        new ApiException(400, "Missing the required parameter 'requestSupportedLocations' when calling supportedLocations"));
    }

    // create path and map variables
    String path = "/v4/supported-locations";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseSupportedLocations) ApiInvoker.deserialize(localVarResponse, "", ResponseSupportedLocations.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestSupportedLocations 
  */
  public void supportedLocations (RequestSupportedLocations requestSupportedLocations, final Response.Listener<ResponseSupportedLocations> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestSupportedLocations;

    // verify the required parameter 'requestSupportedLocations' is set
    if (requestSupportedLocations == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations",
        new ApiException(400, "Missing the required parameter 'requestSupportedLocations' when calling supportedLocations"));
    }

    // create path and map variables
    String path = "/v4/supported-locations".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseSupportedLocations) ApiInvoker.deserialize(localVarResponse,  "", ResponseSupportedLocations.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeFilter 
   * @return ResponseTimeFilter
  */
  public ResponseTimeFilter timeFilter (RequestTimeFilter requestTimeFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeFilter;
    // verify the required parameter 'requestTimeFilter' is set
    if (requestTimeFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilter' when calling timeFilter",
        new ApiException(400, "Missing the required parameter 'requestTimeFilter' when calling timeFilter"));
    }

    // create path and map variables
    String path = "/v4/time-filter";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeFilter) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeFilter.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeFilter 
  */
  public void timeFilter (RequestTimeFilter requestTimeFilter, final Response.Listener<ResponseTimeFilter> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeFilter;

    // verify the required parameter 'requestTimeFilter' is set
    if (requestTimeFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilter' when calling timeFilter",
        new ApiException(400, "Missing the required parameter 'requestTimeFilter' when calling timeFilter"));
    }

    // create path and map variables
    String path = "/v4/time-filter".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeFilter) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeFilter.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeFilterFast 
   * @return ResponseTimeFilterFast
  */
  public ResponseTimeFilterFast timeFilterFast (RequestTimeFilterFast requestTimeFilterFast) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeFilterFast;
    // verify the required parameter 'requestTimeFilterFast' is set
    if (requestTimeFilterFast == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast"));
    }

    // create path and map variables
    String path = "/v4/time-filter/fast";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeFilterFast) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeFilterFast.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeFilterFast 
  */
  public void timeFilterFast (RequestTimeFilterFast requestTimeFilterFast, final Response.Listener<ResponseTimeFilterFast> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeFilterFast;

    // verify the required parameter 'requestTimeFilterFast' is set
    if (requestTimeFilterFast == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast"));
    }

    // create path and map variables
    String path = "/v4/time-filter/fast".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeFilterFast) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeFilterFast.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeFilterPostcodeDistricts 
   * @return ResponseTimeFilterPostcodeDistricts
  */
  public ResponseTimeFilterPostcodeDistricts timeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeFilterPostcodeDistricts;
    // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
    if (requestTimeFilterPostcodeDistricts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcode-districts";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeFilterPostcodeDistricts) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeFilterPostcodeDistricts.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeFilterPostcodeDistricts 
  */
  public void timeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final Response.Listener<ResponseTimeFilterPostcodeDistricts> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeFilterPostcodeDistricts;

    // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
    if (requestTimeFilterPostcodeDistricts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcode-districts".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeFilterPostcodeDistricts) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeFilterPostcodeDistricts.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeFilterPostcodeSectors 
   * @return ResponseTimeFilterPostcodeSectors
  */
  public ResponseTimeFilterPostcodeSectors timeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeFilterPostcodeSectors;
    // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
    if (requestTimeFilterPostcodeSectors == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcode-sectors";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeFilterPostcodeSectors) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeFilterPostcodeSectors.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeFilterPostcodeSectors 
  */
  public void timeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final Response.Listener<ResponseTimeFilterPostcodeSectors> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeFilterPostcodeSectors;

    // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
    if (requestTimeFilterPostcodeSectors == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcode-sectors".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeFilterPostcodeSectors) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeFilterPostcodeSectors.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeFilterPostcodes 
   * @return ResponseTimeFilterPostcodes
  */
  public ResponseTimeFilterPostcodes timeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeFilterPostcodes;
    // verify the required parameter 'requestTimeFilterPostcodes' is set
    if (requestTimeFilterPostcodes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcodes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeFilterPostcodes) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeFilterPostcodes.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeFilterPostcodes 
  */
  public void timeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes, final Response.Listener<ResponseTimeFilterPostcodes> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeFilterPostcodes;

    // verify the required parameter 'requestTimeFilterPostcodes' is set
    if (requestTimeFilterPostcodes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes",
        new ApiException(400, "Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes"));
    }

    // create path and map variables
    String path = "/v4/time-filter/postcodes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeFilterPostcodes) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeFilterPostcodes.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param requestTimeMap 
   * @return ResponseTimeMap
  */
  public ResponseTimeMap timeMap (RequestTimeMap requestTimeMap) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestTimeMap;
    // verify the required parameter 'requestTimeMap' is set
    if (requestTimeMap == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeMap' when calling timeMap",
        new ApiException(400, "Missing the required parameter 'requestTimeMap' when calling timeMap"));
    }

    // create path and map variables
    String path = "/v4/time-map";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResponseTimeMap) ApiInvoker.deserialize(localVarResponse, "", ResponseTimeMap.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param requestTimeMap 
  */
  public void timeMap (RequestTimeMap requestTimeMap, final Response.Listener<ResponseTimeMap> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestTimeMap;

    // verify the required parameter 'requestTimeMap' is set
    if (requestTimeMap == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestTimeMap' when calling timeMap",
        new ApiException(400, "Missing the required parameter 'requestTimeMap' when calling timeMap"));
    }

    // create path and map variables
    String path = "/v4/time-map".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKey", "ApplicationId" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResponseTimeMap) ApiInvoker.deserialize(localVarResponse,  "", ResponseTimeMap.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
