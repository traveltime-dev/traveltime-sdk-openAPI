/*
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASDefaultApi {
    OASClient client;

    public OASDefaultApi(OASClient client) {
        this.client = client;
    }

    public OASDefaultApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param lat  (required)
     * @param lng  (required)
     * @param withinCountry  (optional)
     * @return OASResponseGeocoding
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseGeocoding geocodingReverseSearch(Map<String, Object> params) {
        client.assertNotNull(params.get('lat'), 'lat');
        client.assertNotNull(params.get('lng'), 'lng');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('lat', (Double) params.get('lat')));
        query.addAll(client.makeParam('lng', (Double) params.get('lng')));
        query.addAll(client.makeParam('within.country', (String) params.get('withinCountry')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseGeocoding) client.invoke(
            'GET', '/v4/geocoding/reverse', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseGeocoding.class
        );
    }
    /**
     * 
     * 
     * @param query  (required)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param withinCountry  (optional)
     * @return OASResponseGeocoding
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseGeocoding geocodingSearch(Map<String, Object> params) {
        client.assertNotNull(params.get('query'), 'query');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('query', (String) params.get('query')));
        query.addAll(client.makeParam('focus.lat', (Double) params.get('focusLat')));
        query.addAll(client.makeParam('focus.lng', (Double) params.get('focusLng')));
        query.addAll(client.makeParam('within.country', (String) params.get('withinCountry')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseGeocoding) client.invoke(
            'GET', '/v4/geocoding/search', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseGeocoding.class
        );
    }
    /**
     * 
     * 
     * @return OASResponseMapInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseMapInfo mapInfo() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseMapInfo) client.invoke(
            'GET', '/v4/map-info', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseMapInfo.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestRoutes  (required)
     * @return OASResponseRoutes
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseRoutes routes(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestRoutes'), 'oaSRequestRoutes');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseRoutes) client.invoke(
            'POST', '/v4/routes',
            (OASRequestRoutes) params.get('oaSRequestRoutes'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseRoutes.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestSupportedLocations  (required)
     * @return OASResponseSupportedLocations
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseSupportedLocations supportedLocations(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestSupportedLocations'), 'oaSRequestSupportedLocations');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseSupportedLocations) client.invoke(
            'POST', '/v4/supported-locations',
            (OASRequestSupportedLocations) params.get('oaSRequestSupportedLocations'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseSupportedLocations.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeFilter  (required)
     * @return OASResponseTimeFilter
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeFilter timeFilter(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeFilter'), 'oaSRequestTimeFilter');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeFilter) client.invoke(
            'POST', '/v4/time-filter',
            (OASRequestTimeFilter) params.get('oaSRequestTimeFilter'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeFilter.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeFilterFast  (required)
     * @return OASResponseTimeFilterFast
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeFilterFast timeFilterFast(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeFilterFast'), 'oaSRequestTimeFilterFast');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeFilterFast) client.invoke(
            'POST', '/v4/time-filter/fast',
            (OASRequestTimeFilterFast) params.get('oaSRequestTimeFilterFast'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeFilterFast.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeFilterPostcodeDistrict  (required)
     * @return OASResponseTimeFilterPostcodeDistric
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeFilterPostcodeDistric timeFilterPostcodeDistricts(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeFilterPostcodeDistrict'), 'oaSRequestTimeFilterPostcodeDistrict');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeFilterPostcodeDistric) client.invoke(
            'POST', '/v4/time-filter/postcode-districts',
            (OASRequestTimeFilterPostcodeDistrict) params.get('oaSRequestTimeFilterPostcodeDistrict'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeFilterPostcodeDistric.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeFilterPostcodeSectors  (required)
     * @return OASResponseTimeFilterPostcodeSectors
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeFilterPostcodeSectors timeFilterPostcodeSectors(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeFilterPostcodeSectors'), 'oaSRequestTimeFilterPostcodeSectors');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeFilterPostcodeSectors) client.invoke(
            'POST', '/v4/time-filter/postcode-sectors',
            (OASRequestTimeFilterPostcodeSectors) params.get('oaSRequestTimeFilterPostcodeSectors'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeFilterPostcodeSectors.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeFilterPostcodes  (required)
     * @return OASResponseTimeFilterPostcodes
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeFilterPostcodes timeFilterPostcodes(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeFilterPostcodes'), 'oaSRequestTimeFilterPostcodes');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeFilterPostcodes) client.invoke(
            'POST', '/v4/time-filter/postcodes',
            (OASRequestTimeFilterPostcodes) params.get('oaSRequestTimeFilterPostcodes'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeFilterPostcodes.class
        );
    }
    /**
     * 
     * 
     * @param oaSRequestTimeMap  (required)
     * @return OASResponseTimeMap
     * @throws OAS.ApiException if fails to make API call
     */
    public OASResponseTimeMap timeMap(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSRequestTimeMap'), 'oaSRequestTimeMap');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASResponseTimeMap) client.invoke(
            'POST', '/v4/time-map',
            (OASRequestTimeMap) params.get('oaSRequestTimeMap'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/vnd.wkt+json', 'application/vnd.wkt-no-holes+json', 'application/vnd.bounding-boxes+json' },
            new List<String>{ 'application/json' },
            new List<String> { 'ApiKey', 'ApplicationId' },
            OASResponseTimeMap.class
        );
    }
}
