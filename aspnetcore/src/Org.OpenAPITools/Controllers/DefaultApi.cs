/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"></param>
        /// <response code="200">Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpGet]
        [Route("/v4/geocoding/reverse")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [ValidateModelState]
        [SwaggerOperation("GeocodingReverseSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseGeocoding), description: "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult GeocodingReverseSearch([FromQuery (Name = "lat")][Required()]double lat, [FromQuery (Name = "lng")][Required()]double lng, [FromQuery (Name = "within.country")]string withinCountry)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseGeocoding));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"features\" : [ {\n    \"geometry\" : {\n      \"coordinates\" : [ 0.8008281904610115, 0.8008281904610115 ],\n      \"type\" : \"type\"\n    },\n    \"type\" : \"type\",\n    \"properties\" : {\n      \"continent\" : \"continent\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"county\" : \"county\",\n      \"postcode\" : \"postcode\",\n      \"house_number\" : \"house_number\",\n      \"label\" : \"label\",\n      \"macroregion\" : \"macroregion\",\n      \"score\" : 6.027456183070403,\n      \"country_code\" : \"country_code\",\n      \"features\" : {\n        \"public_transport\" : {\n          \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"fares\" : true,\n        \"postcodes\" : true\n      },\n      \"street\" : \"street\",\n      \"neighbourhood\" : \"neighbourhood\",\n      \"name\" : \"name\",\n      \"region\" : \"region\",\n      \"region_code\" : \"region_code\"\n    }\n  }, {\n    \"geometry\" : {\n      \"coordinates\" : [ 0.8008281904610115, 0.8008281904610115 ],\n      \"type\" : \"type\"\n    },\n    \"type\" : \"type\",\n    \"properties\" : {\n      \"continent\" : \"continent\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"county\" : \"county\",\n      \"postcode\" : \"postcode\",\n      \"house_number\" : \"house_number\",\n      \"label\" : \"label\",\n      \"macroregion\" : \"macroregion\",\n      \"score\" : 6.027456183070403,\n      \"country_code\" : \"country_code\",\n      \"features\" : {\n        \"public_transport\" : {\n          \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"fares\" : true,\n        \"postcodes\" : true\n      },\n      \"street\" : \"street\",\n      \"neighbourhood\" : \"neighbourhood\",\n      \"name\" : \"name\",\n      \"region\" : \"region\",\n      \"region_code\" : \"region_code\"\n    }\n  } ],\n  \"type\" : \"type\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseGeocoding>(exampleJson)
            : default(ResponseGeocoding);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"></param>
        /// <response code="200">Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpGet]
        [Route("/v4/geocoding/search")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [ValidateModelState]
        [SwaggerOperation("GeocodingSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseGeocoding), description: "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult GeocodingSearch([FromQuery (Name = "query")][Required()]string query, [FromQuery (Name = "focus.lat")]double? focusLat, [FromQuery (Name = "focus.lng")]double? focusLng, [FromQuery (Name = "within.country")]string withinCountry)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseGeocoding));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"features\" : [ {\n    \"geometry\" : {\n      \"coordinates\" : [ 0.8008281904610115, 0.8008281904610115 ],\n      \"type\" : \"type\"\n    },\n    \"type\" : \"type\",\n    \"properties\" : {\n      \"continent\" : \"continent\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"county\" : \"county\",\n      \"postcode\" : \"postcode\",\n      \"house_number\" : \"house_number\",\n      \"label\" : \"label\",\n      \"macroregion\" : \"macroregion\",\n      \"score\" : 6.027456183070403,\n      \"country_code\" : \"country_code\",\n      \"features\" : {\n        \"public_transport\" : {\n          \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"fares\" : true,\n        \"postcodes\" : true\n      },\n      \"street\" : \"street\",\n      \"neighbourhood\" : \"neighbourhood\",\n      \"name\" : \"name\",\n      \"region\" : \"region\",\n      \"region_code\" : \"region_code\"\n    }\n  }, {\n    \"geometry\" : {\n      \"coordinates\" : [ 0.8008281904610115, 0.8008281904610115 ],\n      \"type\" : \"type\"\n    },\n    \"type\" : \"type\",\n    \"properties\" : {\n      \"continent\" : \"continent\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"county\" : \"county\",\n      \"postcode\" : \"postcode\",\n      \"house_number\" : \"house_number\",\n      \"label\" : \"label\",\n      \"macroregion\" : \"macroregion\",\n      \"score\" : 6.027456183070403,\n      \"country_code\" : \"country_code\",\n      \"features\" : {\n        \"public_transport\" : {\n          \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"fares\" : true,\n        \"postcodes\" : true\n      },\n      \"street\" : \"street\",\n      \"neighbourhood\" : \"neighbourhood\",\n      \"name\" : \"name\",\n      \"region\" : \"region\",\n      \"region_code\" : \"region_code\"\n    }\n  } ],\n  \"type\" : \"type\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseGeocoding>(exampleJson)
            : default(ResponseGeocoding);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpGet]
        [Route("/v4/map-info")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [ValidateModelState]
        [SwaggerOperation("MapInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseMapInfo), description: "Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult MapInfo()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseMapInfo));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"maps\" : [ {\n    \"features\" : {\n      \"public_transport\" : {\n        \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"fares\" : true,\n      \"postcodes\" : true\n    },\n    \"name\" : \"name\"\n  }, {\n    \"features\" : {\n      \"public_transport\" : {\n        \"date_start\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"date_end\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"fares\" : true,\n      \"postcodes\" : true\n    },\n    \"name\" : \"name\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseMapInfo>(exampleJson)
            : default(ResponseMapInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestRoutes"></param>
        /// <response code="200">Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/routes")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("Routes")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseRoutes), description: "Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult Routes([FromBody]RequestRoutes requestRoutes)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseRoutes));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseRoutes>(exampleJson)
            : default(ResponseRoutes);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestSupportedLocations"></param>
        /// <response code="200">Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/supported-locations")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SupportedLocations")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseSupportedLocations), description: "Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult SupportedLocations([FromBody]RequestSupportedLocations requestSupportedLocations)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseSupportedLocations));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"unsupported_locations\" : [ \"unsupported_locations\", \"unsupported_locations\" ],\n  \"locations\" : [ {\n    \"map_name\" : \"map_name\",\n    \"id\" : \"id\"\n  }, {\n    \"map_name\" : \"map_name\",\n    \"id\" : \"id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseSupportedLocations>(exampleJson)
            : default(ResponseSupportedLocations);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeFilter"></param>
        /// <response code="200">Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-filter")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeFilter")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeFilter), description: "Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeFilter([FromBody]RequestTimeFilter requestTimeFilter)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeFilter));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"distance_breakdown\" : [ {\n          \"distance\" : 1\n        }, {\n          \"distance\" : 1\n        } ],\n        \"route\" : {\n          \"arrival_time\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"parts\" : [ {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          }, {\n            \"departs_at\" : \"departs_at\",\n            \"distance\" : 2,\n            \"line\" : \"line\",\n            \"num_stops\" : 2,\n            \"turn\" : \"turn\",\n            \"type\" : \"basic\",\n            \"travel_time\" : 7,\n            \"directions\" : \"directions\",\n            \"arrives_at\" : \"arrives_at\",\n            \"road\" : \"road\",\n            \"departure_station\" : \"departure_station\",\n            \"id\" : \"id\",\n            \"arrival_station\" : \"arrival_station\",\n            \"coords\" : [ {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            }, {\n              \"lng\" : 3.616076749251911,\n              \"lat\" : 9.301444243932576\n            } ],\n            \"direction\" : \"direction\"\n          } ],\n          \"departure_time\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"distance\" : 6,\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"breakdown\" : [ {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          }, {\n            \"modes\" : [ null, null ],\n            \"tickets\" : [ {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            }, {\n              \"price\" : 5.637376656633329,\n              \"currency\" : \"currency\",\n              \"type\" : \"single\"\n            } ],\n            \"route_part_ids\" : [ 5, 5 ]\n          } ],\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeFilter>(exampleJson)
            : default(ResponseTimeFilter);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeFilterFast"></param>
        /// <response code="200">A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-filter/fast")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeFilterFast")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeFilterFast), description: "A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeFilterFast([FromBody]RequestTimeFilterFast requestTimeFilterFast)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeFilterFast));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"unreachable\" : [ \"unreachable\", \"unreachable\" ],\n    \"locations\" : [ {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    }, {\n      \"id\" : \"id\",\n      \"properties\" : [ {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      }, {\n        \"travel_time\" : 0,\n        \"fares\" : {\n          \"tickets_total\" : [ {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          }, {\n            \"price\" : 5.637376656633329,\n            \"currency\" : \"currency\",\n            \"type\" : \"single\"\n          } ]\n        }\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeFilterFast>(exampleJson)
            : default(ResponseTimeFilterFast);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <response code="200">Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-filter/postcode-districts")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeFilterPostcodeDistricts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeFilterPostcodeDistricts), description: "Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeFilterPostcodeDistricts([FromBody]RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeFilterPostcodeDistricts));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"districts\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 5.637376656633329,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 5.637376656633329,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"districts\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 5.637376656633329,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 5.637376656633329,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeFilterPostcodeDistricts>(exampleJson)
            : default(ResponseTimeFilterPostcodeDistricts);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <response code="200">Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-filter/postcode-sectors")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeFilterPostcodeSectors")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeFilterPostcodeSectors), description: "Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeFilterPostcodeSectors([FromBody]RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeFilterPostcodeSectors));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"sectors\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 0.8008281904610115,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 0.8008281904610115,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"sectors\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 0.8008281904610115,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : {\n        \"coverage\" : 0.8008281904610115,\n        \"travel_time_all\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        },\n        \"travel_time_reachable\" : {\n          \"min\" : 0,\n          \"median\" : 5,\n          \"max\" : 6,\n          \"mean\" : 1\n        }\n      }\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeFilterPostcodeSectors>(exampleJson)
            : default(ResponseTimeFilterPostcodeSectors);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <response code="200">Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-filter/postcodes")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeFilterPostcodes")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeFilterPostcodes), description: "Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeFilterPostcodes([FromBody]RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeFilterPostcodes));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"postcodes\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : [ {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      }, {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      } ]\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : [ {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      }, {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  }, {\n    \"postcodes\" : [ {\n      \"code\" : \"code\",\n      \"properties\" : [ {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      }, {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      } ]\n    }, {\n      \"code\" : \"code\",\n      \"properties\" : [ {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      }, {\n        \"distance\" : 6,\n        \"travel_time\" : 0\n      } ]\n    } ],\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeFilterPostcodes>(exampleJson)
            : default(ResponseTimeFilterPostcodes);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requestTimeMap"></param>
        /// <response code="200">Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/)</response>
        /// <response code="0">The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)</response>
        [HttpPost]
        [Route("/v4/time-map")]
        [Authorize(Policy = "ApiKey")]
        [Authorize(Policy = "ApplicationId")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TimeMap")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseTimeMap), description: "Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/)")]
        [SwaggerResponse(statusCode: 0, type: typeof(ResponseError), description: "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)")]
        public virtual IActionResult TimeMap([FromBody]RequestTimeMap requestTimeMap)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseTimeMap));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ResponseError));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"shapes\" : [ {\n      \"shell\" : [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ],\n      \"holes\" : [ [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ], [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ] ]\n    }, {\n      \"shell\" : [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ],\n      \"holes\" : [ [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ], [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ] ]\n    } ],\n    \"properties\" : {\n      \"is_only_walking\" : true\n    },\n    \"search_id\" : \"search_id\"\n  }, {\n    \"shapes\" : [ {\n      \"shell\" : [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ],\n      \"holes\" : [ [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ], [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ] ]\n    }, {\n      \"shell\" : [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ],\n      \"holes\" : [ [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ], [ {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      }, {\n        \"lng\" : 3.616076749251911,\n        \"lat\" : 9.301444243932576\n      } ] ]\n    } ],\n    \"properties\" : {\n      \"is_only_walking\" : true\n    },\n    \"search_id\" : \"search_id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseTimeMap>(exampleJson)
            : default(ResponseTimeMap);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
