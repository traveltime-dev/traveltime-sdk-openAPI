/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RequestLevelOfDetail : IEquatable<RequestLevelOfDetail>
    {

        /// <summary>
        /// Gets or Sets ScaleType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ScaleTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ScaleTypeEnum
        {
            
            /// <summary>
            /// Enum SimpleEnum for simple
            /// </summary>
            [EnumMember(Value = "simple")]
            SimpleEnum = 1
        }

        /// <summary>
        /// Gets or Sets ScaleType
        /// </summary>
        [Required]
        [DataMember(Name="scale_type", EmitDefaultValue=false)]
        public ScaleTypeEnum ScaleType { get; set; }


        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<LevelEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum LevelEnum
        {
            
            /// <summary>
            /// Enum LowestEnum for lowest
            /// </summary>
            [EnumMember(Value = "lowest")]
            LowestEnum = 1,
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 2,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 3,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 4,
            
            /// <summary>
            /// Enum HighestEnum for highest
            /// </summary>
            [EnumMember(Value = "highest")]
            HighestEnum = 5
        }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [Required]
        [DataMember(Name="level", EmitDefaultValue=false)]
        public LevelEnum Level { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestLevelOfDetail {\n");
            sb.Append("  ScaleType: ").Append(ScaleType).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RequestLevelOfDetail)obj);
        }

        /// <summary>
        /// Returns true if RequestLevelOfDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestLevelOfDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestLevelOfDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ScaleType == other.ScaleType ||
                    
                    ScaleType.Equals(other.ScaleType)
                ) && 
                (
                    Level == other.Level ||
                    
                    Level.Equals(other.Level)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ScaleType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Level.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RequestLevelOfDetail left, RequestLevelOfDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RequestLevelOfDetail left, RequestLevelOfDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
