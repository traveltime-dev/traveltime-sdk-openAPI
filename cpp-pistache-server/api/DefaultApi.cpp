/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string DefaultApi::base = "";

DefaultApi::DefaultApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void DefaultApi::init() {
    setupRoutes();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/v4/geocoding/reverse", Routes::bind(&DefaultApi::geocoding_reverse_search_handler, this));
    Routes::Get(*router, base + "/v4/geocoding/search", Routes::bind(&DefaultApi::geocoding_search_handler, this));
    Routes::Get(*router, base + "/v4/map-info", Routes::bind(&DefaultApi::map_info_handler, this));
    Routes::Post(*router, base + "/v4/routes", Routes::bind(&DefaultApi::routes_handler, this));
    Routes::Post(*router, base + "/v4/supported-locations", Routes::bind(&DefaultApi::supported_locations_handler, this));
    Routes::Post(*router, base + "/v4/time-filter", Routes::bind(&DefaultApi::time_filter_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/fast", Routes::bind(&DefaultApi::time_filter_fast_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcode-districts", Routes::bind(&DefaultApi::time_filter_postcode_districts_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcode-sectors", Routes::bind(&DefaultApi::time_filter_postcode_sectors_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcodes", Routes::bind(&DefaultApi::time_filter_postcodes_handler, this));
    Routes::Post(*router, base + "/v4/time-map", Routes::bind(&DefaultApi::time_map_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> DefaultApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw ex;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    }
}

std::pair<Pistache::Http::Code, std::string> DefaultApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void DefaultApi::geocoding_reverse_search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto latQuery = request.query().get("lat");
    Pistache::Optional<double> lat;
    if(!latQuery.isEmpty()){
        double valueQuery_instance;
        if(fromStringValue(latQuery.get(), valueQuery_instance)){
            lat = Pistache::Some(valueQuery_instance);
        }
    }
    auto lngQuery = request.query().get("lng");
    Pistache::Optional<double> lng;
    if(!lngQuery.isEmpty()){
        double valueQuery_instance;
        if(fromStringValue(lngQuery.get(), valueQuery_instance)){
            lng = Pistache::Some(valueQuery_instance);
        }
    }
    auto withinPeriodcountryQuery = request.query().get("within.country");
    Pistache::Optional<std::string> withinPeriodcountry;
    if(!withinPeriodcountryQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(withinPeriodcountryQuery.get(), valueQuery_instance)){
            withinPeriodcountry = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->geocoding_reverse_search(lat, lng, withinPeriodcountry, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::geocoding_search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto queryQuery = request.query().get("query");
    Pistache::Optional<std::string> query;
    if(!queryQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(queryQuery.get(), valueQuery_instance)){
            query = Pistache::Some(valueQuery_instance);
        }
    }
    auto focusPeriodlatQuery = request.query().get("focus.lat");
    Pistache::Optional<double> focusPeriodlat;
    if(!focusPeriodlatQuery.isEmpty()){
        double valueQuery_instance;
        if(fromStringValue(focusPeriodlatQuery.get(), valueQuery_instance)){
            focusPeriodlat = Pistache::Some(valueQuery_instance);
        }
    }
    auto focusPeriodlngQuery = request.query().get("focus.lng");
    Pistache::Optional<double> focusPeriodlng;
    if(!focusPeriodlngQuery.isEmpty()){
        double valueQuery_instance;
        if(fromStringValue(focusPeriodlngQuery.get(), valueQuery_instance)){
            focusPeriodlng = Pistache::Some(valueQuery_instance);
        }
    }
    auto withinPeriodcountryQuery = request.query().get("within.country");
    Pistache::Optional<std::string> withinPeriodcountry;
    if(!withinPeriodcountryQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(withinPeriodcountryQuery.get(), valueQuery_instance)){
            withinPeriodcountry = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->geocoding_search(query, focusPeriodlat, focusPeriodlng, withinPeriodcountry, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::map_info_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->map_info(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::routes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestRoutes requestRoutes;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestRoutes);
        requestRoutes.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->routes(requestRoutes, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::supported_locations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestSupportedLocations requestSupportedLocations;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestSupportedLocations);
        requestSupportedLocations.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->supported_locations(requestSupportedLocations, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeFilter requestTimeFilter;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeFilter);
        requestTimeFilter.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_filter(requestTimeFilter, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_filter_fast_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeFilterFast requestTimeFilterFast;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeFilterFast);
        requestTimeFilterFast.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_filter_fast(requestTimeFilterFast, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_filter_postcode_districts_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeFilterPostcodeDistricts);
        requestTimeFilterPostcodeDistricts.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_filter_postcode_districts(requestTimeFilterPostcodeDistricts, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_filter_postcode_sectors_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeFilterPostcodeSectors);
        requestTimeFilterPostcodeSectors.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_filter_postcode_sectors(requestTimeFilterPostcodeSectors, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_filter_postcodes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeFilterPostcodes requestTimeFilterPostcodes;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeFilterPostcodes);
        requestTimeFilterPostcodes.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_filter_postcodes(requestTimeFilterPostcodes, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DefaultApi::time_map_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    RequestTimeMap requestTimeMap;
    
    try {
        nlohmann::json::parse(request.body()).get_to(requestTimeMap);
        requestTimeMap.validate();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->time_map(requestTimeMap, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

