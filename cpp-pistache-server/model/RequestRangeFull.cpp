/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestRangeFull.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RequestRangeFull::RequestRangeFull()
{
    m_Enabled = false;
    m_Max_results = 0;
    m_Width = 0;
    
}

void RequestRangeFull::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RequestRangeFull::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RequestRangeFull::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RequestRangeFull" : pathPrefix;

        
     
    
    /* Max_results */ {
        const int32_t& value = m_Max_results;
        const std::string currentValuePath = _pathPrefix + ".maxResults";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 5)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 5;";
        }

    }
    
     
    
    /* Width */ {
        const int32_t& value = m_Width;
        const std::string currentValuePath = _pathPrefix + ".width";
                
        
        if (value < 1)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 43200)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 43200;";
        }

    }
    

    return success;
}

bool RequestRangeFull::operator==(const RequestRangeFull& rhs) const
{
    return
    
    
    (isEnabled() == rhs.isEnabled())
     &&
    
    (getMaxResults() == rhs.getMaxResults())
     &&
    
    (getWidth() == rhs.getWidth())
    
    
    ;
}

bool RequestRangeFull::operator!=(const RequestRangeFull& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestRangeFull& o)
{
    j = nlohmann::json();
    j["enabled"] = o.m_Enabled;
    j["max_results"] = o.m_Max_results;
    j["width"] = o.m_Width;
    
}

void from_json(const nlohmann::json& j, RequestRangeFull& o)
{
    j.at("enabled").get_to(o.m_Enabled);
    j.at("max_results").get_to(o.m_Max_results);
    j.at("width").get_to(o.m_Width);
    
}

bool RequestRangeFull::isEnabled() const
{
    return m_Enabled;
}
void RequestRangeFull::setEnabled(bool const value)
{
    m_Enabled = value;
}
int32_t RequestRangeFull::getMaxResults() const
{
    return m_Max_results;
}
void RequestRangeFull::setMaxResults(int32_t const value)
{
    m_Max_results = value;
}
int32_t RequestRangeFull::getWidth() const
{
    return m_Width;
}
void RequestRangeFull::setWidth(int32_t const value)
{
    m_Width = value;
}


} // namespace org::openapitools::server::model

