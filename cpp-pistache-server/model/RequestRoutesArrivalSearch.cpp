/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestRoutesArrivalSearch.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RequestRoutesArrivalSearch::RequestRoutesArrivalSearch()
{
    m_Id = "";
    m_Arrival_location_id = "";
    m_Arrival_time = "";
    m_RangeIsSet = false;
    
}

void RequestRoutesArrivalSearch::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RequestRoutesArrivalSearch::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RequestRoutesArrivalSearch::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RequestRoutesArrivalSearch" : pathPrefix;

        
     
    
    /* Departure_location_ids */ {
        const std::vector<std::string>& value = m_Departure_location_ids;
        const std::string currentValuePath = _pathPrefix + ".departureLocationIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        if (value.size() > 2)
        {
            success = false;
            msg << currentValuePath << ": must have at most 2 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    
    
    
     
    
    /* Properties */ {
        const std::vector<RequestRoutesProperty>& value = m_Properties;
        const std::string currentValuePath = _pathPrefix + ".properties";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestRoutesProperty& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    

    return success;
}

bool RequestRoutesArrivalSearch::operator==(const RequestRoutesArrivalSearch& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getDepartureLocationIds() == rhs.getDepartureLocationIds())
     &&
    
    (getArrivalLocationId() == rhs.getArrivalLocationId())
     &&
    
    (getTransportation() == rhs.getTransportation())
     &&
    
    (getArrivalTime() == rhs.getArrivalTime())
     &&
    
    (getProperties() == rhs.getProperties())
     &&
    
    
    ((!rangeIsSet() && !rhs.rangeIsSet()) || (rangeIsSet() && rhs.rangeIsSet() && getRange() == rhs.getRange()))
    
    ;
}

bool RequestRoutesArrivalSearch::operator!=(const RequestRoutesArrivalSearch& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestRoutesArrivalSearch& o)
{
    j = nlohmann::json();
    j["id"] = o.m_Id;
    j["departure_location_ids"] = o.m_Departure_location_ids;
    j["arrival_location_id"] = o.m_Arrival_location_id;
    j["transportation"] = o.m_Transportation;
    j["arrival_time"] = o.m_Arrival_time;
    j["properties"] = o.m_Properties;
    if(o.rangeIsSet())
        j["range"] = o.m_Range;
    
}

void from_json(const nlohmann::json& j, RequestRoutesArrivalSearch& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("departure_location_ids").get_to(o.m_Departure_location_ids);
    j.at("arrival_location_id").get_to(o.m_Arrival_location_id);
    j.at("transportation").get_to(o.m_Transportation);
    j.at("arrival_time").get_to(o.m_Arrival_time);
    j.at("properties").get_to(o.m_Properties);
    if(j.find("range") != j.end())
    {
        j.at("range").get_to(o.m_Range);
        o.m_RangeIsSet = true;
    } 
    
}

std::string RequestRoutesArrivalSearch::getId() const
{
    return m_Id;
}
void RequestRoutesArrivalSearch::setId(std::string const& value)
{
    m_Id = value;
}
std::vector<std::string> RequestRoutesArrivalSearch::getDepartureLocationIds() const
{
    return m_Departure_location_ids;
}
void RequestRoutesArrivalSearch::setDepartureLocationIds(std::vector<std::string> const& value)
{
    m_Departure_location_ids = value;
}
std::string RequestRoutesArrivalSearch::getArrivalLocationId() const
{
    return m_Arrival_location_id;
}
void RequestRoutesArrivalSearch::setArrivalLocationId(std::string const& value)
{
    m_Arrival_location_id = value;
}
RequestTransportation RequestRoutesArrivalSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestRoutesArrivalSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
}
std::string RequestRoutesArrivalSearch::getArrivalTime() const
{
    return m_Arrival_time;
}
void RequestRoutesArrivalSearch::setArrivalTime(std::string const& value)
{
    m_Arrival_time = value;
}
std::vector<RequestRoutesProperty> RequestRoutesArrivalSearch::getProperties() const
{
    return m_Properties;
}
void RequestRoutesArrivalSearch::setProperties(std::vector<RequestRoutesProperty> const& value)
{
    m_Properties = value;
}
RequestRangeFull RequestRoutesArrivalSearch::getRange() const
{
    return m_Range;
}
void RequestRoutesArrivalSearch::setRange(RequestRangeFull const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestRoutesArrivalSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestRoutesArrivalSearch::unsetRange()
{
    m_RangeIsSet = false;
}


} // namespace org::openapitools::server::model

