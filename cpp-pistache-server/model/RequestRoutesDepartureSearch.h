/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestRoutesDepartureSearch.h
 *
 * 
 */

#ifndef RequestRoutesDepartureSearch_H_
#define RequestRoutesDepartureSearch_H_


#include "RequestRangeFull.h"
#include <string>
#include "RequestRoutesProperty.h"
#include "RequestTransportation.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  RequestRoutesDepartureSearch
{
public:
    RequestRoutesDepartureSearch();
    virtual ~RequestRoutesDepartureSearch() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const RequestRoutesDepartureSearch& rhs) const;
    bool operator!=(const RequestRoutesDepartureSearch& rhs) const;

    /////////////////////////////////////////////
    /// RequestRoutesDepartureSearch members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDepartureLocationId() const;
    void setDepartureLocationId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getArrivalLocationIds() const;
    void setArrivalLocationIds(std::vector<std::string> const& value);
    /// <summary>
    /// 
    /// </summary>
    RequestTransportation getTransportation() const;
    void setTransportation(RequestTransportation const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDepartureTime() const;
    void setDepartureTime(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestRoutesProperty> getProperties() const;
    void setProperties(std::vector<RequestRoutesProperty> const& value);
    /// <summary>
    /// 
    /// </summary>
    RequestRangeFull getRange() const;
    void setRange(RequestRangeFull const& value);
    bool rangeIsSet() const;
    void unsetRange();

    friend void to_json(nlohmann::json& j, const RequestRoutesDepartureSearch& o);
    friend void from_json(const nlohmann::json& j, RequestRoutesDepartureSearch& o);
protected:
    std::string m_Id;

    std::string m_Departure_location_id;

    std::vector<std::string> m_Arrival_location_ids;

    RequestTransportation m_Transportation;

    std::string m_Departure_time;

    std::vector<RequestRoutesProperty> m_Properties;

    RequestRangeFull m_Range;
    bool m_RangeIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

} // namespace org::openapitools::server::model

#endif /* RequestRoutesDepartureSearch_H_ */
