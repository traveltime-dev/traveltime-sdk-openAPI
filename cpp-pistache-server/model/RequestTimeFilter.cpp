/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilter.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RequestTimeFilter::RequestTimeFilter()
{
    m_Departure_searchesIsSet = false;
    m_Arrival_searchesIsSet = false;
    
}

void RequestTimeFilter::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RequestTimeFilter::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RequestTimeFilter::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RequestTimeFilter" : pathPrefix;

         
    
    /* Locations */ {
        const std::vector<RequestLocation>& value = m_Locations;
        const std::string currentValuePath = _pathPrefix + ".locations";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestLocation& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".locations") && success;
 
                i++;
            }
        }

    }
    
     
    if (departureSearchesIsSet())
    {
        const std::vector<RequestTimeFilterDepartureSearch>& value = m_Departure_searches;
        const std::string currentValuePath = _pathPrefix + ".departureSearches";
                
        
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestTimeFilterDepartureSearch& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".departureSearches") && success;
 
                i++;
            }
        }

    }
    
     
    if (arrivalSearchesIsSet())
    {
        const std::vector<RequestTimeFilterArrivalSearch>& value = m_Arrival_searches;
        const std::string currentValuePath = _pathPrefix + ".arrivalSearches";
                
        
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestTimeFilterArrivalSearch& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".arrivalSearches") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool RequestTimeFilter::operator==(const RequestTimeFilter& rhs) const
{
    return
    
    
    (getLocations() == rhs.getLocations())
     &&
    
    
    ((!departureSearchesIsSet() && !rhs.departureSearchesIsSet()) || (departureSearchesIsSet() && rhs.departureSearchesIsSet() && getDepartureSearches() == rhs.getDepartureSearches())) &&
    
    
    ((!arrivalSearchesIsSet() && !rhs.arrivalSearchesIsSet()) || (arrivalSearchesIsSet() && rhs.arrivalSearchesIsSet() && getArrivalSearches() == rhs.getArrivalSearches()))
    
    ;
}

bool RequestTimeFilter::operator!=(const RequestTimeFilter& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestTimeFilter& o)
{
    j = nlohmann::json();
    j["locations"] = o.m_Locations;
    if(o.departureSearchesIsSet() || !o.m_Departure_searches.empty())
        j["departure_searches"] = o.m_Departure_searches;
    if(o.arrivalSearchesIsSet() || !o.m_Arrival_searches.empty())
        j["arrival_searches"] = o.m_Arrival_searches;
    
}

void from_json(const nlohmann::json& j, RequestTimeFilter& o)
{
    j.at("locations").get_to(o.m_Locations);
    if(j.find("departure_searches") != j.end())
    {
        j.at("departure_searches").get_to(o.m_Departure_searches);
        o.m_Departure_searchesIsSet = true;
    } 
    if(j.find("arrival_searches") != j.end())
    {
        j.at("arrival_searches").get_to(o.m_Arrival_searches);
        o.m_Arrival_searchesIsSet = true;
    } 
    
}

std::vector<RequestLocation> RequestTimeFilter::getLocations() const
{
    return m_Locations;
}
void RequestTimeFilter::setLocations(std::vector<RequestLocation> const& value)
{
    m_Locations = value;
}
std::vector<RequestTimeFilterDepartureSearch> RequestTimeFilter::getDepartureSearches() const
{
    return m_Departure_searches;
}
void RequestTimeFilter::setDepartureSearches(std::vector<RequestTimeFilterDepartureSearch> const& value)
{
    m_Departure_searches = value;
    m_Departure_searchesIsSet = true;
}
bool RequestTimeFilter::departureSearchesIsSet() const
{
    return m_Departure_searchesIsSet;
}
void RequestTimeFilter::unsetDeparture_searches()
{
    m_Departure_searchesIsSet = false;
}
std::vector<RequestTimeFilterArrivalSearch> RequestTimeFilter::getArrivalSearches() const
{
    return m_Arrival_searches;
}
void RequestTimeFilter::setArrivalSearches(std::vector<RequestTimeFilterArrivalSearch> const& value)
{
    m_Arrival_searches = value;
    m_Arrival_searchesIsSet = true;
}
bool RequestTimeFilter::arrivalSearchesIsSet() const
{
    return m_Arrival_searchesIsSet;
}
void RequestTimeFilter::unsetArrival_searches()
{
    m_Arrival_searchesIsSet = false;
}


} // namespace org::openapitools::server::model

