/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilterFastArrivalSearches.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RequestTimeFilterFastArrivalSearches::RequestTimeFilterFastArrivalSearches()
{
    m_Many_to_oneIsSet = false;
    m_One_to_manyIsSet = false;
    
}

void RequestTimeFilterFastArrivalSearches::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RequestTimeFilterFastArrivalSearches::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RequestTimeFilterFastArrivalSearches::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RequestTimeFilterFastArrivalSearches" : pathPrefix;

         
    if (manyToOneIsSet())
    {
        const std::vector<RequestTimeFilterFastArrivalManyToOneSearch>& value = m_Many_to_one;
        const std::string currentValuePath = _pathPrefix + ".manyToOne";
                
        
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestTimeFilterFastArrivalManyToOneSearch& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".manyToOne") && success;
 
                i++;
            }
        }

    }
    
     
    if (oneToManyIsSet())
    {
        const std::vector<RequestTimeFilterFastArrivalOneToManySearch>& value = m_One_to_many;
        const std::string currentValuePath = _pathPrefix + ".oneToMany";
                
        
        if (value.size() > 10)
        {
            success = false;
            msg << currentValuePath << ": must have at most 10 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestTimeFilterFastArrivalOneToManySearch& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".oneToMany") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool RequestTimeFilterFastArrivalSearches::operator==(const RequestTimeFilterFastArrivalSearches& rhs) const
{
    return
    
    
    
    ((!manyToOneIsSet() && !rhs.manyToOneIsSet()) || (manyToOneIsSet() && rhs.manyToOneIsSet() && getManyToOne() == rhs.getManyToOne())) &&
    
    
    ((!oneToManyIsSet() && !rhs.oneToManyIsSet()) || (oneToManyIsSet() && rhs.oneToManyIsSet() && getOneToMany() == rhs.getOneToMany()))
    
    ;
}

bool RequestTimeFilterFastArrivalSearches::operator!=(const RequestTimeFilterFastArrivalSearches& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestTimeFilterFastArrivalSearches& o)
{
    j = nlohmann::json();
    if(o.manyToOneIsSet() || !o.m_Many_to_one.empty())
        j["many_to_one"] = o.m_Many_to_one;
    if(o.oneToManyIsSet() || !o.m_One_to_many.empty())
        j["one_to_many"] = o.m_One_to_many;
    
}

void from_json(const nlohmann::json& j, RequestTimeFilterFastArrivalSearches& o)
{
    if(j.find("many_to_one") != j.end())
    {
        j.at("many_to_one").get_to(o.m_Many_to_one);
        o.m_Many_to_oneIsSet = true;
    } 
    if(j.find("one_to_many") != j.end())
    {
        j.at("one_to_many").get_to(o.m_One_to_many);
        o.m_One_to_manyIsSet = true;
    } 
    
}

std::vector<RequestTimeFilterFastArrivalManyToOneSearch> RequestTimeFilterFastArrivalSearches::getManyToOne() const
{
    return m_Many_to_one;
}
void RequestTimeFilterFastArrivalSearches::setManyToOne(std::vector<RequestTimeFilterFastArrivalManyToOneSearch> const& value)
{
    m_Many_to_one = value;
    m_Many_to_oneIsSet = true;
}
bool RequestTimeFilterFastArrivalSearches::manyToOneIsSet() const
{
    return m_Many_to_oneIsSet;
}
void RequestTimeFilterFastArrivalSearches::unsetMany_to_one()
{
    m_Many_to_oneIsSet = false;
}
std::vector<RequestTimeFilterFastArrivalOneToManySearch> RequestTimeFilterFastArrivalSearches::getOneToMany() const
{
    return m_One_to_many;
}
void RequestTimeFilterFastArrivalSearches::setOneToMany(std::vector<RequestTimeFilterFastArrivalOneToManySearch> const& value)
{
    m_One_to_many = value;
    m_One_to_manyIsSet = true;
}
bool RequestTimeFilterFastArrivalSearches::oneToManyIsSet() const
{
    return m_One_to_manyIsSet;
}
void RequestTimeFilterFastArrivalSearches::unsetOne_to_many()
{
    m_One_to_manyIsSet = false;
}


} // namespace org::openapitools::server::model

