/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilterPostcodeDistrictsArrivalSearch.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RequestTimeFilterPostcodeDistrictsArrivalSearch::RequestTimeFilterPostcodeDistrictsArrivalSearch()
{
    m_Id = "";
    m_Travel_time = 0;
    m_Arrival_time = "";
    m_Reachable_postcodes_threshold = 0.0;
    m_RangeIsSet = false;
    
}

void RequestTimeFilterPostcodeDistrictsArrivalSearch::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RequestTimeFilterPostcodeDistrictsArrivalSearch::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RequestTimeFilterPostcodeDistrictsArrivalSearch::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RequestTimeFilterPostcodeDistrictsArrivalSearch" : pathPrefix;

        
    
     
    
    /* Travel_time */ {
        const int32_t& value = m_Travel_time;
        const std::string currentValuePath = _pathPrefix + ".travelTime";
                
        
        if (value < 60)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 60;";
        }
        if (value > 14400)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 14400;";
        }

    }
    
    
    
     
    
    /* Properties */ {
        const std::vector<RequestTimeFilterPostcodeDistrictsProperty>& value = m_Properties;
        const std::string currentValuePath = _pathPrefix + ".properties";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const RequestTimeFilterPostcodeDistrictsProperty& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
    

    return success;
}

bool RequestTimeFilterPostcodeDistrictsArrivalSearch::operator==(const RequestTimeFilterPostcodeDistrictsArrivalSearch& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getTransportation() == rhs.getTransportation())
     &&
    
    (getTravelTime() == rhs.getTravelTime())
     &&
    
    (getArrivalTime() == rhs.getArrivalTime())
     &&
    
    (getReachablePostcodesThreshold() == rhs.getReachablePostcodesThreshold())
     &&
    
    (getProperties() == rhs.getProperties())
     &&
    
    
    ((!rangeIsSet() && !rhs.rangeIsSet()) || (rangeIsSet() && rhs.rangeIsSet() && getRange() == rhs.getRange()))
    
    ;
}

bool RequestTimeFilterPostcodeDistrictsArrivalSearch::operator!=(const RequestTimeFilterPostcodeDistrictsArrivalSearch& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestTimeFilterPostcodeDistrictsArrivalSearch& o)
{
    j = nlohmann::json();
    j["id"] = o.m_Id;
    j["transportation"] = o.m_Transportation;
    j["travel_time"] = o.m_Travel_time;
    j["arrival_time"] = o.m_Arrival_time;
    j["reachable_postcodes_threshold"] = o.m_Reachable_postcodes_threshold;
    j["properties"] = o.m_Properties;
    if(o.rangeIsSet())
        j["range"] = o.m_Range;
    
}

void from_json(const nlohmann::json& j, RequestTimeFilterPostcodeDistrictsArrivalSearch& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("transportation").get_to(o.m_Transportation);
    j.at("travel_time").get_to(o.m_Travel_time);
    j.at("arrival_time").get_to(o.m_Arrival_time);
    j.at("reachable_postcodes_threshold").get_to(o.m_Reachable_postcodes_threshold);
    j.at("properties").get_to(o.m_Properties);
    if(j.find("range") != j.end())
    {
        j.at("range").get_to(o.m_Range);
        o.m_RangeIsSet = true;
    } 
    
}

std::string RequestTimeFilterPostcodeDistrictsArrivalSearch::getId() const
{
    return m_Id;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setId(std::string const& value)
{
    m_Id = value;
}
RequestTransportation RequestTimeFilterPostcodeDistrictsArrivalSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
}
int32_t RequestTimeFilterPostcodeDistrictsArrivalSearch::getTravelTime() const
{
    return m_Travel_time;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
}
std::string RequestTimeFilterPostcodeDistrictsArrivalSearch::getArrivalTime() const
{
    return m_Arrival_time;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setArrivalTime(std::string const& value)
{
    m_Arrival_time = value;
}
double RequestTimeFilterPostcodeDistrictsArrivalSearch::getReachablePostcodesThreshold() const
{
    return m_Reachable_postcodes_threshold;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setReachablePostcodesThreshold(double const value)
{
    m_Reachable_postcodes_threshold = value;
}
std::vector<RequestTimeFilterPostcodeDistrictsProperty> RequestTimeFilterPostcodeDistrictsArrivalSearch::getProperties() const
{
    return m_Properties;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setProperties(std::vector<RequestTimeFilterPostcodeDistrictsProperty> const& value)
{
    m_Properties = value;
}
RequestRangeFull RequestTimeFilterPostcodeDistrictsArrivalSearch::getRange() const
{
    return m_Range;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::setRange(RequestRangeFull const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestTimeFilterPostcodeDistrictsArrivalSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestTimeFilterPostcodeDistrictsArrivalSearch::unsetRange()
{
    m_RangeIsSet = false;
}


} // namespace org::openapitools::server::model

