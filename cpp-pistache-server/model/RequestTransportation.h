/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestTransportation.h
 *
 * 
 */

#ifndef RequestTransportation_H_
#define RequestTransportation_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  RequestTransportation
{
public:
    RequestTransportation();
    virtual ~RequestTransportation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const RequestTransportation& rhs) const;
    bool operator!=(const RequestTransportation& rhs) const;

    /////////////////////////////////////////////
    /// RequestTransportation members

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    bool isDisableBorderCrossing() const;
    void setDisableBorderCrossing(bool const value);
    bool disableBorderCrossingIsSet() const;
    void unsetDisable_border_crossing();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPtChangeDelay() const;
    void setPtChangeDelay(int32_t const value);
    bool ptChangeDelayIsSet() const;
    void unsetPt_change_delay();
    /// <summary>
    /// 
    /// </summary>
    int32_t getWalkingTime() const;
    void setWalkingTime(int32_t const value);
    bool walkingTimeIsSet() const;
    void unsetWalking_time();
    /// <summary>
    /// 
    /// </summary>
    int32_t getDrivingTimeToStation() const;
    void setDrivingTimeToStation(int32_t const value);
    bool drivingTimeToStationIsSet() const;
    void unsetDriving_time_to_station();
    /// <summary>
    /// 
    /// </summary>
    int32_t getCyclingTimeToStation() const;
    void setCyclingTimeToStation(int32_t const value);
    bool cyclingTimeToStationIsSet() const;
    void unsetCycling_time_to_station();
    /// <summary>
    /// 
    /// </summary>
    int32_t getParkingTime() const;
    void setParkingTime(int32_t const value);
    bool parkingTimeIsSet() const;
    void unsetParking_time();
    /// <summary>
    /// 
    /// </summary>
    int32_t getBoardingTime() const;
    void setBoardingTime(int32_t const value);
    bool boardingTimeIsSet() const;
    void unsetBoarding_time();

    friend void to_json(nlohmann::json& j, const RequestTransportation& o);
    friend void from_json(const nlohmann::json& j, RequestTransportation& o);
protected:
    std::string m_Type;

    bool m_Disable_border_crossing;
    bool m_Disable_border_crossingIsSet;
    int32_t m_Pt_change_delay;
    bool m_Pt_change_delayIsSet;
    int32_t m_Walking_time;
    bool m_Walking_timeIsSet;
    int32_t m_Driving_time_to_station;
    bool m_Driving_time_to_stationIsSet;
    int32_t m_Cycling_time_to_station;
    bool m_Cycling_time_to_stationIsSet;
    int32_t m_Parking_time;
    bool m_Parking_timeIsSet;
    int32_t m_Boarding_time;
    bool m_Boarding_timeIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

} // namespace org::openapitools::server::model

#endif /* RequestTransportation_H_ */
