/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ResponseError.h
 *
 * 
 */

#ifndef ResponseError_H_
#define ResponseError_H_


#include <string>
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ResponseError
{
public:
    ResponseError();
    virtual ~ResponseError() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const ResponseError& rhs) const;
    bool operator!=(const ResponseError& rhs) const;

    /////////////////////////////////////////////
    /// ResponseError members

    /// <summary>
    /// 
    /// </summary>
    int32_t getHttpStatus() const;
    void setHttpStatus(int32_t const value);
    bool httpStatusIsSet() const;
    void unsetHttp_status();
    /// <summary>
    /// 
    /// </summary>
    int32_t getErrorCode() const;
    void setErrorCode(int32_t const value);
    bool errorCodeIsSet() const;
    void unsetError_code();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getDocumentationLink() const;
    void setDocumentationLink(std::string const& value);
    bool documentationLinkIsSet() const;
    void unsetDocumentation_link();
    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, std::vector<std::string>> getAdditionalInfo() const;
    void setAdditionalInfo(std::map<std::string, std::vector<std::string>> const& value);
    bool additionalInfoIsSet() const;
    void unsetAdditional_info();

    friend void to_json(nlohmann::json& j, const ResponseError& o);
    friend void from_json(const nlohmann::json& j, ResponseError& o);
protected:
    int32_t m_Http_status;
    bool m_Http_statusIsSet;
    int32_t m_Error_code;
    bool m_Error_codeIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Documentation_link;
    bool m_Documentation_linkIsSet;
    std::map<std::string, std::vector<std::string>> m_Additional_info;
    bool m_Additional_infoIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

} // namespace org::openapitools::server::model

#endif /* ResponseError_H_ */
