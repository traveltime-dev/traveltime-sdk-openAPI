/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseFares.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseFares::ResponseFares()
{
    
}

void ResponseFares::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseFares::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseFares::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseFares" : pathPrefix;

         
    
    /* Breakdown */ {
        const std::vector<ResponseFaresBreakdownItem>& value = m_Breakdown;
        const std::string currentValuePath = _pathPrefix + ".breakdown";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseFaresBreakdownItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".breakdown") && success;
 
                i++;
            }
        }

    }
    
     
    
    /* Tickets_total */ {
        const std::vector<ResponseFareTicket>& value = m_Tickets_total;
        const std::string currentValuePath = _pathPrefix + ".ticketsTotal";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseFareTicket& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".ticketsTotal") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool ResponseFares::operator==(const ResponseFares& rhs) const
{
    return
    
    
    (getBreakdown() == rhs.getBreakdown())
     &&
    
    (getTicketsTotal() == rhs.getTicketsTotal())
    
    
    ;
}

bool ResponseFares::operator!=(const ResponseFares& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseFares& o)
{
    j = nlohmann::json();
    j["breakdown"] = o.m_Breakdown;
    j["tickets_total"] = o.m_Tickets_total;
    
}

void from_json(const nlohmann::json& j, ResponseFares& o)
{
    j.at("breakdown").get_to(o.m_Breakdown);
    j.at("tickets_total").get_to(o.m_Tickets_total);
    
}

std::vector<ResponseFaresBreakdownItem> ResponseFares::getBreakdown() const
{
    return m_Breakdown;
}
void ResponseFares::setBreakdown(std::vector<ResponseFaresBreakdownItem> const& value)
{
    m_Breakdown = value;
}
std::vector<ResponseFareTicket> ResponseFares::getTicketsTotal() const
{
    return m_Tickets_total;
}
void ResponseFares::setTicketsTotal(std::vector<ResponseFareTicket> const& value)
{
    m_Tickets_total = value;
}


} // namespace org::openapitools::server::model

