/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseFaresBreakdownItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseFaresBreakdownItem::ResponseFaresBreakdownItem()
{
    
}

void ResponseFaresBreakdownItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseFaresBreakdownItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseFaresBreakdownItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseFaresBreakdownItem" : pathPrefix;

         
    
    /* Modes */ {
        const std::vector<ResponseTransportationMode>& value = m_Modes;
        const std::string currentValuePath = _pathPrefix + ".modes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseTransportationMode& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath) && success;
        
        
 
                i++;
            }
        }

    }
    
     
    
    /* Route_part_ids */ {
        const std::vector<int32_t>& value = m_Route_part_ids;
        const std::string currentValuePath = _pathPrefix + ".routePartIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
     
    
    /* Tickets */ {
        const std::vector<ResponseFareTicket>& value = m_Tickets;
        const std::string currentValuePath = _pathPrefix + ".tickets";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseFareTicket& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".tickets") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool ResponseFaresBreakdownItem::operator==(const ResponseFaresBreakdownItem& rhs) const
{
    return
    
    
    (getModes() == rhs.getModes())
     &&
    
    (getRoutePartIds() == rhs.getRoutePartIds())
     &&
    
    (getTickets() == rhs.getTickets())
    
    
    ;
}

bool ResponseFaresBreakdownItem::operator!=(const ResponseFaresBreakdownItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseFaresBreakdownItem& o)
{
    j = nlohmann::json();
    j["modes"] = o.m_Modes;
    j["route_part_ids"] = o.m_Route_part_ids;
    j["tickets"] = o.m_Tickets;
    
}

void from_json(const nlohmann::json& j, ResponseFaresBreakdownItem& o)
{
    j.at("modes").get_to(o.m_Modes);
    j.at("route_part_ids").get_to(o.m_Route_part_ids);
    j.at("tickets").get_to(o.m_Tickets);
    
}

std::vector<ResponseTransportationMode> ResponseFaresBreakdownItem::getModes() const
{
    return m_Modes;
}
void ResponseFaresBreakdownItem::setModes(std::vector<ResponseTransportationMode> const& value)
{
    m_Modes = value;
}
std::vector<int32_t> ResponseFaresBreakdownItem::getRoutePartIds() const
{
    return m_Route_part_ids;
}
void ResponseFaresBreakdownItem::setRoutePartIds(std::vector<int32_t> const value)
{
    m_Route_part_ids = value;
}
std::vector<ResponseFareTicket> ResponseFaresBreakdownItem::getTickets() const
{
    return m_Tickets;
}
void ResponseFaresBreakdownItem::setTickets(std::vector<ResponseFareTicket> const& value)
{
    m_Tickets = value;
}


} // namespace org::openapitools::server::model

