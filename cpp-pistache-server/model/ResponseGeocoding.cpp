/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseGeocoding.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseGeocoding::ResponseGeocoding()
{
    m_Type = "";
    
}

void ResponseGeocoding::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseGeocoding::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseGeocoding::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseGeocoding" : pathPrefix;

        
     
    
    /* Features */ {
        const std::vector<ResponseGeocodingGeoJsonFeature>& value = m_Features;
        const std::string currentValuePath = _pathPrefix + ".features";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseGeocodingGeoJsonFeature& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".features") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool ResponseGeocoding::operator==(const ResponseGeocoding& rhs) const
{
    return
    
    
    (getType() == rhs.getType())
     &&
    
    (getFeatures() == rhs.getFeatures())
    
    
    ;
}

bool ResponseGeocoding::operator!=(const ResponseGeocoding& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseGeocoding& o)
{
    j = nlohmann::json();
    j["type"] = o.m_Type;
    j["features"] = o.m_Features;
    
}

void from_json(const nlohmann::json& j, ResponseGeocoding& o)
{
    j.at("type").get_to(o.m_Type);
    j.at("features").get_to(o.m_Features);
    
}

std::string ResponseGeocoding::getType() const
{
    return m_Type;
}
void ResponseGeocoding::setType(std::string const& value)
{
    m_Type = value;
}
std::vector<ResponseGeocodingGeoJsonFeature> ResponseGeocoding::getFeatures() const
{
    return m_Features;
}
void ResponseGeocoding::setFeatures(std::vector<ResponseGeocodingGeoJsonFeature> const& value)
{
    m_Features = value;
}


} // namespace org::openapitools::server::model

