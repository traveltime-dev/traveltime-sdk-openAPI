/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ResponseGeocodingProperties.h
 *
 * 
 */

#ifndef ResponseGeocodingProperties_H_
#define ResponseGeocodingProperties_H_


#include <string>
#include "ResponseMapInfoFeatures.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ResponseGeocodingProperties
{
public:
    ResponseGeocodingProperties();
    virtual ~ResponseGeocodingProperties() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const ResponseGeocodingProperties& rhs) const;
    bool operator!=(const ResponseGeocodingProperties& rhs) const;

    /////////////////////////////////////////////
    /// ResponseGeocodingProperties members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLabel() const;
    void setLabel(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    double getScore() const;
    void setScore(double const value);
    bool scoreIsSet() const;
    void unsetScore();
    /// <summary>
    /// 
    /// </summary>
    std::string getHouseNumber() const;
    void setHouseNumber(std::string const& value);
    bool houseNumberIsSet() const;
    void unsetHouse_number();
    /// <summary>
    /// 
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string const& value);
    bool streetIsSet() const;
    void unsetStreet();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegion() const;
    void setRegion(std::string const& value);
    bool regionIsSet() const;
    void unsetRegion();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegionCode() const;
    void setRegionCode(std::string const& value);
    bool regionCodeIsSet() const;
    void unsetRegion_code();
    /// <summary>
    /// 
    /// </summary>
    std::string getNeighbourhood() const;
    void setNeighbourhood(std::string const& value);
    bool neighbourhoodIsSet() const;
    void unsetNeighbourhood();
    /// <summary>
    /// 
    /// </summary>
    std::string getCounty() const;
    void setCounty(std::string const& value);
    bool countyIsSet() const;
    void unsetCounty();
    /// <summary>
    /// 
    /// </summary>
    std::string getMacroregion() const;
    void setMacroregion(std::string const& value);
    bool macroregionIsSet() const;
    void unsetMacroregion();
    /// <summary>
    /// 
    /// </summary>
    std::string getCity() const;
    void setCity(std::string const& value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// 
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// 
    /// </summary>
    std::string getCountryCode() const;
    void setCountryCode(std::string const& value);
    bool countryCodeIsSet() const;
    void unsetCountry_code();
    /// <summary>
    /// 
    /// </summary>
    std::string getContinent() const;
    void setContinent(std::string const& value);
    bool continentIsSet() const;
    void unsetContinent();
    /// <summary>
    /// 
    /// </summary>
    std::string getPostcode() const;
    void setPostcode(std::string const& value);
    bool postcodeIsSet() const;
    void unsetPostcode();
    /// <summary>
    /// 
    /// </summary>
    ResponseMapInfoFeatures getFeatures() const;
    void setFeatures(ResponseMapInfoFeatures const& value);
    bool featuresIsSet() const;
    void unsetFeatures();

    friend void to_json(nlohmann::json& j, const ResponseGeocodingProperties& o);
    friend void from_json(const nlohmann::json& j, ResponseGeocodingProperties& o);
protected:
    std::string m_Name;

    std::string m_Label;

    double m_Score;
    bool m_ScoreIsSet;
    std::string m_House_number;
    bool m_House_numberIsSet;
    std::string m_Street;
    bool m_StreetIsSet;
    std::string m_Region;
    bool m_RegionIsSet;
    std::string m_Region_code;
    bool m_Region_codeIsSet;
    std::string m_Neighbourhood;
    bool m_NeighbourhoodIsSet;
    std::string m_County;
    bool m_CountyIsSet;
    std::string m_Macroregion;
    bool m_MacroregionIsSet;
    std::string m_City;
    bool m_CityIsSet;
    std::string m_Country;
    bool m_CountryIsSet;
    std::string m_Country_code;
    bool m_Country_codeIsSet;
    std::string m_Continent;
    bool m_ContinentIsSet;
    std::string m_Postcode;
    bool m_PostcodeIsSet;
    ResponseMapInfoFeatures m_Features;
    bool m_FeaturesIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

} // namespace org::openapitools::server::model

#endif /* ResponseGeocodingProperties_H_ */
