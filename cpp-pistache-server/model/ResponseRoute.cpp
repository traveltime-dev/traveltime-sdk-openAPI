/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseRoute.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseRoute::ResponseRoute()
{
    m_Departure_time = "";
    m_Arrival_time = "";
    
}

void ResponseRoute::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseRoute::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseRoute::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseRoute" : pathPrefix;

        
    
     
    
    /* Parts */ {
        const std::vector<ResponseRoutePart>& value = m_Parts;
        const std::string currentValuePath = _pathPrefix + ".parts";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseRoutePart& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".parts") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool ResponseRoute::operator==(const ResponseRoute& rhs) const
{
    return
    
    
    (getDepartureTime() == rhs.getDepartureTime())
     &&
    
    (getArrivalTime() == rhs.getArrivalTime())
     &&
    
    (getParts() == rhs.getParts())
    
    
    ;
}

bool ResponseRoute::operator!=(const ResponseRoute& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseRoute& o)
{
    j = nlohmann::json();
    j["departure_time"] = o.m_Departure_time;
    j["arrival_time"] = o.m_Arrival_time;
    j["parts"] = o.m_Parts;
    
}

void from_json(const nlohmann::json& j, ResponseRoute& o)
{
    j.at("departure_time").get_to(o.m_Departure_time);
    j.at("arrival_time").get_to(o.m_Arrival_time);
    j.at("parts").get_to(o.m_Parts);
    
}

std::string ResponseRoute::getDepartureTime() const
{
    return m_Departure_time;
}
void ResponseRoute::setDepartureTime(std::string const& value)
{
    m_Departure_time = value;
}
std::string ResponseRoute::getArrivalTime() const
{
    return m_Arrival_time;
}
void ResponseRoute::setArrivalTime(std::string const& value)
{
    m_Arrival_time = value;
}
std::vector<ResponseRoutePart> ResponseRoute::getParts() const
{
    return m_Parts;
}
void ResponseRoute::setParts(std::vector<ResponseRoutePart> const& value)
{
    m_Parts = value;
}


} // namespace org::openapitools::server::model

