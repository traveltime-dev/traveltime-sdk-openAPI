/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseRoutePart.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseRoutePart::ResponseRoutePart()
{
    m_Id = "";
    m_Type = "";
    m_Directions = "";
    m_Distance = 0;
    m_Travel_time = 0;
    m_Direction = "";
    m_DirectionIsSet = false;
    m_Road = "";
    m_RoadIsSet = false;
    m_Turn = "";
    m_TurnIsSet = false;
    m_Line = "";
    m_LineIsSet = false;
    m_Departure_station = "";
    m_Departure_stationIsSet = false;
    m_Arrival_station = "";
    m_Arrival_stationIsSet = false;
    m_Departs_at = "";
    m_Departs_atIsSet = false;
    m_Arrives_at = "";
    m_Arrives_atIsSet = false;
    m_Num_stops = 0;
    m_Num_stopsIsSet = false;
    
}

void ResponseRoutePart::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseRoutePart::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseRoutePart::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseRoutePart" : pathPrefix;

        
    
    
    
    
    
     
    
    /* Coords */ {
        const std::vector<Coords>& value = m_Coords;
        const std::string currentValuePath = _pathPrefix + ".coords";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Coords& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".coords") && success;
 
                i++;
            }
        }

    }
    
    
    
    
    
    
    
    
    
    

    return success;
}

bool ResponseRoutePart::operator==(const ResponseRoutePart& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    (getType() == rhs.getType())
     &&
    
    (getMode() == rhs.getMode())
     &&
    
    (getDirections() == rhs.getDirections())
     &&
    
    (getDistance() == rhs.getDistance())
     &&
    
    (getTravelTime() == rhs.getTravelTime())
     &&
    
    (getCoords() == rhs.getCoords())
     &&
    
    
    ((!directionIsSet() && !rhs.directionIsSet()) || (directionIsSet() && rhs.directionIsSet() && getDirection() == rhs.getDirection())) &&
    
    
    ((!roadIsSet() && !rhs.roadIsSet()) || (roadIsSet() && rhs.roadIsSet() && getRoad() == rhs.getRoad())) &&
    
    
    ((!turnIsSet() && !rhs.turnIsSet()) || (turnIsSet() && rhs.turnIsSet() && getTurn() == rhs.getTurn())) &&
    
    
    ((!lineIsSet() && !rhs.lineIsSet()) || (lineIsSet() && rhs.lineIsSet() && getLine() == rhs.getLine())) &&
    
    
    ((!departureStationIsSet() && !rhs.departureStationIsSet()) || (departureStationIsSet() && rhs.departureStationIsSet() && getDepartureStation() == rhs.getDepartureStation())) &&
    
    
    ((!arrivalStationIsSet() && !rhs.arrivalStationIsSet()) || (arrivalStationIsSet() && rhs.arrivalStationIsSet() && getArrivalStation() == rhs.getArrivalStation())) &&
    
    
    ((!departsAtIsSet() && !rhs.departsAtIsSet()) || (departsAtIsSet() && rhs.departsAtIsSet() && getDepartsAt() == rhs.getDepartsAt())) &&
    
    
    ((!arrivesAtIsSet() && !rhs.arrivesAtIsSet()) || (arrivesAtIsSet() && rhs.arrivesAtIsSet() && getArrivesAt() == rhs.getArrivesAt())) &&
    
    
    ((!numStopsIsSet() && !rhs.numStopsIsSet()) || (numStopsIsSet() && rhs.numStopsIsSet() && getNumStops() == rhs.getNumStops()))
    
    ;
}

bool ResponseRoutePart::operator!=(const ResponseRoutePart& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseRoutePart& o)
{
    j = nlohmann::json();
    j["id"] = o.m_Id;
    j["type"] = o.m_Type;
    j["mode"] = o.m_Mode;
    j["directions"] = o.m_Directions;
    j["distance"] = o.m_Distance;
    j["travel_time"] = o.m_Travel_time;
    j["coords"] = o.m_Coords;
    if(o.directionIsSet())
        j["direction"] = o.m_Direction;
    if(o.roadIsSet())
        j["road"] = o.m_Road;
    if(o.turnIsSet())
        j["turn"] = o.m_Turn;
    if(o.lineIsSet())
        j["line"] = o.m_Line;
    if(o.departureStationIsSet())
        j["departure_station"] = o.m_Departure_station;
    if(o.arrivalStationIsSet())
        j["arrival_station"] = o.m_Arrival_station;
    if(o.departsAtIsSet())
        j["departs_at"] = o.m_Departs_at;
    if(o.arrivesAtIsSet())
        j["arrives_at"] = o.m_Arrives_at;
    if(o.numStopsIsSet())
        j["num_stops"] = o.m_Num_stops;
    
}

void from_json(const nlohmann::json& j, ResponseRoutePart& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("type").get_to(o.m_Type);
    j.at("mode").get_to(o.m_Mode);
    j.at("directions").get_to(o.m_Directions);
    j.at("distance").get_to(o.m_Distance);
    j.at("travel_time").get_to(o.m_Travel_time);
    j.at("coords").get_to(o.m_Coords);
    if(j.find("direction") != j.end())
    {
        j.at("direction").get_to(o.m_Direction);
        o.m_DirectionIsSet = true;
    } 
    if(j.find("road") != j.end())
    {
        j.at("road").get_to(o.m_Road);
        o.m_RoadIsSet = true;
    } 
    if(j.find("turn") != j.end())
    {
        j.at("turn").get_to(o.m_Turn);
        o.m_TurnIsSet = true;
    } 
    if(j.find("line") != j.end())
    {
        j.at("line").get_to(o.m_Line);
        o.m_LineIsSet = true;
    } 
    if(j.find("departure_station") != j.end())
    {
        j.at("departure_station").get_to(o.m_Departure_station);
        o.m_Departure_stationIsSet = true;
    } 
    if(j.find("arrival_station") != j.end())
    {
        j.at("arrival_station").get_to(o.m_Arrival_station);
        o.m_Arrival_stationIsSet = true;
    } 
    if(j.find("departs_at") != j.end())
    {
        j.at("departs_at").get_to(o.m_Departs_at);
        o.m_Departs_atIsSet = true;
    } 
    if(j.find("arrives_at") != j.end())
    {
        j.at("arrives_at").get_to(o.m_Arrives_at);
        o.m_Arrives_atIsSet = true;
    } 
    if(j.find("num_stops") != j.end())
    {
        j.at("num_stops").get_to(o.m_Num_stops);
        o.m_Num_stopsIsSet = true;
    } 
    
}

std::string ResponseRoutePart::getId() const
{
    return m_Id;
}
void ResponseRoutePart::setId(std::string const& value)
{
    m_Id = value;
}
std::string ResponseRoutePart::getType() const
{
    return m_Type;
}
void ResponseRoutePart::setType(std::string const& value)
{
    m_Type = value;
}
ResponseTransportationMode ResponseRoutePart::getMode() const
{
    return m_Mode;
}
void ResponseRoutePart::setMode(ResponseTransportationMode const& value)
{
    m_Mode = value;
}
std::string ResponseRoutePart::getDirections() const
{
    return m_Directions;
}
void ResponseRoutePart::setDirections(std::string const& value)
{
    m_Directions = value;
}
int32_t ResponseRoutePart::getDistance() const
{
    return m_Distance;
}
void ResponseRoutePart::setDistance(int32_t const value)
{
    m_Distance = value;
}
int32_t ResponseRoutePart::getTravelTime() const
{
    return m_Travel_time;
}
void ResponseRoutePart::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
}
std::vector<Coords> ResponseRoutePart::getCoords() const
{
    return m_Coords;
}
void ResponseRoutePart::setCoords(std::vector<Coords> const& value)
{
    m_Coords = value;
}
std::string ResponseRoutePart::getDirection() const
{
    return m_Direction;
}
void ResponseRoutePart::setDirection(std::string const& value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool ResponseRoutePart::directionIsSet() const
{
    return m_DirectionIsSet;
}
void ResponseRoutePart::unsetDirection()
{
    m_DirectionIsSet = false;
}
std::string ResponseRoutePart::getRoad() const
{
    return m_Road;
}
void ResponseRoutePart::setRoad(std::string const& value)
{
    m_Road = value;
    m_RoadIsSet = true;
}
bool ResponseRoutePart::roadIsSet() const
{
    return m_RoadIsSet;
}
void ResponseRoutePart::unsetRoad()
{
    m_RoadIsSet = false;
}
std::string ResponseRoutePart::getTurn() const
{
    return m_Turn;
}
void ResponseRoutePart::setTurn(std::string const& value)
{
    m_Turn = value;
    m_TurnIsSet = true;
}
bool ResponseRoutePart::turnIsSet() const
{
    return m_TurnIsSet;
}
void ResponseRoutePart::unsetTurn()
{
    m_TurnIsSet = false;
}
std::string ResponseRoutePart::getLine() const
{
    return m_Line;
}
void ResponseRoutePart::setLine(std::string const& value)
{
    m_Line = value;
    m_LineIsSet = true;
}
bool ResponseRoutePart::lineIsSet() const
{
    return m_LineIsSet;
}
void ResponseRoutePart::unsetLine()
{
    m_LineIsSet = false;
}
std::string ResponseRoutePart::getDepartureStation() const
{
    return m_Departure_station;
}
void ResponseRoutePart::setDepartureStation(std::string const& value)
{
    m_Departure_station = value;
    m_Departure_stationIsSet = true;
}
bool ResponseRoutePart::departureStationIsSet() const
{
    return m_Departure_stationIsSet;
}
void ResponseRoutePart::unsetDeparture_station()
{
    m_Departure_stationIsSet = false;
}
std::string ResponseRoutePart::getArrivalStation() const
{
    return m_Arrival_station;
}
void ResponseRoutePart::setArrivalStation(std::string const& value)
{
    m_Arrival_station = value;
    m_Arrival_stationIsSet = true;
}
bool ResponseRoutePart::arrivalStationIsSet() const
{
    return m_Arrival_stationIsSet;
}
void ResponseRoutePart::unsetArrival_station()
{
    m_Arrival_stationIsSet = false;
}
std::string ResponseRoutePart::getDepartsAt() const
{
    return m_Departs_at;
}
void ResponseRoutePart::setDepartsAt(std::string const& value)
{
    m_Departs_at = value;
    m_Departs_atIsSet = true;
}
bool ResponseRoutePart::departsAtIsSet() const
{
    return m_Departs_atIsSet;
}
void ResponseRoutePart::unsetDeparts_at()
{
    m_Departs_atIsSet = false;
}
std::string ResponseRoutePart::getArrivesAt() const
{
    return m_Arrives_at;
}
void ResponseRoutePart::setArrivesAt(std::string const& value)
{
    m_Arrives_at = value;
    m_Arrives_atIsSet = true;
}
bool ResponseRoutePart::arrivesAtIsSet() const
{
    return m_Arrives_atIsSet;
}
void ResponseRoutePart::unsetArrives_at()
{
    m_Arrives_atIsSet = false;
}
int32_t ResponseRoutePart::getNumStops() const
{
    return m_Num_stops;
}
void ResponseRoutePart::setNumStops(int32_t const value)
{
    m_Num_stops = value;
    m_Num_stopsIsSet = true;
}
bool ResponseRoutePart::numStopsIsSet() const
{
    return m_Num_stopsIsSet;
}
void ResponseRoutePart::unsetNum_stops()
{
    m_Num_stopsIsSet = false;
}


} // namespace org::openapitools::server::model

