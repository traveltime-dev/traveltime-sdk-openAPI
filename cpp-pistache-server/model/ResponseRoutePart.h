/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ResponseRoutePart.h
 *
 * 
 */

#ifndef ResponseRoutePart_H_
#define ResponseRoutePart_H_


#include "ResponseTransportationMode.h"
#include <string>
#include "Coords.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ResponseRoutePart
{
public:
    ResponseRoutePart();
    virtual ~ResponseRoutePart() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const ResponseRoutePart& rhs) const;
    bool operator!=(const ResponseRoutePart& rhs) const;

    /////////////////////////////////////////////
    /// ResponseRoutePart members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    ResponseTransportationMode getMode() const;
    void setMode(ResponseTransportationMode const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDirections() const;
    void setDirections(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getDistance() const;
    void setDistance(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTravelTime() const;
    void setTravelTime(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<Coords> getCoords() const;
    void setCoords(std::vector<Coords> const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDirection() const;
    void setDirection(std::string const& value);
    bool directionIsSet() const;
    void unsetDirection();
    /// <summary>
    /// 
    /// </summary>
    std::string getRoad() const;
    void setRoad(std::string const& value);
    bool roadIsSet() const;
    void unsetRoad();
    /// <summary>
    /// 
    /// </summary>
    std::string getTurn() const;
    void setTurn(std::string const& value);
    bool turnIsSet() const;
    void unsetTurn();
    /// <summary>
    /// 
    /// </summary>
    std::string getLine() const;
    void setLine(std::string const& value);
    bool lineIsSet() const;
    void unsetLine();
    /// <summary>
    /// 
    /// </summary>
    std::string getDepartureStation() const;
    void setDepartureStation(std::string const& value);
    bool departureStationIsSet() const;
    void unsetDeparture_station();
    /// <summary>
    /// 
    /// </summary>
    std::string getArrivalStation() const;
    void setArrivalStation(std::string const& value);
    bool arrivalStationIsSet() const;
    void unsetArrival_station();
    /// <summary>
    /// 
    /// </summary>
    std::string getDepartsAt() const;
    void setDepartsAt(std::string const& value);
    bool departsAtIsSet() const;
    void unsetDeparts_at();
    /// <summary>
    /// 
    /// </summary>
    std::string getArrivesAt() const;
    void setArrivesAt(std::string const& value);
    bool arrivesAtIsSet() const;
    void unsetArrives_at();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNumStops() const;
    void setNumStops(int32_t const value);
    bool numStopsIsSet() const;
    void unsetNum_stops();

    friend void to_json(nlohmann::json& j, const ResponseRoutePart& o);
    friend void from_json(const nlohmann::json& j, ResponseRoutePart& o);
protected:
    std::string m_Id;

    std::string m_Type;

    ResponseTransportationMode m_Mode;

    std::string m_Directions;

    int32_t m_Distance;

    int32_t m_Travel_time;

    std::vector<Coords> m_Coords;

    std::string m_Direction;
    bool m_DirectionIsSet;
    std::string m_Road;
    bool m_RoadIsSet;
    std::string m_Turn;
    bool m_TurnIsSet;
    std::string m_Line;
    bool m_LineIsSet;
    std::string m_Departure_station;
    bool m_Departure_stationIsSet;
    std::string m_Arrival_station;
    bool m_Arrival_stationIsSet;
    std::string m_Departs_at;
    bool m_Departs_atIsSet;
    std::string m_Arrives_at;
    bool m_Arrives_atIsSet;
    int32_t m_Num_stops;
    bool m_Num_stopsIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

} // namespace org::openapitools::server::model

#endif /* ResponseRoutePart_H_ */
