/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseRoutesProperties.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseRoutesProperties::ResponseRoutesProperties()
{
    m_Travel_time = 0;
    m_Travel_timeIsSet = false;
    m_Distance = 0;
    m_DistanceIsSet = false;
    m_FaresIsSet = false;
    m_RouteIsSet = false;
    
}

void ResponseRoutesProperties::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseRoutesProperties::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseRoutesProperties::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseRoutesProperties" : pathPrefix;

        
    
    
    

    return success;
}

bool ResponseRoutesProperties::operator==(const ResponseRoutesProperties& rhs) const
{
    return
    
    
    
    ((!travelTimeIsSet() && !rhs.travelTimeIsSet()) || (travelTimeIsSet() && rhs.travelTimeIsSet() && getTravelTime() == rhs.getTravelTime())) &&
    
    
    ((!distanceIsSet() && !rhs.distanceIsSet()) || (distanceIsSet() && rhs.distanceIsSet() && getDistance() == rhs.getDistance())) &&
    
    
    ((!faresIsSet() && !rhs.faresIsSet()) || (faresIsSet() && rhs.faresIsSet() && getFares() == rhs.getFares())) &&
    
    
    ((!routeIsSet() && !rhs.routeIsSet()) || (routeIsSet() && rhs.routeIsSet() && getRoute() == rhs.getRoute()))
    
    ;
}

bool ResponseRoutesProperties::operator!=(const ResponseRoutesProperties& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseRoutesProperties& o)
{
    j = nlohmann::json();
    if(o.travelTimeIsSet())
        j["travel_time"] = o.m_Travel_time;
    if(o.distanceIsSet())
        j["distance"] = o.m_Distance;
    if(o.faresIsSet())
        j["fares"] = o.m_Fares;
    if(o.routeIsSet())
        j["route"] = o.m_Route;
    
}

void from_json(const nlohmann::json& j, ResponseRoutesProperties& o)
{
    if(j.find("travel_time") != j.end())
    {
        j.at("travel_time").get_to(o.m_Travel_time);
        o.m_Travel_timeIsSet = true;
    } 
    if(j.find("distance") != j.end())
    {
        j.at("distance").get_to(o.m_Distance);
        o.m_DistanceIsSet = true;
    } 
    if(j.find("fares") != j.end())
    {
        j.at("fares").get_to(o.m_Fares);
        o.m_FaresIsSet = true;
    } 
    if(j.find("route") != j.end())
    {
        j.at("route").get_to(o.m_Route);
        o.m_RouteIsSet = true;
    } 
    
}

int32_t ResponseRoutesProperties::getTravelTime() const
{
    return m_Travel_time;
}
void ResponseRoutesProperties::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
    m_Travel_timeIsSet = true;
}
bool ResponseRoutesProperties::travelTimeIsSet() const
{
    return m_Travel_timeIsSet;
}
void ResponseRoutesProperties::unsetTravel_time()
{
    m_Travel_timeIsSet = false;
}
int32_t ResponseRoutesProperties::getDistance() const
{
    return m_Distance;
}
void ResponseRoutesProperties::setDistance(int32_t const value)
{
    m_Distance = value;
    m_DistanceIsSet = true;
}
bool ResponseRoutesProperties::distanceIsSet() const
{
    return m_DistanceIsSet;
}
void ResponseRoutesProperties::unsetDistance()
{
    m_DistanceIsSet = false;
}
ResponseFares ResponseRoutesProperties::getFares() const
{
    return m_Fares;
}
void ResponseRoutesProperties::setFares(ResponseFares const& value)
{
    m_Fares = value;
    m_FaresIsSet = true;
}
bool ResponseRoutesProperties::faresIsSet() const
{
    return m_FaresIsSet;
}
void ResponseRoutesProperties::unsetFares()
{
    m_FaresIsSet = false;
}
ResponseRoute ResponseRoutesProperties::getRoute() const
{
    return m_Route;
}
void ResponseRoutesProperties::setRoute(ResponseRoute const& value)
{
    m_Route = value;
    m_RouteIsSet = true;
}
bool ResponseRoutesProperties::routeIsSet() const
{
    return m_RouteIsSet;
}
void ResponseRoutesProperties::unsetRoute()
{
    m_RouteIsSet = false;
}


} // namespace org::openapitools::server::model

