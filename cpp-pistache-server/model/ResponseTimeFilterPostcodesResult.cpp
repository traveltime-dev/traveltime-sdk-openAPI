/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeFilterPostcodesResult.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseTimeFilterPostcodesResult::ResponseTimeFilterPostcodesResult()
{
    m_Search_id = "";
    
}

void ResponseTimeFilterPostcodesResult::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseTimeFilterPostcodesResult::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseTimeFilterPostcodesResult::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseTimeFilterPostcodesResult" : pathPrefix;

        
     
    
    /* Postcodes */ {
        const std::vector<ResponseTimeFilterPostcode>& value = m_Postcodes;
        const std::string currentValuePath = _pathPrefix + ".postcodes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseTimeFilterPostcode& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".postcodes") && success;
 
                i++;
            }
        }

    }
    

    return success;
}

bool ResponseTimeFilterPostcodesResult::operator==(const ResponseTimeFilterPostcodesResult& rhs) const
{
    return
    
    
    (getSearchId() == rhs.getSearchId())
     &&
    
    (getPostcodes() == rhs.getPostcodes())
    
    
    ;
}

bool ResponseTimeFilterPostcodesResult::operator!=(const ResponseTimeFilterPostcodesResult& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseTimeFilterPostcodesResult& o)
{
    j = nlohmann::json();
    j["search_id"] = o.m_Search_id;
    j["postcodes"] = o.m_Postcodes;
    
}

void from_json(const nlohmann::json& j, ResponseTimeFilterPostcodesResult& o)
{
    j.at("search_id").get_to(o.m_Search_id);
    j.at("postcodes").get_to(o.m_Postcodes);
    
}

std::string ResponseTimeFilterPostcodesResult::getSearchId() const
{
    return m_Search_id;
}
void ResponseTimeFilterPostcodesResult::setSearchId(std::string const& value)
{
    m_Search_id = value;
}
std::vector<ResponseTimeFilterPostcode> ResponseTimeFilterPostcodesResult::getPostcodes() const
{
    return m_Postcodes;
}
void ResponseTimeFilterPostcodesResult::setPostcodes(std::vector<ResponseTimeFilterPostcode> const& value)
{
    m_Postcodes = value;
}


} // namespace org::openapitools::server::model

