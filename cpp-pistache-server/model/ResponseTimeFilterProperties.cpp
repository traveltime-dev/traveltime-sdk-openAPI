/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeFilterProperties.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseTimeFilterProperties::ResponseTimeFilterProperties()
{
    m_Travel_time = 0;
    m_Travel_timeIsSet = false;
    m_Distance = 0;
    m_DistanceIsSet = false;
    m_Distance_breakdownIsSet = false;
    m_FaresIsSet = false;
    m_RouteIsSet = false;
    
}

void ResponseTimeFilterProperties::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseTimeFilterProperties::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseTimeFilterProperties::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseTimeFilterProperties" : pathPrefix;

        
    
     
    if (distanceBreakdownIsSet())
    {
        const std::vector<ResponseDistanceBreakdownItem>& value = m_Distance_breakdown;
        const std::string currentValuePath = _pathPrefix + ".distanceBreakdown";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseDistanceBreakdownItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".distanceBreakdown") && success;
 
                i++;
            }
        }

    }
    
    
    

    return success;
}

bool ResponseTimeFilterProperties::operator==(const ResponseTimeFilterProperties& rhs) const
{
    return
    
    
    
    ((!travelTimeIsSet() && !rhs.travelTimeIsSet()) || (travelTimeIsSet() && rhs.travelTimeIsSet() && getTravelTime() == rhs.getTravelTime())) &&
    
    
    ((!distanceIsSet() && !rhs.distanceIsSet()) || (distanceIsSet() && rhs.distanceIsSet() && getDistance() == rhs.getDistance())) &&
    
    
    ((!distanceBreakdownIsSet() && !rhs.distanceBreakdownIsSet()) || (distanceBreakdownIsSet() && rhs.distanceBreakdownIsSet() && getDistanceBreakdown() == rhs.getDistanceBreakdown())) &&
    
    
    ((!faresIsSet() && !rhs.faresIsSet()) || (faresIsSet() && rhs.faresIsSet() && getFares() == rhs.getFares())) &&
    
    
    ((!routeIsSet() && !rhs.routeIsSet()) || (routeIsSet() && rhs.routeIsSet() && getRoute() == rhs.getRoute()))
    
    ;
}

bool ResponseTimeFilterProperties::operator!=(const ResponseTimeFilterProperties& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseTimeFilterProperties& o)
{
    j = nlohmann::json();
    if(o.travelTimeIsSet())
        j["travel_time"] = o.m_Travel_time;
    if(o.distanceIsSet())
        j["distance"] = o.m_Distance;
    if(o.distanceBreakdownIsSet() || !o.m_Distance_breakdown.empty())
        j["distance_breakdown"] = o.m_Distance_breakdown;
    if(o.faresIsSet())
        j["fares"] = o.m_Fares;
    if(o.routeIsSet())
        j["route"] = o.m_Route;
    
}

void from_json(const nlohmann::json& j, ResponseTimeFilterProperties& o)
{
    if(j.find("travel_time") != j.end())
    {
        j.at("travel_time").get_to(o.m_Travel_time);
        o.m_Travel_timeIsSet = true;
    } 
    if(j.find("distance") != j.end())
    {
        j.at("distance").get_to(o.m_Distance);
        o.m_DistanceIsSet = true;
    } 
    if(j.find("distance_breakdown") != j.end())
    {
        j.at("distance_breakdown").get_to(o.m_Distance_breakdown);
        o.m_Distance_breakdownIsSet = true;
    } 
    if(j.find("fares") != j.end())
    {
        j.at("fares").get_to(o.m_Fares);
        o.m_FaresIsSet = true;
    } 
    if(j.find("route") != j.end())
    {
        j.at("route").get_to(o.m_Route);
        o.m_RouteIsSet = true;
    } 
    
}

int32_t ResponseTimeFilterProperties::getTravelTime() const
{
    return m_Travel_time;
}
void ResponseTimeFilterProperties::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
    m_Travel_timeIsSet = true;
}
bool ResponseTimeFilterProperties::travelTimeIsSet() const
{
    return m_Travel_timeIsSet;
}
void ResponseTimeFilterProperties::unsetTravel_time()
{
    m_Travel_timeIsSet = false;
}
int32_t ResponseTimeFilterProperties::getDistance() const
{
    return m_Distance;
}
void ResponseTimeFilterProperties::setDistance(int32_t const value)
{
    m_Distance = value;
    m_DistanceIsSet = true;
}
bool ResponseTimeFilterProperties::distanceIsSet() const
{
    return m_DistanceIsSet;
}
void ResponseTimeFilterProperties::unsetDistance()
{
    m_DistanceIsSet = false;
}
std::vector<ResponseDistanceBreakdownItem> ResponseTimeFilterProperties::getDistanceBreakdown() const
{
    return m_Distance_breakdown;
}
void ResponseTimeFilterProperties::setDistanceBreakdown(std::vector<ResponseDistanceBreakdownItem> const& value)
{
    m_Distance_breakdown = value;
    m_Distance_breakdownIsSet = true;
}
bool ResponseTimeFilterProperties::distanceBreakdownIsSet() const
{
    return m_Distance_breakdownIsSet;
}
void ResponseTimeFilterProperties::unsetDistance_breakdown()
{
    m_Distance_breakdownIsSet = false;
}
ResponseFares ResponseTimeFilterProperties::getFares() const
{
    return m_Fares;
}
void ResponseTimeFilterProperties::setFares(ResponseFares const& value)
{
    m_Fares = value;
    m_FaresIsSet = true;
}
bool ResponseTimeFilterProperties::faresIsSet() const
{
    return m_FaresIsSet;
}
void ResponseTimeFilterProperties::unsetFares()
{
    m_FaresIsSet = false;
}
ResponseRoute ResponseTimeFilterProperties::getRoute() const
{
    return m_Route;
}
void ResponseTimeFilterProperties::setRoute(ResponseRoute const& value)
{
    m_Route = value;
    m_RouteIsSet = true;
}
bool ResponseTimeFilterProperties::routeIsSet() const
{
    return m_RouteIsSet;
}
void ResponseTimeFilterProperties::unsetRoute()
{
    m_RouteIsSet = false;
}


} // namespace org::openapitools::server::model

