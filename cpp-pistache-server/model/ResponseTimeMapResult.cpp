/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.2
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeMapResult.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ResponseTimeMapResult::ResponseTimeMapResult()
{
    m_Search_id = "";
    
}

void ResponseTimeMapResult::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseTimeMapResult::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseTimeMapResult::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseTimeMapResult" : pathPrefix;

        
     
    
    /* Shapes */ {
        const std::vector<ResponseShape>& value = m_Shapes;
        const std::string currentValuePath = _pathPrefix + ".shapes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ResponseShape& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".shapes") && success;
 
                i++;
            }
        }

    }
    
    

    return success;
}

bool ResponseTimeMapResult::operator==(const ResponseTimeMapResult& rhs) const
{
    return
    
    
    (getSearchId() == rhs.getSearchId())
     &&
    
    (getShapes() == rhs.getShapes())
     &&
    
    (getProperties() == rhs.getProperties())
    
    
    ;
}

bool ResponseTimeMapResult::operator!=(const ResponseTimeMapResult& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseTimeMapResult& o)
{
    j = nlohmann::json();
    j["search_id"] = o.m_Search_id;
    j["shapes"] = o.m_Shapes;
    j["properties"] = o.m_Properties;
    
}

void from_json(const nlohmann::json& j, ResponseTimeMapResult& o)
{
    j.at("search_id").get_to(o.m_Search_id);
    j.at("shapes").get_to(o.m_Shapes);
    j.at("properties").get_to(o.m_Properties);
    
}

std::string ResponseTimeMapResult::getSearchId() const
{
    return m_Search_id;
}
void ResponseTimeMapResult::setSearchId(std::string const& value)
{
    m_Search_id = value;
}
std::vector<ResponseShape> ResponseTimeMapResult::getShapes() const
{
    return m_Shapes;
}
void ResponseTimeMapResult::setShapes(std::vector<ResponseShape> const& value)
{
    m_Shapes = value;
}
ResponseTimeMapProperties ResponseTimeMapResult::getProperties() const
{
    return m_Properties;
}
void ResponseTimeMapResult::setProperties(ResponseTimeMapProperties const& value)
{
    m_Properties = value;
}


} // namespace org::openapitools::server::model

