/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTransportationMode.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

ResponseTransportationMode::ResponseTransportationMode()
{
    
}

void ResponseTransportationMode::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ResponseTransportationMode::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ResponseTransportationMode::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ResponseTransportationMode" : pathPrefix;

    
    if (m_value == ResponseTransportationMode::eResponseTransportationMode::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool ResponseTransportationMode::operator==(const ResponseTransportationMode& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool ResponseTransportationMode::operator!=(const ResponseTransportationMode& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ResponseTransportationMode& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case ResponseTransportationMode::eResponseTransportationMode::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::CAR:
            j = "car";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::PARKING:
            j = "parking";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::BOARDING:
            j = "boarding";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::WALK:
            j = "walk";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::BIKE:
            j = "bike";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::TRAIN:
            j = "train";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::RAIL_NATIONAL:
            j = "rail_national";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::RAIL_OVERGROUND:
            j = "rail_overground";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::RAIL_UNDERGROUND:
            j = "rail_underground";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::RAIL_DLR:
            j = "rail_dlr";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::BUS:
            j = "bus";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::CABLE_CAR:
            j = "cable_car";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::PLANE:
            j = "plane";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::FERRY:
            j = "ferry";
            break;
        case ResponseTransportationMode::eResponseTransportationMode::COACH:
            j = "coach";
            break;
    }
}

void from_json(const nlohmann::json& j, ResponseTransportationMode& o)
{
    
    auto s = j.get<std::string>();
    if (s == "car") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::CAR);
    } 
    else if (s == "parking") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::PARKING);
    } 
    else if (s == "boarding") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::BOARDING);
    } 
    else if (s == "walk") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::WALK);
    } 
    else if (s == "bike") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::BIKE);
    } 
    else if (s == "train") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::TRAIN);
    } 
    else if (s == "rail_national") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::RAIL_NATIONAL);
    } 
    else if (s == "rail_overground") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::RAIL_OVERGROUND);
    } 
    else if (s == "rail_underground") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::RAIL_UNDERGROUND);
    } 
    else if (s == "rail_dlr") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::RAIL_DLR);
    } 
    else if (s == "bus") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::BUS);
    } 
    else if (s == "cable_car") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::CABLE_CAR);
    } 
    else if (s == "plane") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::PLANE);
    } 
    else if (s == "ferry") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::FERRY);
    } 
    else if (s == "coach") {
     o.setValue(ResponseTransportationMode::eResponseTransportationMode::COACH);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " ResponseTransportationMode::eResponseTransportationMode";
     throw std::invalid_argument(ss.str());
    } 

}

ResponseTransportationMode::eResponseTransportationMode ResponseTransportationMode::getValue() const
{
    return m_value;
}
void ResponseTransportationMode::setValue(ResponseTransportationMode::eResponseTransportationMode value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

