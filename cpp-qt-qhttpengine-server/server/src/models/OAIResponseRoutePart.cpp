/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseRoutePart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseRoutePart::OAIResponseRoutePart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseRoutePart::OAIResponseRoutePart() {
    this->initializeModel();
}

OAIResponseRoutePart::~OAIResponseRoutePart() {}

void OAIResponseRoutePart::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_directions_isSet = false;
    m_directions_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_travel_time_isSet = false;
    m_travel_time_isValid = false;

    m_coords_isSet = false;
    m_coords_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_road_isSet = false;
    m_road_isValid = false;

    m_turn_isSet = false;
    m_turn_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_departure_station_isSet = false;
    m_departure_station_isValid = false;

    m_arrival_station_isSet = false;
    m_arrival_station_isValid = false;

    m_departs_at_isSet = false;
    m_departs_at_isValid = false;

    m_arrives_at_isSet = false;
    m_arrives_at_isValid = false;

    m_num_stops_isSet = false;
    m_num_stops_isValid = false;
}

void OAIResponseRoutePart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseRoutePart::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_directions_isValid = ::OpenAPI::fromJsonValue(directions, json[QString("directions")]);
    m_directions_isSet = !json[QString("directions")].isNull() && m_directions_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_travel_time_isValid = ::OpenAPI::fromJsonValue(travel_time, json[QString("travel_time")]);
    m_travel_time_isSet = !json[QString("travel_time")].isNull() && m_travel_time_isValid;

    m_coords_isValid = ::OpenAPI::fromJsonValue(coords, json[QString("coords")]);
    m_coords_isSet = !json[QString("coords")].isNull() && m_coords_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_road_isValid = ::OpenAPI::fromJsonValue(road, json[QString("road")]);
    m_road_isSet = !json[QString("road")].isNull() && m_road_isValid;

    m_turn_isValid = ::OpenAPI::fromJsonValue(turn, json[QString("turn")]);
    m_turn_isSet = !json[QString("turn")].isNull() && m_turn_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_departure_station_isValid = ::OpenAPI::fromJsonValue(departure_station, json[QString("departure_station")]);
    m_departure_station_isSet = !json[QString("departure_station")].isNull() && m_departure_station_isValid;

    m_arrival_station_isValid = ::OpenAPI::fromJsonValue(arrival_station, json[QString("arrival_station")]);
    m_arrival_station_isSet = !json[QString("arrival_station")].isNull() && m_arrival_station_isValid;

    m_departs_at_isValid = ::OpenAPI::fromJsonValue(departs_at, json[QString("departs_at")]);
    m_departs_at_isSet = !json[QString("departs_at")].isNull() && m_departs_at_isValid;

    m_arrives_at_isValid = ::OpenAPI::fromJsonValue(arrives_at, json[QString("arrives_at")]);
    m_arrives_at_isSet = !json[QString("arrives_at")].isNull() && m_arrives_at_isValid;

    m_num_stops_isValid = ::OpenAPI::fromJsonValue(num_stops, json[QString("num_stops")]);
    m_num_stops_isSet = !json[QString("num_stops")].isNull() && m_num_stops_isValid;
}

QString OAIResponseRoutePart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseRoutePart::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(mode));
    }
    if (m_directions_isSet) {
        obj.insert(QString("directions"), ::OpenAPI::toJsonValue(directions));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(distance));
    }
    if (m_travel_time_isSet) {
        obj.insert(QString("travel_time"), ::OpenAPI::toJsonValue(travel_time));
    }
    if (coords.size() > 0) {
        obj.insert(QString("coords"), ::OpenAPI::toJsonValue(coords));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(direction));
    }
    if (m_road_isSet) {
        obj.insert(QString("road"), ::OpenAPI::toJsonValue(road));
    }
    if (m_turn_isSet) {
        obj.insert(QString("turn"), ::OpenAPI::toJsonValue(turn));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(line));
    }
    if (m_departure_station_isSet) {
        obj.insert(QString("departure_station"), ::OpenAPI::toJsonValue(departure_station));
    }
    if (m_arrival_station_isSet) {
        obj.insert(QString("arrival_station"), ::OpenAPI::toJsonValue(arrival_station));
    }
    if (m_departs_at_isSet) {
        obj.insert(QString("departs_at"), ::OpenAPI::toJsonValue(departs_at));
    }
    if (m_arrives_at_isSet) {
        obj.insert(QString("arrives_at"), ::OpenAPI::toJsonValue(arrives_at));
    }
    if (m_num_stops_isSet) {
        obj.insert(QString("num_stops"), ::OpenAPI::toJsonValue(num_stops));
    }
    return obj;
}

QString OAIResponseRoutePart::getId() const {
    return id;
}
void OAIResponseRoutePart::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIResponseRoutePart::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResponseRoutePart::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResponseRoutePart::getType() const {
    return type;
}
void OAIResponseRoutePart::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIResponseRoutePart::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResponseRoutePart::is_type_Valid() const{
    return m_type_isValid;
}

OAIResponseTransportationMode OAIResponseRoutePart::getMode() const {
    return mode;
}
void OAIResponseRoutePart::setMode(const OAIResponseTransportationMode &mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

bool OAIResponseRoutePart::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIResponseRoutePart::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIResponseRoutePart::getDirections() const {
    return directions;
}
void OAIResponseRoutePart::setDirections(const QString &directions) {
    this->directions = directions;
    this->m_directions_isSet = true;
}

bool OAIResponseRoutePart::is_directions_Set() const{
    return m_directions_isSet;
}

bool OAIResponseRoutePart::is_directions_Valid() const{
    return m_directions_isValid;
}

qint32 OAIResponseRoutePart::getDistance() const {
    return distance;
}
void OAIResponseRoutePart::setDistance(const qint32 &distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

bool OAIResponseRoutePart::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIResponseRoutePart::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIResponseRoutePart::getTravelTime() const {
    return travel_time;
}
void OAIResponseRoutePart::setTravelTime(const qint32 &travel_time) {
    this->travel_time = travel_time;
    this->m_travel_time_isSet = true;
}

bool OAIResponseRoutePart::is_travel_time_Set() const{
    return m_travel_time_isSet;
}

bool OAIResponseRoutePart::is_travel_time_Valid() const{
    return m_travel_time_isValid;
}

QList<OAICoords> OAIResponseRoutePart::getCoords() const {
    return coords;
}
void OAIResponseRoutePart::setCoords(const QList<OAICoords> &coords) {
    this->coords = coords;
    this->m_coords_isSet = true;
}

bool OAIResponseRoutePart::is_coords_Set() const{
    return m_coords_isSet;
}

bool OAIResponseRoutePart::is_coords_Valid() const{
    return m_coords_isValid;
}

QString OAIResponseRoutePart::getDirection() const {
    return direction;
}
void OAIResponseRoutePart::setDirection(const QString &direction) {
    this->direction = direction;
    this->m_direction_isSet = true;
}

bool OAIResponseRoutePart::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIResponseRoutePart::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIResponseRoutePart::getRoad() const {
    return road;
}
void OAIResponseRoutePart::setRoad(const QString &road) {
    this->road = road;
    this->m_road_isSet = true;
}

bool OAIResponseRoutePart::is_road_Set() const{
    return m_road_isSet;
}

bool OAIResponseRoutePart::is_road_Valid() const{
    return m_road_isValid;
}

QString OAIResponseRoutePart::getTurn() const {
    return turn;
}
void OAIResponseRoutePart::setTurn(const QString &turn) {
    this->turn = turn;
    this->m_turn_isSet = true;
}

bool OAIResponseRoutePart::is_turn_Set() const{
    return m_turn_isSet;
}

bool OAIResponseRoutePart::is_turn_Valid() const{
    return m_turn_isValid;
}

QString OAIResponseRoutePart::getLine() const {
    return line;
}
void OAIResponseRoutePart::setLine(const QString &line) {
    this->line = line;
    this->m_line_isSet = true;
}

bool OAIResponseRoutePart::is_line_Set() const{
    return m_line_isSet;
}

bool OAIResponseRoutePart::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIResponseRoutePart::getDepartureStation() const {
    return departure_station;
}
void OAIResponseRoutePart::setDepartureStation(const QString &departure_station) {
    this->departure_station = departure_station;
    this->m_departure_station_isSet = true;
}

bool OAIResponseRoutePart::is_departure_station_Set() const{
    return m_departure_station_isSet;
}

bool OAIResponseRoutePart::is_departure_station_Valid() const{
    return m_departure_station_isValid;
}

QString OAIResponseRoutePart::getArrivalStation() const {
    return arrival_station;
}
void OAIResponseRoutePart::setArrivalStation(const QString &arrival_station) {
    this->arrival_station = arrival_station;
    this->m_arrival_station_isSet = true;
}

bool OAIResponseRoutePart::is_arrival_station_Set() const{
    return m_arrival_station_isSet;
}

bool OAIResponseRoutePart::is_arrival_station_Valid() const{
    return m_arrival_station_isValid;
}

QString OAIResponseRoutePart::getDepartsAt() const {
    return departs_at;
}
void OAIResponseRoutePart::setDepartsAt(const QString &departs_at) {
    this->departs_at = departs_at;
    this->m_departs_at_isSet = true;
}

bool OAIResponseRoutePart::is_departs_at_Set() const{
    return m_departs_at_isSet;
}

bool OAIResponseRoutePart::is_departs_at_Valid() const{
    return m_departs_at_isValid;
}

QString OAIResponseRoutePart::getArrivesAt() const {
    return arrives_at;
}
void OAIResponseRoutePart::setArrivesAt(const QString &arrives_at) {
    this->arrives_at = arrives_at;
    this->m_arrives_at_isSet = true;
}

bool OAIResponseRoutePart::is_arrives_at_Set() const{
    return m_arrives_at_isSet;
}

bool OAIResponseRoutePart::is_arrives_at_Valid() const{
    return m_arrives_at_isValid;
}

qint32 OAIResponseRoutePart::getNumStops() const {
    return num_stops;
}
void OAIResponseRoutePart::setNumStops(const qint32 &num_stops) {
    this->num_stops = num_stops;
    this->m_num_stops_isSet = true;
}

bool OAIResponseRoutePart::is_num_stops_Set() const{
    return m_num_stops_isSet;
}

bool OAIResponseRoutePart::is_num_stops_Valid() const{
    return m_num_stops_isValid;
}

bool OAIResponseRoutePart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (coords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departs_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrives_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_stops_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseRoutePart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_mode_isValid && m_directions_isValid && m_distance_isValid && m_travel_time_isValid && m_coords_isValid && true;
}

} // namespace OpenAPI
