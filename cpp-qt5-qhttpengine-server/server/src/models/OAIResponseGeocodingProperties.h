/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResponseGeocodingProperties.h
 *
 * 
 */

#ifndef OAIResponseGeocodingProperties_H
#define OAIResponseGeocodingProperties_H

#include <QJsonObject>

#include "OAIResponseMapInfoFeatures.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResponseGeocodingProperties : public OAIObject {
public:
    OAIResponseGeocodingProperties();
    OAIResponseGeocodingProperties(QString json);
    ~OAIResponseGeocodingProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getHouseNumber() const;
    void setHouseNumber(const QString &house_number);
    bool is_house_number_Set() const;
    bool is_house_number_Valid() const;

    QString getStreet() const;
    void setStreet(const QString &street);
    bool is_street_Set() const;
    bool is_street_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    QString getNeighbourhood() const;
    void setNeighbourhood(const QString &neighbourhood);
    bool is_neighbourhood_Set() const;
    bool is_neighbourhood_Valid() const;

    QString getCounty() const;
    void setCounty(const QString &county);
    bool is_county_Set() const;
    bool is_county_Valid() const;

    QString getMacroregion() const;
    void setMacroregion(const QString &macroregion);
    bool is_macroregion_Set() const;
    bool is_macroregion_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getContinent() const;
    void setContinent(const QString &continent);
    bool is_continent_Set() const;
    bool is_continent_Valid() const;

    QString getPostcode() const;
    void setPostcode(const QString &postcode);
    bool is_postcode_Set() const;
    bool is_postcode_Valid() const;

    OAIResponseMapInfoFeatures getFeatures() const;
    void setFeatures(const OAIResponseMapInfoFeatures &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString label;
    bool m_label_isSet;
    bool m_label_isValid;

    double score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString house_number;
    bool m_house_number_isSet;
    bool m_house_number_isValid;

    QString street;
    bool m_street_isSet;
    bool m_street_isValid;

    QString region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;

    QString neighbourhood;
    bool m_neighbourhood_isSet;
    bool m_neighbourhood_isValid;

    QString county;
    bool m_county_isSet;
    bool m_county_isValid;

    QString macroregion;
    bool m_macroregion_isSet;
    bool m_macroregion_isValid;

    QString city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString continent;
    bool m_continent_isSet;
    bool m_continent_isValid;

    QString postcode;
    bool m_postcode_isSet;
    bool m_postcode_isValid;

    OAIResponseMapInfoFeatures features;
    bool m_features_isSet;
    bool m_features_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResponseGeocodingProperties)

#endif // OAIResponseGeocodingProperties_H
