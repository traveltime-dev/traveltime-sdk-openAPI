/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "RequestRoutes.h"
#include "RequestSupportedLocations.h"
#include "RequestTimeFilter.h"
#include "RequestTimeFilterFast.h"
#include "RequestTimeFilterPostcodeDistricts.h"
#include "RequestTimeFilterPostcodeSectors.h"
#include "RequestTimeFilterPostcodes.h"
#include "RequestTimeMap.h"
#include "ResponseError.h"
#include "ResponseGeocoding.h"
#include "ResponseMapInfo.h"
#include "ResponseRoutes.h"
#include "ResponseSupportedLocations.h"
#include "ResponseTimeFilter.h"
#include "ResponseTimeFilterFast.h"
#include "ResponseTimeFilterPostcodeDistricts.h"
#include "ResponseTimeFilterPostcodeSectors.h"
#include "ResponseTimeFilterPostcodes.h"
#include "ResponseTimeMap.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4GeocodingReverseResource: public restbed::Resource
{
public:
	DefaultApiV4GeocodingReverseResource();
    virtual ~DefaultApiV4GeocodingReverseResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			double const &, double const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		double const &, double const &, std::string const &
	)> handler_GET_;


	double lat{};
	double lng{};
	std::string withinPeriodcountry{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4GeocodingSearchResource: public restbed::Resource
{
public:
	DefaultApiV4GeocodingSearchResource();
    virtual ~DefaultApiV4GeocodingSearchResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, double const &, double const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, double const &, double const &, std::string const &
	)> handler_GET_;


	std::string query{};
	double focusPeriodlat{};
	double focusPeriodlng{};
	std::string withinPeriodcountry{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Map-infoResource: public restbed::Resource
{
public:
	DefaultApiV4Map-infoResource();
    virtual ~DefaultApiV4Map-infoResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4RoutesResource: public restbed::Resource
{
public:
	DefaultApiV4RoutesResource();
    virtual ~DefaultApiV4RoutesResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestRoutes> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestRoutes> const &
	)> handler_POST_;


	std::shared_ptr<RequestRoutes> requestRoutes{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Supported-locationsResource: public restbed::Resource
{
public:
	DefaultApiV4Supported-locationsResource();
    virtual ~DefaultApiV4Supported-locationsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestSupportedLocations> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestSupportedLocations> const &
	)> handler_POST_;


	std::shared_ptr<RequestSupportedLocations> requestSupportedLocations{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-filterResource: public restbed::Resource
{
public:
	DefaultApiV4Time-filterResource();
    virtual ~DefaultApiV4Time-filterResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeFilter> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeFilter> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeFilter> requestTimeFilter{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-filterFastResource: public restbed::Resource
{
public:
	DefaultApiV4Time-filterFastResource();
    virtual ~DefaultApiV4Time-filterFastResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeFilterFast> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeFilterFast> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeFilterFast> requestTimeFilterFast{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-filterPostcode-districtsResource: public restbed::Resource
{
public:
	DefaultApiV4Time-filterPostcode-districtsResource();
    virtual ~DefaultApiV4Time-filterPostcode-districtsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeFilterPostcodeDistricts> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeFilterPostcodeDistricts> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeFilterPostcodeDistricts> requestTimeFilterPostcodeDistricts{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-filterPostcode-sectorsResource: public restbed::Resource
{
public:
	DefaultApiV4Time-filterPostcode-sectorsResource();
    virtual ~DefaultApiV4Time-filterPostcode-sectorsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeFilterPostcodeSectors> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeFilterPostcodeSectors> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeFilterPostcodeSectors> requestTimeFilterPostcodeSectors{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-filterPostcodesResource: public restbed::Resource
{
public:
	DefaultApiV4Time-filterPostcodesResource();
    virtual ~DefaultApiV4Time-filterPostcodesResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeFilterPostcodes> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeFilterPostcodes> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeFilterPostcodes> requestTimeFilterPostcodes{};
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  DefaultApiV4Time-mapResource: public restbed::Resource
{
public:
	DefaultApiV4Time-mapResource();
    virtual ~DefaultApiV4Time-mapResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::shared_ptr<RequestTimeMap> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::shared_ptr<RequestTimeMap> const &
	)> handler_POST_;


	std::shared_ptr<RequestTimeMap> requestTimeMap{};
};


//
// The restbed service to actually implement the REST server
//
class  DefaultApi: public restbed::Service
{
public:
	DefaultApi();
	~DefaultApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<DefaultApiV4GeocodingReverseResource> m_spDefaultApiV4GeocodingReverseResource;
	std::shared_ptr<DefaultApiV4GeocodingSearchResource> m_spDefaultApiV4GeocodingSearchResource;
	std::shared_ptr<DefaultApiV4Map-infoResource> m_spDefaultApiV4Map-infoResource;
	std::shared_ptr<DefaultApiV4RoutesResource> m_spDefaultApiV4RoutesResource;
	std::shared_ptr<DefaultApiV4Supported-locationsResource> m_spDefaultApiV4Supported-locationsResource;
	std::shared_ptr<DefaultApiV4Time-filterResource> m_spDefaultApiV4Time-filterResource;
	std::shared_ptr<DefaultApiV4Time-filterFastResource> m_spDefaultApiV4Time-filterFastResource;
	std::shared_ptr<DefaultApiV4Time-filterPostcode-districtsResource> m_spDefaultApiV4Time-filterPostcode-districtsResource;
	std::shared_ptr<DefaultApiV4Time-filterPostcode-sectorsResource> m_spDefaultApiV4Time-filterPostcode-sectorsResource;
	std::shared_ptr<DefaultApiV4Time-filterPostcodesResource> m_spDefaultApiV4Time-filterPostcodesResource;
	std::shared_ptr<DefaultApiV4Time-mapResource> m_spDefaultApiV4Time-mapResource;
};


}
}
}
}

#endif /* DefaultApi_H_ */

