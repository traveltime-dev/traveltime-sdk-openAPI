/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestLevelOfDetail.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestLevelOfDetail::RequestLevelOfDetail()
{
	m_Scale_type = "";
	m_Scale_typeEnum = { simple };
	m_Level = "";
	m_LevelEnum = { lowest, low, medium, high, highest };
}

RequestLevelOfDetail::~RequestLevelOfDetail()
{
}

std::string RequestLevelOfDetail::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void RequestLevelOfDetail::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RequestLevelOfDetail::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("scale_type", m_Scale_type);
	pt.put("level", m_Level);
	return pt;
}

void RequestLevelOfDetail::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setScaleType(pt.get("scale_type", ""));
	setLevel(pt.get("level", ""));
}

std::string RequestLevelOfDetail::getScaleType() const
{
    return m_Scale_type;
}
void RequestLevelOfDetail::setScaleType(std::string value)
{
	if (std::find(m_Scale_typeEnum.begin(), m_Scale_typeEnum.end(), value) != m_Scale_typeEnum.end()) {
		m_Scale_type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string RequestLevelOfDetail::getLevel() const
{
    return m_Level;
}
void RequestLevelOfDetail::setLevel(std::string value)
{
	if (std::find(m_LevelEnum.begin(), m_LevelEnum.end(), value) != m_LevelEnum.end()) {
		m_Level = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}

}
}
}
}

