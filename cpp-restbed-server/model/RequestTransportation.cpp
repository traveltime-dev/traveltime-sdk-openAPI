/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTransportation.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTransportation::RequestTransportation()
{
	m_Type = "";
	m_TypeEnum = { cycling, driving, driving+train, public_transport, walking, coach, bus, train, ferry, driving+ferry, cycling+ferry };
	m_Disable_border_crossing = false;
	m_Pt_change_delay = 0;
	m_Walking_time = 0;
	m_Driving_time_to_station = 0;
	m_Cycling_time_to_station = 0;
	m_Parking_time = 0;
	m_Boarding_time = 0;
}

RequestTransportation::~RequestTransportation()
{
}

std::string RequestTransportation::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void RequestTransportation::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RequestTransportation::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("type", m_Type);
	pt.put("disable_border_crossing", m_Disable_border_crossing);
	pt.put("pt_change_delay", m_Pt_change_delay);
	pt.put("walking_time", m_Walking_time);
	pt.put("driving_time_to_station", m_Driving_time_to_station);
	pt.put("cycling_time_to_station", m_Cycling_time_to_station);
	pt.put("parking_time", m_Parking_time);
	pt.put("boarding_time", m_Boarding_time);
	return pt;
}

void RequestTransportation::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setType(pt.get("type", ""));
	m_Disable_border_crossing = pt.get("disable_border_crossing", false);
	m_Pt_change_delay = pt.get("pt_change_delay", 0);
	m_Walking_time = pt.get("walking_time", 0);
	m_Driving_time_to_station = pt.get("driving_time_to_station", 0);
	m_Cycling_time_to_station = pt.get("cycling_time_to_station", 0);
	m_Parking_time = pt.get("parking_time", 0);
	m_Boarding_time = pt.get("boarding_time", 0);
}

std::string RequestTransportation::getType() const
{
    return m_Type;
}
void RequestTransportation::setType(std::string value)
{
	if (std::find(m_TypeEnum.begin(), m_TypeEnum.end(), value) != m_TypeEnum.end()) {
		m_Type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
bool RequestTransportation::isDisableBorderCrossing() const
{
    return m_Disable_border_crossing;
}
void RequestTransportation::setDisableBorderCrossing(bool value)
{
	m_Disable_border_crossing = value;
}
int32_t RequestTransportation::getPtChangeDelay() const
{
    return m_Pt_change_delay;
}
void RequestTransportation::setPtChangeDelay(int32_t value)
{
	m_Pt_change_delay = value;
}
int32_t RequestTransportation::getWalkingTime() const
{
    return m_Walking_time;
}
void RequestTransportation::setWalkingTime(int32_t value)
{
	m_Walking_time = value;
}
int32_t RequestTransportation::getDrivingTimeToStation() const
{
    return m_Driving_time_to_station;
}
void RequestTransportation::setDrivingTimeToStation(int32_t value)
{
	m_Driving_time_to_station = value;
}
int32_t RequestTransportation::getCyclingTimeToStation() const
{
    return m_Cycling_time_to_station;
}
void RequestTransportation::setCyclingTimeToStation(int32_t value)
{
	m_Cycling_time_to_station = value;
}
int32_t RequestTransportation::getParkingTime() const
{
    return m_Parking_time;
}
void RequestTransportation::setParkingTime(int32_t value)
{
	m_Parking_time = value;
}
int32_t RequestTransportation::getBoardingTime() const
{
    return m_Boarding_time;
}
void RequestTransportation::setBoardingTime(int32_t value)
{
	m_Boarding_time = value;
}

}
}
}
}

