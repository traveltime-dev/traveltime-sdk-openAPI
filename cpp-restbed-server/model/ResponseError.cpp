/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseError.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseError::ResponseError()
{
	m_Http_status = 0;
	m_Error_code = 0;
	m_Description = "";
	m_Documentation_link = "";
}

ResponseError::~ResponseError()
{
}

std::string ResponseError::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ResponseError::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ResponseError::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("http_status", m_Http_status);
	pt.put("error_code", m_Error_code);
	pt.put("description", m_Description);
	pt.put("documentation_link", m_Documentation_link);
	// generate tree for Additional_info
	if (!m_Additional_info.empty()) {
		for (const auto &childEntry : m_Additional_info) {
			ptree Additional_info_node;
			Additional_info_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Additional_info_node));
		}
		pt.add_child("additional_info", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ResponseError::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Http_status = pt.get("http_status", 0);
	m_Error_code = pt.get("error_code", 0);
	m_Description = pt.get("description", "");
	m_Documentation_link = pt.get("documentation_link", "");
	// push all items of Additional_info into member vector
	if (pt.get_child_optional("additional_info")) {
		for (const auto &childTree : pt.get_child("additional_info")) {
			m_Inner.emplace_back(childTree.second.data());
		}
	}
}

int32_t ResponseError::getHttpStatus() const
{
    return m_Http_status;
}
void ResponseError::setHttpStatus(int32_t value)
{
	m_Http_status = value;
}
int32_t ResponseError::getErrorCode() const
{
    return m_Error_code;
}
void ResponseError::setErrorCode(int32_t value)
{
	m_Error_code = value;
}
std::string ResponseError::getDescription() const
{
    return m_Description;
}
void ResponseError::setDescription(std::string value)
{
	m_Description = value;
}
std::string ResponseError::getDocumentationLink() const
{
    return m_Documentation_link;
}
void ResponseError::setDocumentationLink(std::string value)
{
	m_Documentation_link = value;
}
std::map<std::string, std::vector<std::string>> ResponseError::getAdditionalInfo() const
{
    return m_Additional_info;
}
void ResponseError::setAdditionalInfo(std::map<std::string, std::vector<std::string>> value)
{
	m_Additional_info = value;
}

}
}
}
}

