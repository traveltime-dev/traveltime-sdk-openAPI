/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseFareTicket.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseFareTicket::ResponseFareTicket()
{
	m_Type = "";
	m_TypeEnum = { single, week, month, year };
	m_Price = 0.0;
	m_Currency = "";
}

ResponseFareTicket::~ResponseFareTicket()
{
}

std::string ResponseFareTicket::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ResponseFareTicket::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ResponseFareTicket::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("type", m_Type);
	pt.put("price", m_Price);
	pt.put("currency", m_Currency);
	return pt;
}

void ResponseFareTicket::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setType(pt.get("type", ""));
	m_Price = pt.get("price", 0.0);
	m_Currency = pt.get("currency", "");
}

std::string ResponseFareTicket::getType() const
{
    return m_Type;
}
void ResponseFareTicket::setType(std::string value)
{
	if (std::find(m_TypeEnum.begin(), m_TypeEnum.end(), value) != m_TypeEnum.end()) {
		m_Type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
double ResponseFareTicket::getPrice() const
{
    return m_Price;
}
void ResponseFareTicket::setPrice(double value)
{
	m_Price = value;
}
std::string ResponseFareTicket::getCurrency() const
{
    return m_Currency;
}
void ResponseFareTicket::setCurrency(std::string value)
{
	m_Currency = value;
}

}
}
}
}

