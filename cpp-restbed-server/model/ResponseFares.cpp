/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseFares.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseFares::ResponseFares()
{
}

ResponseFares::~ResponseFares()
{
}

std::string ResponseFares::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ResponseFares::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ResponseFares::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Breakdown
	if (!m_Breakdown.empty()) {
		for (const auto &childEntry : m_Breakdown) {
			ptree Breakdown_node;
			Breakdown_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Breakdown_node));
		}
		pt.add_child("breakdown", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Tickets_total
	if (!m_Tickets_total.empty()) {
		for (const auto &childEntry : m_Tickets_total) {
			ptree Tickets_total_node;
			Tickets_total_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Tickets_total_node));
		}
		pt.add_child("tickets_total", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ResponseFares::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Breakdown into member vector
	if (pt.get_child_optional("breakdown")) {
		for (const auto &childTree : pt.get_child("breakdown")) {
			m_Breakdown.emplace_back(childTree.second.data());
		}
	}
	// push all items of Tickets_total into member vector
	if (pt.get_child_optional("tickets_total")) {
		for (const auto &childTree : pt.get_child("tickets_total")) {
			m_Tickets_total.emplace_back(childTree.second.data());
		}
	}
}

std::vector<std::shared_ptr<ResponseFaresBreakdownItem>> ResponseFares::getBreakdown() const
{
    return m_Breakdown;
}
void ResponseFares::setBreakdown(std::vector<std::shared_ptr<ResponseFaresBreakdownItem>> value)
{
	m_Breakdown = value;
}
std::vector<std::shared_ptr<ResponseFareTicket>> ResponseFares::getTicketsTotal() const
{
    return m_Tickets_total;
}
void ResponseFares::setTicketsTotal(std::vector<std::shared_ptr<ResponseFareTicket>> value)
{
	m_Tickets_total = value;
}

}
}
}
}

