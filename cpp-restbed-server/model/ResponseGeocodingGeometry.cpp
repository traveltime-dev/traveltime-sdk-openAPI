/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseGeocodingGeometry.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseGeocodingGeometry::ResponseGeocodingGeometry()
{
	m_Type = "";
}

ResponseGeocodingGeometry::~ResponseGeocodingGeometry()
{
}

std::string ResponseGeocodingGeometry::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ResponseGeocodingGeometry::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ResponseGeocodingGeometry::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("type", m_Type);
	// generate tree for Coordinates
	if (!m_Coordinates.empty()) {
		for (const auto &childEntry : m_Coordinates) {
			ptree Coordinates_node;
			Coordinates_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Coordinates_node));
		}
		pt.add_child("coordinates", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void ResponseGeocodingGeometry::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Type = pt.get("type", "");
	// push all items of Coordinates into member vector
	if (pt.get_child_optional("coordinates")) {
		for (const auto &childTree : pt.get_child("coordinates")) {
			m_Coordinates.emplace_back(std::stodstd::stod(childTree.second.data()));
		}
	}
}

std::string ResponseGeocodingGeometry::getType() const
{
    return m_Type;
}
void ResponseGeocodingGeometry::setType(std::string value)
{
	m_Type = value;
}
std::vector<double> ResponseGeocodingGeometry::getCoordinates() const
{
    return m_Coordinates;
}
void ResponseGeocodingGeometry::setCoordinates(std::vector<double> value)
{
	m_Coordinates = value;
}

}
}
}
}

