/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResponseGeocodingProperties.h
 *
 * 
 */

#ifndef ResponseGeocodingProperties_H_
#define ResponseGeocodingProperties_H_



#include <string>
#include "ResponseMapInfoFeatures.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ResponseGeocodingProperties 
{
public:
    ResponseGeocodingProperties();
    virtual ~ResponseGeocodingProperties();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ResponseGeocodingProperties members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLabel() const;
    void setLabel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getScore() const;
    void setScore(double value);

    /// <summary>
    /// 
    /// </summary>
    std::string getHouseNumber() const;
    void setHouseNumber(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getStreet() const;
    void setStreet(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getRegion() const;
    void setRegion(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getRegionCode() const;
    void setRegionCode(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getNeighbourhood() const;
    void setNeighbourhood(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCounty() const;
    void setCounty(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMacroregion() const;
    void setMacroregion(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCity() const;
    void setCity(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCountryCode() const;
    void setCountryCode(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getContinent() const;
    void setContinent(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPostcode() const;
    void setPostcode(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResponseMapInfoFeatures> getFeatures() const;
    void setFeatures(std::shared_ptr<ResponseMapInfoFeatures> value);
protected:
    std::string m_Name;
    std::string m_Label;
    double m_Score;
    std::string m_House_number;
    std::string m_Street;
    std::string m_Region;
    std::string m_Region_code;
    std::string m_Neighbourhood;
    std::string m_County;
    std::string m_Macroregion;
    std::string m_City;
    std::string m_Country;
    std::string m_Country_code;
    std::string m_Continent;
    std::string m_Postcode;
    std::shared_ptr<ResponseMapInfoFeatures> m_Features;
};

}
}
}
}

#endif /* ResponseGeocodingProperties_H_ */
