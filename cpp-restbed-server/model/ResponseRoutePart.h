/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResponseRoutePart.h
 *
 * 
 */

#ifndef ResponseRoutePart_H_
#define ResponseRoutePart_H_



#include "ResponseTransportationMode.h"
#include <string>
#include "Coords.h"
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ResponseRoutePart 
{
public:
    ResponseRoutePart();
    virtual ~ResponseRoutePart();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ResponseRoutePart members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResponseTransportationMode> getMode() const;
    void setMode(std::shared_ptr<ResponseTransportationMode> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDirections() const;
    void setDirections(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDistance() const;
    void setDistance(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTravelTime() const;
    void setTravelTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Coords>> getCoords() const;
    void setCoords(std::vector<std::shared_ptr<Coords>> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDirection() const;
    void setDirection(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getRoad() const;
    void setRoad(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTurn() const;
    void setTurn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLine() const;
    void setLine(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDepartureStation() const;
    void setDepartureStation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getArrivalStation() const;
    void setArrivalStation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDepartsAt() const;
    void setDepartsAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getArrivesAt() const;
    void setArrivesAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumStops() const;
    void setNumStops(int32_t value);
protected:
    std::string m_Id;
    std::string m_Type;
    std::shared_ptr<ResponseTransportationMode> m_Mode;
    std::string m_Directions;
    int32_t m_Distance;
    int32_t m_Travel_time;
    std::vector<std::shared_ptr<Coords>> m_Coords;
    std::string m_Direction;
    std::string m_Road;
    std::string m_Turn;
    std::string m_Line;
    std::string m_Departure_station;
    std::string m_Arrival_station;
    std::string m_Departs_at;
    std::string m_Arrives_at;
    int32_t m_Num_stops;
    std::vector<std::string> m_TypeEnum;
};

}
}
}
}

#endif /* ResponseRoutePart_H_ */
