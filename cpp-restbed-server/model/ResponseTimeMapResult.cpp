/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMapResult.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseTimeMapResult::ResponseTimeMapResult()
{
	m_Search_id = "";
}

ResponseTimeMapResult::~ResponseTimeMapResult()
{
}

std::string ResponseTimeMapResult::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void ResponseTimeMapResult::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ResponseTimeMapResult::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("search_id", m_Search_id);
	// generate tree for Shapes
	if (!m_Shapes.empty()) {
		for (const auto &childEntry : m_Shapes) {
			ptree Shapes_node;
			Shapes_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Shapes_node));
		}
		pt.add_child("shapes", tmp_node);
		tmp_node.clear();
	}
	if (m_Properties != nullptr) {
		pt.add_child("properties", m_Properties->toPropertyTree());
	}
	return pt;
}

void ResponseTimeMapResult::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Search_id = pt.get("search_id", "");
	// push all items of Shapes into member vector
	if (pt.get_child_optional("shapes")) {
		for (const auto &childTree : pt.get_child("shapes")) {
			m_Shapes.emplace_back(childTree.second.data());
		}
	}
	if (pt.get_child_optional("properties")) {
		m_Properties = std::make_shared<ResponseTimeMapProperties>();
		m_Properties->fromPropertyTree(pt.get_child("properties"));
	}
}

std::string ResponseTimeMapResult::getSearchId() const
{
    return m_Search_id;
}
void ResponseTimeMapResult::setSearchId(std::string value)
{
	m_Search_id = value;
}
std::vector<std::shared_ptr<ResponseShape>> ResponseTimeMapResult::getShapes() const
{
    return m_Shapes;
}
void ResponseTimeMapResult::setShapes(std::vector<std::shared_ptr<ResponseShape>> value)
{
	m_Shapes = value;
}
std::shared_ptr<ResponseTimeMapProperties> ResponseTimeMapResult::getProperties() const
{
    return m_Properties;
}
void ResponseTimeMapResult::setProperties(std::shared_ptr<ResponseTimeMapProperties> value)
{
	m_Properties = value;
}

}
}
}
}

