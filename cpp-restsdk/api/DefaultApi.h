/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_


#include "../ApiClient.h"

#include "RequestRoutes.h"
#include "RequestSupportedLocations.h"
#include "RequestTimeFilter.h"
#include "RequestTimeFilterFast.h"
#include "RequestTimeFilterPostcodeDistricts.h"
#include "RequestTimeFilterPostcodeSectors.h"
#include "RequestTimeFilterPostcodes.h"
#include "RequestTimeMap.h"
#include "ResponseError.h"
#include "ResponseGeocoding.h"
#include "ResponseMapInfo.h"
#include "ResponseRoutes.h"
#include "ResponseSupportedLocations.h"
#include "ResponseTimeFilter.h"
#include "ResponseTimeFilterFast.h"
#include "ResponseTimeFilterPostcodeDistricts.h"
#include "ResponseTimeFilterPostcodeSectors.h"
#include "ResponseTimeFilterPostcodes.h"
#include "ResponseTimeMap.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="lat"></param>
    /// <param name="lng"></param>
    /// <param name="withinPeriodcountry"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseGeocoding>> geocodingReverseSearch(
        double lat,
        double lng,
        boost::optional<utility::string_t> withinPeriodcountry
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="query"></param>
    /// <param name="focusPeriodlat"> (optional, default to 0.0)</param>
    /// <param name="focusPeriodlng"> (optional, default to 0.0)</param>
    /// <param name="withinPeriodcountry"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseGeocoding>> geocodingSearch(
        utility::string_t query,
        boost::optional<double> focusPeriodlat,
        boost::optional<double> focusPeriodlng,
        boost::optional<utility::string_t> withinPeriodcountry
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseMapInfo>> mapInfo(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestRoutes"></param>
    pplx::task<std::shared_ptr<ResponseRoutes>> routes(
        std::shared_ptr<RequestRoutes> requestRoutes
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestSupportedLocations"></param>
    pplx::task<std::shared_ptr<ResponseSupportedLocations>> supportedLocations(
        std::shared_ptr<RequestSupportedLocations> requestSupportedLocations
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeFilter"></param>
    pplx::task<std::shared_ptr<ResponseTimeFilter>> timeFilter(
        std::shared_ptr<RequestTimeFilter> requestTimeFilter
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeFilterFast"></param>
    pplx::task<std::shared_ptr<ResponseTimeFilterFast>> timeFilterFast(
        std::shared_ptr<RequestTimeFilterFast> requestTimeFilterFast
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeFilterPostcodeDistricts"></param>
    pplx::task<std::shared_ptr<ResponseTimeFilterPostcodeDistricts>> timeFilterPostcodeDistricts(
        std::shared_ptr<RequestTimeFilterPostcodeDistricts> requestTimeFilterPostcodeDistricts
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeFilterPostcodeSectors"></param>
    pplx::task<std::shared_ptr<ResponseTimeFilterPostcodeSectors>> timeFilterPostcodeSectors(
        std::shared_ptr<RequestTimeFilterPostcodeSectors> requestTimeFilterPostcodeSectors
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeFilterPostcodes"></param>
    pplx::task<std::shared_ptr<ResponseTimeFilterPostcodes>> timeFilterPostcodes(
        std::shared_ptr<RequestTimeFilterPostcodes> requestTimeFilterPostcodes
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="requestTimeMap"></param>
    pplx::task<std::shared_ptr<ResponseTimeMap>> timeMap(
        std::shared_ptr<RequestTimeMap> requestTimeMap
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

