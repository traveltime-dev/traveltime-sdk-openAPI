/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestLocation::RequestLocation()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_CoordsIsSet = false;
}

RequestLocation::~RequestLocation()
{
}

void RequestLocation::validate()
{
    // TODO: implement validation
}

web::json::value RequestLocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CoordsIsSet)
    {
        val[utility::conversions::to_string_t("coords")] = ModelBase::toJson(m_Coords);
    }

    return val;
}

bool RequestLocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("coords")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coords"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Coords> refVal_coords;
            ok &= ModelBase::fromJson(fieldValue, refVal_coords);
            setCoords(refVal_coords);
        }
    }
    return ok;
}

void RequestLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CoordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coords"), m_Coords));
    }
}

bool RequestLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("coords")))
    {
        std::shared_ptr<Coords> refVal_coords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("coords")), refVal_coords );
        setCoords(refVal_coords);
    }
    return ok;
}

utility::string_t RequestLocation::getId() const
{
    return m_Id;
}

void RequestLocation::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RequestLocation::idIsSet() const
{
    return m_IdIsSet;
}

void RequestLocation::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<Coords> RequestLocation::getCoords() const
{
    return m_Coords;
}

void RequestLocation::setCoords(const std::shared_ptr<Coords>& value)
{
    m_Coords = value;
    m_CoordsIsSet = true;
}

bool RequestLocation::coordsIsSet() const
{
    return m_CoordsIsSet;
}

void RequestLocation::unsetCoords()
{
    m_CoordsIsSet = false;
}
}
}
}
}


