/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestRangeFull.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestRangeFull::RequestRangeFull()
{
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_Max_results = 0;
    m_Max_resultsIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
}

RequestRangeFull::~RequestRangeFull()
{
}

void RequestRangeFull::validate()
{
    // TODO: implement validation
}

web::json::value RequestRangeFull::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_Max_resultsIsSet)
    {
        val[utility::conversions::to_string_t("max_results")] = ModelBase::toJson(m_Max_results);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);
    }

    return val;
}

bool RequestRangeFull::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_results")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("max_results"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_max_results;
            ok &= ModelBase::fromJson(fieldValue, refVal_max_results);
            setMaxResults(refVal_max_results);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("width")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("width"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_width;
            ok &= ModelBase::fromJson(fieldValue, refVal_width);
            setWidth(refVal_width);
        }
    }
    return ok;
}

void RequestRangeFull::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_Max_resultsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_results"), m_Max_results));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
    }
}

bool RequestRangeFull::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_results")))
    {
        int32_t refVal_max_results;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_results")), refVal_max_results );
        setMaxResults(refVal_max_results);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("width")))
    {
        int32_t refVal_width;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("width")), refVal_width );
        setWidth(refVal_width);
    }
    return ok;
}

bool RequestRangeFull::isEnabled() const
{
    return m_Enabled;
}

void RequestRangeFull::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool RequestRangeFull::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void RequestRangeFull::unsetEnabled()
{
    m_EnabledIsSet = false;
}
int32_t RequestRangeFull::getMaxResults() const
{
    return m_Max_results;
}

void RequestRangeFull::setMaxResults(int32_t value)
{
    m_Max_results = value;
    m_Max_resultsIsSet = true;
}

bool RequestRangeFull::maxResultsIsSet() const
{
    return m_Max_resultsIsSet;
}

void RequestRangeFull::unsetMax_results()
{
    m_Max_resultsIsSet = false;
}
int32_t RequestRangeFull::getWidth() const
{
    return m_Width;
}

void RequestRangeFull::setWidth(int32_t value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool RequestRangeFull::widthIsSet() const
{
    return m_WidthIsSet;
}

void RequestRangeFull::unsetWidth()
{
    m_WidthIsSet = false;
}
}
}
}
}


