/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestRoutesDepartureSearch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestRoutesDepartureSearch::RequestRoutesDepartureSearch()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Departure_location_id = utility::conversions::to_string_t("");
    m_Departure_location_idIsSet = false;
    m_Arrival_location_idsIsSet = false;
    m_TransportationIsSet = false;
    m_Departure_time = utility::datetime();
    m_Departure_timeIsSet = false;
    m_PropertiesIsSet = false;
    m_RangeIsSet = false;
}

RequestRoutesDepartureSearch::~RequestRoutesDepartureSearch()
{
}

void RequestRoutesDepartureSearch::validate()
{
    // TODO: implement validation
}

web::json::value RequestRoutesDepartureSearch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Departure_location_idIsSet)
    {
        val[utility::conversions::to_string_t("departure_location_id")] = ModelBase::toJson(m_Departure_location_id);
    }
    if(m_Arrival_location_idsIsSet)
    {
        val[utility::conversions::to_string_t("arrival_location_ids")] = ModelBase::toJson(m_Arrival_location_ids);
    }
    if(m_TransportationIsSet)
    {
        val[utility::conversions::to_string_t("transportation")] = ModelBase::toJson(m_Transportation);
    }
    if(m_Departure_timeIsSet)
    {
        val[utility::conversions::to_string_t("departure_time")] = ModelBase::toJson(m_Departure_time);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_RangeIsSet)
    {
        val[utility::conversions::to_string_t("range")] = ModelBase::toJson(m_Range);
    }

    return val;
}

bool RequestRoutesDepartureSearch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departure_location_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departure_location_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_departure_location_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_departure_location_id);
            setDepartureLocationId(refVal_departure_location_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrival_location_ids")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrival_location_ids"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_arrival_location_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_arrival_location_ids);
            setArrivalLocationIds(refVal_arrival_location_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transportation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transportation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestTransportation> refVal_transportation;
            ok &= ModelBase::fromJson(fieldValue, refVal_transportation);
            setTransportation(refVal_transportation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departure_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departure_time"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_departure_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_departure_time);
            setDepartureTime(refVal_departure_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RequestRoutesProperty>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("range")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("range"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestRangeFull> refVal_range;
            ok &= ModelBase::fromJson(fieldValue, refVal_range);
            setRange(refVal_range);
        }
    }
    return ok;
}

void RequestRoutesDepartureSearch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Departure_location_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_location_id"), m_Departure_location_id));
    }
    if(m_Arrival_location_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_location_ids"), m_Arrival_location_ids));
    }
    if(m_TransportationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transportation"), m_Transportation));
    }
    if(m_Departure_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_time"), m_Departure_time));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
    if(m_RangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("range"), m_Range));
    }
}

bool RequestRoutesDepartureSearch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departure_location_id")))
    {
        utility::string_t refVal_departure_location_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_location_id")), refVal_departure_location_id );
        setDepartureLocationId(refVal_departure_location_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrival_location_ids")))
    {
        std::vector<utility::string_t> refVal_arrival_location_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_location_ids")), refVal_arrival_location_ids );
        setArrivalLocationIds(refVal_arrival_location_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transportation")))
    {
        std::shared_ptr<RequestTransportation> refVal_transportation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transportation")), refVal_transportation );
        setTransportation(refVal_transportation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departure_time")))
    {
        utility::datetime refVal_departure_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_time")), refVal_departure_time );
        setDepartureTime(refVal_departure_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<RequestRoutesProperty>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("range")))
    {
        std::shared_ptr<RequestRangeFull> refVal_range;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("range")), refVal_range );
        setRange(refVal_range);
    }
    return ok;
}

utility::string_t RequestRoutesDepartureSearch::getId() const
{
    return m_Id;
}

void RequestRoutesDepartureSearch::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RequestRoutesDepartureSearch::idIsSet() const
{
    return m_IdIsSet;
}

void RequestRoutesDepartureSearch::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RequestRoutesDepartureSearch::getDepartureLocationId() const
{
    return m_Departure_location_id;
}

void RequestRoutesDepartureSearch::setDepartureLocationId(const utility::string_t& value)
{
    m_Departure_location_id = value;
    m_Departure_location_idIsSet = true;
}

bool RequestRoutesDepartureSearch::departureLocationIdIsSet() const
{
    return m_Departure_location_idIsSet;
}

void RequestRoutesDepartureSearch::unsetDeparture_location_id()
{
    m_Departure_location_idIsSet = false;
}
std::vector<utility::string_t>& RequestRoutesDepartureSearch::getArrivalLocationIds()
{
    return m_Arrival_location_ids;
}

void RequestRoutesDepartureSearch::setArrivalLocationIds(const std::vector<utility::string_t>& value)
{
    m_Arrival_location_ids = value;
    m_Arrival_location_idsIsSet = true;
}

bool RequestRoutesDepartureSearch::arrivalLocationIdsIsSet() const
{
    return m_Arrival_location_idsIsSet;
}

void RequestRoutesDepartureSearch::unsetArrival_location_ids()
{
    m_Arrival_location_idsIsSet = false;
}
std::shared_ptr<RequestTransportation> RequestRoutesDepartureSearch::getTransportation() const
{
    return m_Transportation;
}

void RequestRoutesDepartureSearch::setTransportation(const std::shared_ptr<RequestTransportation>& value)
{
    m_Transportation = value;
    m_TransportationIsSet = true;
}

bool RequestRoutesDepartureSearch::transportationIsSet() const
{
    return m_TransportationIsSet;
}

void RequestRoutesDepartureSearch::unsetTransportation()
{
    m_TransportationIsSet = false;
}
utility::datetime RequestRoutesDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}

void RequestRoutesDepartureSearch::setDepartureTime(const utility::datetime& value)
{
    m_Departure_time = value;
    m_Departure_timeIsSet = true;
}

bool RequestRoutesDepartureSearch::departureTimeIsSet() const
{
    return m_Departure_timeIsSet;
}

void RequestRoutesDepartureSearch::unsetDeparture_time()
{
    m_Departure_timeIsSet = false;
}
std::vector<std::shared_ptr<RequestRoutesProperty>>& RequestRoutesDepartureSearch::getProperties()
{
    return m_Properties;
}

void RequestRoutesDepartureSearch::setProperties(const std::vector<std::shared_ptr<RequestRoutesProperty>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool RequestRoutesDepartureSearch::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void RequestRoutesDepartureSearch::unsetProperties()
{
    m_PropertiesIsSet = false;
}
std::shared_ptr<RequestRangeFull> RequestRoutesDepartureSearch::getRange() const
{
    return m_Range;
}

void RequestRoutesDepartureSearch::setRange(const std::shared_ptr<RequestRangeFull>& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}

bool RequestRoutesDepartureSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}

void RequestRoutesDepartureSearch::unsetRange()
{
    m_RangeIsSet = false;
}
}
}
}
}


