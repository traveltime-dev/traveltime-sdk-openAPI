/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterFast.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestTimeFilterFast::RequestTimeFilterFast()
{
    m_LocationsIsSet = false;
    m_Arrival_searchesIsSet = false;
}

RequestTimeFilterFast::~RequestTimeFilterFast()
{
}

void RequestTimeFilterFast::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeFilterFast::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LocationsIsSet)
    {
        val[utility::conversions::to_string_t("locations")] = ModelBase::toJson(m_Locations);
    }
    if(m_Arrival_searchesIsSet)
    {
        val[utility::conversions::to_string_t("arrival_searches")] = ModelBase::toJson(m_Arrival_searches);
    }

    return val;
}

bool RequestTimeFilterFast::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("locations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locations"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RequestLocation>> refVal_locations;
            ok &= ModelBase::fromJson(fieldValue, refVal_locations);
            setLocations(refVal_locations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrival_searches")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrival_searches"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestTimeFilterFastArrivalSearches> refVal_arrival_searches;
            ok &= ModelBase::fromJson(fieldValue, refVal_arrival_searches);
            setArrivalSearches(refVal_arrival_searches);
        }
    }
    return ok;
}

void RequestTimeFilterFast::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LocationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locations"), m_Locations));
    }
    if(m_Arrival_searchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_searches"), m_Arrival_searches));
    }
}

bool RequestTimeFilterFast::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("locations")))
    {
        std::vector<std::shared_ptr<RequestLocation>> refVal_locations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locations")), refVal_locations );
        setLocations(refVal_locations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrival_searches")))
    {
        std::shared_ptr<RequestTimeFilterFastArrivalSearches> refVal_arrival_searches;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_searches")), refVal_arrival_searches );
        setArrivalSearches(refVal_arrival_searches);
    }
    return ok;
}

std::vector<std::shared_ptr<RequestLocation>>& RequestTimeFilterFast::getLocations()
{
    return m_Locations;
}

void RequestTimeFilterFast::setLocations(const std::vector<std::shared_ptr<RequestLocation>>& value)
{
    m_Locations = value;
    m_LocationsIsSet = true;
}

bool RequestTimeFilterFast::locationsIsSet() const
{
    return m_LocationsIsSet;
}

void RequestTimeFilterFast::unsetLocations()
{
    m_LocationsIsSet = false;
}
std::shared_ptr<RequestTimeFilterFastArrivalSearches> RequestTimeFilterFast::getArrivalSearches() const
{
    return m_Arrival_searches;
}

void RequestTimeFilterFast::setArrivalSearches(const std::shared_ptr<RequestTimeFilterFastArrivalSearches>& value)
{
    m_Arrival_searches = value;
    m_Arrival_searchesIsSet = true;
}

bool RequestTimeFilterFast::arrivalSearchesIsSet() const
{
    return m_Arrival_searchesIsSet;
}

void RequestTimeFilterFast::unsetArrival_searches()
{
    m_Arrival_searchesIsSet = false;
}
}
}
}
}


