/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterFastArrivalManyToOneSearch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestTimeFilterFastArrivalManyToOneSearch::RequestTimeFilterFastArrivalManyToOneSearch()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Arrival_location_id = utility::conversions::to_string_t("");
    m_Arrival_location_idIsSet = false;
    m_Departure_location_idsIsSet = false;
    m_TransportationIsSet = false;
    m_Travel_time = 0;
    m_Travel_timeIsSet = false;
    m_Arrival_time_periodIsSet = false;
    m_PropertiesIsSet = false;
}

RequestTimeFilterFastArrivalManyToOneSearch::~RequestTimeFilterFastArrivalManyToOneSearch()
{
}

void RequestTimeFilterFastArrivalManyToOneSearch::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeFilterFastArrivalManyToOneSearch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Arrival_location_idIsSet)
    {
        val[utility::conversions::to_string_t("arrival_location_id")] = ModelBase::toJson(m_Arrival_location_id);
    }
    if(m_Departure_location_idsIsSet)
    {
        val[utility::conversions::to_string_t("departure_location_ids")] = ModelBase::toJson(m_Departure_location_ids);
    }
    if(m_TransportationIsSet)
    {
        val[utility::conversions::to_string_t("transportation")] = ModelBase::toJson(m_Transportation);
    }
    if(m_Travel_timeIsSet)
    {
        val[utility::conversions::to_string_t("travel_time")] = ModelBase::toJson(m_Travel_time);
    }
    if(m_Arrival_time_periodIsSet)
    {
        val[utility::conversions::to_string_t("arrival_time_period")] = ModelBase::toJson(m_Arrival_time_period);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }

    return val;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrival_location_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrival_location_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_arrival_location_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_arrival_location_id);
            setArrivalLocationId(refVal_arrival_location_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departure_location_ids")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departure_location_ids"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_departure_location_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_departure_location_ids);
            setDepartureLocationIds(refVal_departure_location_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transportation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transportation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestTransportationFast> refVal_transportation;
            ok &= ModelBase::fromJson(fieldValue, refVal_transportation);
            setTransportation(refVal_transportation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("travel_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("travel_time"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_travel_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_travel_time);
            setTravelTime(refVal_travel_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrival_time_period")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrival_time_period"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestArrivalTimePeriod> refVal_arrival_time_period;
            ok &= ModelBase::fromJson(fieldValue, refVal_arrival_time_period);
            setArrivalTimePeriod(refVal_arrival_time_period);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RequestTimeFilterFastProperty>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    return ok;
}

void RequestTimeFilterFastArrivalManyToOneSearch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Arrival_location_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_location_id"), m_Arrival_location_id));
    }
    if(m_Departure_location_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_location_ids"), m_Departure_location_ids));
    }
    if(m_TransportationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transportation"), m_Transportation));
    }
    if(m_Travel_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("travel_time"), m_Travel_time));
    }
    if(m_Arrival_time_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_time_period"), m_Arrival_time_period));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
}

bool RequestTimeFilterFastArrivalManyToOneSearch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrival_location_id")))
    {
        utility::string_t refVal_arrival_location_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_location_id")), refVal_arrival_location_id );
        setArrivalLocationId(refVal_arrival_location_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departure_location_ids")))
    {
        std::vector<utility::string_t> refVal_departure_location_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_location_ids")), refVal_departure_location_ids );
        setDepartureLocationIds(refVal_departure_location_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transportation")))
    {
        std::shared_ptr<RequestTransportationFast> refVal_transportation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transportation")), refVal_transportation );
        setTransportation(refVal_transportation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("travel_time")))
    {
        int32_t refVal_travel_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("travel_time")), refVal_travel_time );
        setTravelTime(refVal_travel_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrival_time_period")))
    {
        std::shared_ptr<RequestArrivalTimePeriod> refVal_arrival_time_period;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_time_period")), refVal_arrival_time_period );
        setArrivalTimePeriod(refVal_arrival_time_period);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<RequestTimeFilterFastProperty>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    return ok;
}

utility::string_t RequestTimeFilterFastArrivalManyToOneSearch::getId() const
{
    return m_Id;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::idIsSet() const
{
    return m_IdIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RequestTimeFilterFastArrivalManyToOneSearch::getArrivalLocationId() const
{
    return m_Arrival_location_id;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalLocationId(const utility::string_t& value)
{
    m_Arrival_location_id = value;
    m_Arrival_location_idIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::arrivalLocationIdIsSet() const
{
    return m_Arrival_location_idIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetArrival_location_id()
{
    m_Arrival_location_idIsSet = false;
}
std::vector<utility::string_t>& RequestTimeFilterFastArrivalManyToOneSearch::getDepartureLocationIds()
{
    return m_Departure_location_ids;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setDepartureLocationIds(const std::vector<utility::string_t>& value)
{
    m_Departure_location_ids = value;
    m_Departure_location_idsIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::departureLocationIdsIsSet() const
{
    return m_Departure_location_idsIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetDeparture_location_ids()
{
    m_Departure_location_idsIsSet = false;
}
std::shared_ptr<RequestTransportationFast> RequestTimeFilterFastArrivalManyToOneSearch::getTransportation() const
{
    return m_Transportation;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setTransportation(const std::shared_ptr<RequestTransportationFast>& value)
{
    m_Transportation = value;
    m_TransportationIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::transportationIsSet() const
{
    return m_TransportationIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetTransportation()
{
    m_TransportationIsSet = false;
}
int32_t RequestTimeFilterFastArrivalManyToOneSearch::getTravelTime() const
{
    return m_Travel_time;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setTravelTime(int32_t value)
{
    m_Travel_time = value;
    m_Travel_timeIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::travelTimeIsSet() const
{
    return m_Travel_timeIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetTravel_time()
{
    m_Travel_timeIsSet = false;
}
std::shared_ptr<RequestArrivalTimePeriod> RequestTimeFilterFastArrivalManyToOneSearch::getArrivalTimePeriod() const
{
    return m_Arrival_time_period;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalTimePeriod(const std::shared_ptr<RequestArrivalTimePeriod>& value)
{
    m_Arrival_time_period = value;
    m_Arrival_time_periodIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::arrivalTimePeriodIsSet() const
{
    return m_Arrival_time_periodIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetArrival_time_period()
{
    m_Arrival_time_periodIsSet = false;
}
std::vector<std::shared_ptr<RequestTimeFilterFastProperty>>& RequestTimeFilterFastArrivalManyToOneSearch::getProperties()
{
    return m_Properties;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setProperties(const std::vector<std::shared_ptr<RequestTimeFilterFastProperty>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool RequestTimeFilterFastArrivalManyToOneSearch::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void RequestTimeFilterFastArrivalManyToOneSearch::unsetProperties()
{
    m_PropertiesIsSet = false;
}
}
}
}
}


