/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeMapDepartureSearch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestTimeMapDepartureSearch::RequestTimeMapDepartureSearch()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_CoordsIsSet = false;
    m_TransportationIsSet = false;
    m_Travel_time = 0;
    m_Travel_timeIsSet = false;
    m_Departure_time = utility::datetime();
    m_Departure_timeIsSet = false;
    m_PropertiesIsSet = false;
    m_RangeIsSet = false;
    m_Level_of_detailIsSet = false;
}

RequestTimeMapDepartureSearch::~RequestTimeMapDepartureSearch()
{
}

void RequestTimeMapDepartureSearch::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeMapDepartureSearch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CoordsIsSet)
    {
        val[utility::conversions::to_string_t("coords")] = ModelBase::toJson(m_Coords);
    }
    if(m_TransportationIsSet)
    {
        val[utility::conversions::to_string_t("transportation")] = ModelBase::toJson(m_Transportation);
    }
    if(m_Travel_timeIsSet)
    {
        val[utility::conversions::to_string_t("travel_time")] = ModelBase::toJson(m_Travel_time);
    }
    if(m_Departure_timeIsSet)
    {
        val[utility::conversions::to_string_t("departure_time")] = ModelBase::toJson(m_Departure_time);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_RangeIsSet)
    {
        val[utility::conversions::to_string_t("range")] = ModelBase::toJson(m_Range);
    }
    if(m_Level_of_detailIsSet)
    {
        val[utility::conversions::to_string_t("level_of_detail")] = ModelBase::toJson(m_Level_of_detail);
    }

    return val;
}

bool RequestTimeMapDepartureSearch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("coords")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coords"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Coords> refVal_coords;
            ok &= ModelBase::fromJson(fieldValue, refVal_coords);
            setCoords(refVal_coords);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transportation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transportation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestTransportation> refVal_transportation;
            ok &= ModelBase::fromJson(fieldValue, refVal_transportation);
            setTransportation(refVal_transportation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("travel_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("travel_time"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_travel_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_travel_time);
            setTravelTime(refVal_travel_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departure_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departure_time"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_departure_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_departure_time);
            setDepartureTime(refVal_departure_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RequestTimeMapProperty>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("range")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("range"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestRangeNoMaxResults> refVal_range;
            ok &= ModelBase::fromJson(fieldValue, refVal_range);
            setRange(refVal_range);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("level_of_detail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("level_of_detail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestLevelOfDetail> refVal_level_of_detail;
            ok &= ModelBase::fromJson(fieldValue, refVal_level_of_detail);
            setLevelOfDetail(refVal_level_of_detail);
        }
    }
    return ok;
}

void RequestTimeMapDepartureSearch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CoordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coords"), m_Coords));
    }
    if(m_TransportationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transportation"), m_Transportation));
    }
    if(m_Travel_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("travel_time"), m_Travel_time));
    }
    if(m_Departure_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_time"), m_Departure_time));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
    if(m_RangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("range"), m_Range));
    }
    if(m_Level_of_detailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("level_of_detail"), m_Level_of_detail));
    }
}

bool RequestTimeMapDepartureSearch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("coords")))
    {
        std::shared_ptr<Coords> refVal_coords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("coords")), refVal_coords );
        setCoords(refVal_coords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transportation")))
    {
        std::shared_ptr<RequestTransportation> refVal_transportation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transportation")), refVal_transportation );
        setTransportation(refVal_transportation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("travel_time")))
    {
        int32_t refVal_travel_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("travel_time")), refVal_travel_time );
        setTravelTime(refVal_travel_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departure_time")))
    {
        utility::datetime refVal_departure_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_time")), refVal_departure_time );
        setDepartureTime(refVal_departure_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<RequestTimeMapProperty>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("range")))
    {
        std::shared_ptr<RequestRangeNoMaxResults> refVal_range;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("range")), refVal_range );
        setRange(refVal_range);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("level_of_detail")))
    {
        std::shared_ptr<RequestLevelOfDetail> refVal_level_of_detail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("level_of_detail")), refVal_level_of_detail );
        setLevelOfDetail(refVal_level_of_detail);
    }
    return ok;
}

utility::string_t RequestTimeMapDepartureSearch::getId() const
{
    return m_Id;
}

void RequestTimeMapDepartureSearch::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RequestTimeMapDepartureSearch::idIsSet() const
{
    return m_IdIsSet;
}

void RequestTimeMapDepartureSearch::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<Coords> RequestTimeMapDepartureSearch::getCoords() const
{
    return m_Coords;
}

void RequestTimeMapDepartureSearch::setCoords(const std::shared_ptr<Coords>& value)
{
    m_Coords = value;
    m_CoordsIsSet = true;
}

bool RequestTimeMapDepartureSearch::coordsIsSet() const
{
    return m_CoordsIsSet;
}

void RequestTimeMapDepartureSearch::unsetCoords()
{
    m_CoordsIsSet = false;
}
std::shared_ptr<RequestTransportation> RequestTimeMapDepartureSearch::getTransportation() const
{
    return m_Transportation;
}

void RequestTimeMapDepartureSearch::setTransportation(const std::shared_ptr<RequestTransportation>& value)
{
    m_Transportation = value;
    m_TransportationIsSet = true;
}

bool RequestTimeMapDepartureSearch::transportationIsSet() const
{
    return m_TransportationIsSet;
}

void RequestTimeMapDepartureSearch::unsetTransportation()
{
    m_TransportationIsSet = false;
}
int32_t RequestTimeMapDepartureSearch::getTravelTime() const
{
    return m_Travel_time;
}

void RequestTimeMapDepartureSearch::setTravelTime(int32_t value)
{
    m_Travel_time = value;
    m_Travel_timeIsSet = true;
}

bool RequestTimeMapDepartureSearch::travelTimeIsSet() const
{
    return m_Travel_timeIsSet;
}

void RequestTimeMapDepartureSearch::unsetTravel_time()
{
    m_Travel_timeIsSet = false;
}
utility::datetime RequestTimeMapDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}

void RequestTimeMapDepartureSearch::setDepartureTime(const utility::datetime& value)
{
    m_Departure_time = value;
    m_Departure_timeIsSet = true;
}

bool RequestTimeMapDepartureSearch::departureTimeIsSet() const
{
    return m_Departure_timeIsSet;
}

void RequestTimeMapDepartureSearch::unsetDeparture_time()
{
    m_Departure_timeIsSet = false;
}
std::vector<std::shared_ptr<RequestTimeMapProperty>>& RequestTimeMapDepartureSearch::getProperties()
{
    return m_Properties;
}

void RequestTimeMapDepartureSearch::setProperties(const std::vector<std::shared_ptr<RequestTimeMapProperty>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool RequestTimeMapDepartureSearch::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void RequestTimeMapDepartureSearch::unsetProperties()
{
    m_PropertiesIsSet = false;
}
std::shared_ptr<RequestRangeNoMaxResults> RequestTimeMapDepartureSearch::getRange() const
{
    return m_Range;
}

void RequestTimeMapDepartureSearch::setRange(const std::shared_ptr<RequestRangeNoMaxResults>& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}

bool RequestTimeMapDepartureSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}

void RequestTimeMapDepartureSearch::unsetRange()
{
    m_RangeIsSet = false;
}
std::shared_ptr<RequestLevelOfDetail> RequestTimeMapDepartureSearch::getLevelOfDetail() const
{
    return m_Level_of_detail;
}

void RequestTimeMapDepartureSearch::setLevelOfDetail(const std::shared_ptr<RequestLevelOfDetail>& value)
{
    m_Level_of_detail = value;
    m_Level_of_detailIsSet = true;
}

bool RequestTimeMapDepartureSearch::levelOfDetailIsSet() const
{
    return m_Level_of_detailIsSet;
}

void RequestTimeMapDepartureSearch::unsetLevel_of_detail()
{
    m_Level_of_detailIsSet = false;
}
}
}
}
}


