/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeMapProperty.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RequestTimeMapProperty::RequestTimeMapProperty()
{
}

RequestTimeMapProperty::~RequestTimeMapProperty()
{
}

void RequestTimeMapProperty::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeMapProperty::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eRequestTimeMapProperty::RequestTimeMapProperty_IS_ONLY_WALKING) val = web::json::value::string(U(is_only_walking));

    return val;
}

bool RequestTimeMapProperty::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(is_only_walking)) m_value = eRequestTimeMapProperty::RequestTimeMapProperty_IS_ONLY_WALKING;
    return true;
}

void RequestTimeMapProperty::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eRequestTimeMapProperty::RequestTimeMapProperty_IS_ONLY_WALKING) s = utility::conversions::to_string_t(is_only_walking);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool RequestTimeMapProperty::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eRequestTimeMapProperty v;

        
        if (s == utility::conversions::to_string_t(is_only_walking)) v = eRequestTimeMapProperty::RequestTimeMapProperty_IS_ONLY_WALKING;

        setValue(v);
    }
    return ok;
}

RequestTimeMapProperty::eRequestTimeMapProperty RequestTimeMapProperty::getValue() const
{
   return m_value;
}

void RequestTimeMapProperty::setValue(RequestTimeMapProperty::eRequestTimeMapProperty const value)
{
   m_value = value;
}


}
}
}
}


