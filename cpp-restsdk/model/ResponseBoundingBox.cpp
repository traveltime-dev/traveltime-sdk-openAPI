/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseBoundingBox.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseBoundingBox::ResponseBoundingBox()
{
    m_EnvelopeIsSet = false;
    m_BoxesIsSet = false;
}

ResponseBoundingBox::~ResponseBoundingBox()
{
}

void ResponseBoundingBox::validate()
{
    // TODO: implement validation
}

web::json::value ResponseBoundingBox::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnvelopeIsSet)
    {
        val[utility::conversions::to_string_t("envelope")] = ModelBase::toJson(m_Envelope);
    }
    if(m_BoxesIsSet)
    {
        val[utility::conversions::to_string_t("boxes")] = ModelBase::toJson(m_Boxes);
    }

    return val;
}

bool ResponseBoundingBox::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("envelope")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("envelope"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseBox> refVal_envelope;
            ok &= ModelBase::fromJson(fieldValue, refVal_envelope);
            setEnvelope(refVal_envelope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("boxes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("boxes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseBox>> refVal_boxes;
            ok &= ModelBase::fromJson(fieldValue, refVal_boxes);
            setBoxes(refVal_boxes);
        }
    }
    return ok;
}

void ResponseBoundingBox::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EnvelopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("envelope"), m_Envelope));
    }
    if(m_BoxesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("boxes"), m_Boxes));
    }
}

bool ResponseBoundingBox::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("envelope")))
    {
        std::shared_ptr<ResponseBox> refVal_envelope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("envelope")), refVal_envelope );
        setEnvelope(refVal_envelope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("boxes")))
    {
        std::vector<std::shared_ptr<ResponseBox>> refVal_boxes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("boxes")), refVal_boxes );
        setBoxes(refVal_boxes);
    }
    return ok;
}

std::shared_ptr<ResponseBox> ResponseBoundingBox::getEnvelope() const
{
    return m_Envelope;
}

void ResponseBoundingBox::setEnvelope(const std::shared_ptr<ResponseBox>& value)
{
    m_Envelope = value;
    m_EnvelopeIsSet = true;
}

bool ResponseBoundingBox::envelopeIsSet() const
{
    return m_EnvelopeIsSet;
}

void ResponseBoundingBox::unsetEnvelope()
{
    m_EnvelopeIsSet = false;
}
std::vector<std::shared_ptr<ResponseBox>>& ResponseBoundingBox::getBoxes()
{
    return m_Boxes;
}

void ResponseBoundingBox::setBoxes(const std::vector<std::shared_ptr<ResponseBox>>& value)
{
    m_Boxes = value;
    m_BoxesIsSet = true;
}

bool ResponseBoundingBox::boxesIsSet() const
{
    return m_BoxesIsSet;
}

void ResponseBoundingBox::unsetBoxes()
{
    m_BoxesIsSet = false;
}
}
}
}
}


