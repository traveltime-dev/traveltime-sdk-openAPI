/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseBox.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseBox::ResponseBox()
{
    m_Min_lat = 0.0;
    m_Min_latIsSet = false;
    m_Max_lat = 0.0;
    m_Max_latIsSet = false;
    m_Min_lng = 0.0;
    m_Min_lngIsSet = false;
    m_Max_lng = 0.0;
    m_Max_lngIsSet = false;
}

ResponseBox::~ResponseBox()
{
}

void ResponseBox::validate()
{
    // TODO: implement validation
}

web::json::value ResponseBox::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Min_latIsSet)
    {
        val[utility::conversions::to_string_t("min_lat")] = ModelBase::toJson(m_Min_lat);
    }
    if(m_Max_latIsSet)
    {
        val[utility::conversions::to_string_t("max_lat")] = ModelBase::toJson(m_Max_lat);
    }
    if(m_Min_lngIsSet)
    {
        val[utility::conversions::to_string_t("min_lng")] = ModelBase::toJson(m_Min_lng);
    }
    if(m_Max_lngIsSet)
    {
        val[utility::conversions::to_string_t("max_lng")] = ModelBase::toJson(m_Max_lng);
    }

    return val;
}

bool ResponseBox::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("min_lat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("min_lat"));
        if(!fieldValue.is_null())
        {
            double refVal_min_lat;
            ok &= ModelBase::fromJson(fieldValue, refVal_min_lat);
            setMinLat(refVal_min_lat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_lat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("max_lat"));
        if(!fieldValue.is_null())
        {
            double refVal_max_lat;
            ok &= ModelBase::fromJson(fieldValue, refVal_max_lat);
            setMaxLat(refVal_max_lat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("min_lng")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("min_lng"));
        if(!fieldValue.is_null())
        {
            double refVal_min_lng;
            ok &= ModelBase::fromJson(fieldValue, refVal_min_lng);
            setMinLng(refVal_min_lng);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_lng")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("max_lng"));
        if(!fieldValue.is_null())
        {
            double refVal_max_lng;
            ok &= ModelBase::fromJson(fieldValue, refVal_max_lng);
            setMaxLng(refVal_max_lng);
        }
    }
    return ok;
}

void ResponseBox::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Min_latIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("min_lat"), m_Min_lat));
    }
    if(m_Max_latIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_lat"), m_Max_lat));
    }
    if(m_Min_lngIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("min_lng"), m_Min_lng));
    }
    if(m_Max_lngIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_lng"), m_Max_lng));
    }
}

bool ResponseBox::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("min_lat")))
    {
        double refVal_min_lat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("min_lat")), refVal_min_lat );
        setMinLat(refVal_min_lat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_lat")))
    {
        double refVal_max_lat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_lat")), refVal_max_lat );
        setMaxLat(refVal_max_lat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("min_lng")))
    {
        double refVal_min_lng;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("min_lng")), refVal_min_lng );
        setMinLng(refVal_min_lng);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_lng")))
    {
        double refVal_max_lng;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_lng")), refVal_max_lng );
        setMaxLng(refVal_max_lng);
    }
    return ok;
}

double ResponseBox::getMinLat() const
{
    return m_Min_lat;
}

void ResponseBox::setMinLat(double value)
{
    m_Min_lat = value;
    m_Min_latIsSet = true;
}

bool ResponseBox::minLatIsSet() const
{
    return m_Min_latIsSet;
}

void ResponseBox::unsetMin_lat()
{
    m_Min_latIsSet = false;
}
double ResponseBox::getMaxLat() const
{
    return m_Max_lat;
}

void ResponseBox::setMaxLat(double value)
{
    m_Max_lat = value;
    m_Max_latIsSet = true;
}

bool ResponseBox::maxLatIsSet() const
{
    return m_Max_latIsSet;
}

void ResponseBox::unsetMax_lat()
{
    m_Max_latIsSet = false;
}
double ResponseBox::getMinLng() const
{
    return m_Min_lng;
}

void ResponseBox::setMinLng(double value)
{
    m_Min_lng = value;
    m_Min_lngIsSet = true;
}

bool ResponseBox::minLngIsSet() const
{
    return m_Min_lngIsSet;
}

void ResponseBox::unsetMin_lng()
{
    m_Min_lngIsSet = false;
}
double ResponseBox::getMaxLng() const
{
    return m_Max_lng;
}

void ResponseBox::setMaxLng(double value)
{
    m_Max_lng = value;
    m_Max_lngIsSet = true;
}

bool ResponseBox::maxLngIsSet() const
{
    return m_Max_lngIsSet;
}

void ResponseBox::unsetMax_lng()
{
    m_Max_lngIsSet = false;
}
}
}
}
}


