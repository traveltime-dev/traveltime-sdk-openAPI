/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseFares.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseFares::ResponseFares()
{
    m_BreakdownIsSet = false;
    m_Tickets_totalIsSet = false;
}

ResponseFares::~ResponseFares()
{
}

void ResponseFares::validate()
{
    // TODO: implement validation
}

web::json::value ResponseFares::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BreakdownIsSet)
    {
        val[utility::conversions::to_string_t("breakdown")] = ModelBase::toJson(m_Breakdown);
    }
    if(m_Tickets_totalIsSet)
    {
        val[utility::conversions::to_string_t("tickets_total")] = ModelBase::toJson(m_Tickets_total);
    }

    return val;
}

bool ResponseFares::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("breakdown")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("breakdown"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseFaresBreakdownItem>> refVal_breakdown;
            ok &= ModelBase::fromJson(fieldValue, refVal_breakdown);
            setBreakdown(refVal_breakdown);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tickets_total")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tickets_total"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseFareTicket>> refVal_tickets_total;
            ok &= ModelBase::fromJson(fieldValue, refVal_tickets_total);
            setTicketsTotal(refVal_tickets_total);
        }
    }
    return ok;
}

void ResponseFares::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BreakdownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("breakdown"), m_Breakdown));
    }
    if(m_Tickets_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tickets_total"), m_Tickets_total));
    }
}

bool ResponseFares::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("breakdown")))
    {
        std::vector<std::shared_ptr<ResponseFaresBreakdownItem>> refVal_breakdown;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("breakdown")), refVal_breakdown );
        setBreakdown(refVal_breakdown);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tickets_total")))
    {
        std::vector<std::shared_ptr<ResponseFareTicket>> refVal_tickets_total;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tickets_total")), refVal_tickets_total );
        setTicketsTotal(refVal_tickets_total);
    }
    return ok;
}

std::vector<std::shared_ptr<ResponseFaresBreakdownItem>>& ResponseFares::getBreakdown()
{
    return m_Breakdown;
}

void ResponseFares::setBreakdown(const std::vector<std::shared_ptr<ResponseFaresBreakdownItem>>& value)
{
    m_Breakdown = value;
    m_BreakdownIsSet = true;
}

bool ResponseFares::breakdownIsSet() const
{
    return m_BreakdownIsSet;
}

void ResponseFares::unsetBreakdown()
{
    m_BreakdownIsSet = false;
}
std::vector<std::shared_ptr<ResponseFareTicket>>& ResponseFares::getTicketsTotal()
{
    return m_Tickets_total;
}

void ResponseFares::setTicketsTotal(const std::vector<std::shared_ptr<ResponseFareTicket>>& value)
{
    m_Tickets_total = value;
    m_Tickets_totalIsSet = true;
}

bool ResponseFares::ticketsTotalIsSet() const
{
    return m_Tickets_totalIsSet;
}

void ResponseFares::unsetTickets_total()
{
    m_Tickets_totalIsSet = false;
}
}
}
}
}


