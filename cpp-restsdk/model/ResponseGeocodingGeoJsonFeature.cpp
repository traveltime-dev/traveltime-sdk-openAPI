/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseGeocodingGeoJsonFeature.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseGeocodingGeoJsonFeature::ResponseGeocodingGeoJsonFeature()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_GeometryIsSet = false;
    m_PropertiesIsSet = false;
}

ResponseGeocodingGeoJsonFeature::~ResponseGeocodingGeoJsonFeature()
{
}

void ResponseGeocodingGeoJsonFeature::validate()
{
    // TODO: implement validation
}

web::json::value ResponseGeocodingGeoJsonFeature::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_GeometryIsSet)
    {
        val[utility::conversions::to_string_t("geometry")] = ModelBase::toJson(m_Geometry);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }

    return val;
}

bool ResponseGeocodingGeoJsonFeature::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geometry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("geometry"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseGeocodingGeometry> refVal_geometry;
            ok &= ModelBase::fromJson(fieldValue, refVal_geometry);
            setGeometry(refVal_geometry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseGeocodingProperties> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    return ok;
}

void ResponseGeocodingGeoJsonFeature::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_GeometryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geometry"), m_Geometry));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
}

bool ResponseGeocodingGeoJsonFeature::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geometry")))
    {
        std::shared_ptr<ResponseGeocodingGeometry> refVal_geometry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geometry")), refVal_geometry );
        setGeometry(refVal_geometry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::shared_ptr<ResponseGeocodingProperties> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    return ok;
}

utility::string_t ResponseGeocodingGeoJsonFeature::getType() const
{
    return m_Type;
}

void ResponseGeocodingGeoJsonFeature::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ResponseGeocodingGeoJsonFeature::typeIsSet() const
{
    return m_TypeIsSet;
}

void ResponseGeocodingGeoJsonFeature::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<ResponseGeocodingGeometry> ResponseGeocodingGeoJsonFeature::getGeometry() const
{
    return m_Geometry;
}

void ResponseGeocodingGeoJsonFeature::setGeometry(const std::shared_ptr<ResponseGeocodingGeometry>& value)
{
    m_Geometry = value;
    m_GeometryIsSet = true;
}

bool ResponseGeocodingGeoJsonFeature::geometryIsSet() const
{
    return m_GeometryIsSet;
}

void ResponseGeocodingGeoJsonFeature::unsetGeometry()
{
    m_GeometryIsSet = false;
}
std::shared_ptr<ResponseGeocodingProperties> ResponseGeocodingGeoJsonFeature::getProperties() const
{
    return m_Properties;
}

void ResponseGeocodingGeoJsonFeature::setProperties(const std::shared_ptr<ResponseGeocodingProperties>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool ResponseGeocodingGeoJsonFeature::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void ResponseGeocodingGeoJsonFeature::unsetProperties()
{
    m_PropertiesIsSet = false;
}
}
}
}
}


