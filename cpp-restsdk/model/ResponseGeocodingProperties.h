/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResponseGeocodingProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseGeocodingProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseGeocodingProperties_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ResponseMapInfoFeatures.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ResponseGeocodingProperties
    : public ModelBase
{
public:
    ResponseGeocodingProperties();
    virtual ~ResponseGeocodingProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ResponseGeocodingProperties members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLabel() const;
    bool labelIsSet() const;
    void unsetLabel();

    void setLabel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getScore() const;
    bool scoreIsSet() const;
    void unsetScore();

    void setScore(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHouseNumber() const;
    bool houseNumberIsSet() const;
    void unsetHouse_number();

    void setHouseNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();

    void setStreet(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegionCode() const;
    bool regionCodeIsSet() const;
    void unsetRegion_code();

    void setRegionCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNeighbourhood() const;
    bool neighbourhoodIsSet() const;
    void unsetNeighbourhood();

    void setNeighbourhood(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCounty() const;
    bool countyIsSet() const;
    void unsetCounty();

    void setCounty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMacroregion() const;
    bool macroregionIsSet() const;
    void unsetMacroregion();

    void setMacroregion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryCode() const;
    bool countryCodeIsSet() const;
    void unsetCountry_code();

    void setCountryCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContinent() const;
    bool continentIsSet() const;
    void unsetContinent();

    void setContinent(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostcode() const;
    bool postcodeIsSet() const;
    void unsetPostcode();

    void setPostcode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResponseMapInfoFeatures> getFeatures() const;
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::shared_ptr<ResponseMapInfoFeatures>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Label;
    bool m_LabelIsSet;
    double m_Score;
    bool m_ScoreIsSet;
    utility::string_t m_House_number;
    bool m_House_numberIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    utility::string_t m_Region_code;
    bool m_Region_codeIsSet;
    utility::string_t m_Neighbourhood;
    bool m_NeighbourhoodIsSet;
    utility::string_t m_County;
    bool m_CountyIsSet;
    utility::string_t m_Macroregion;
    bool m_MacroregionIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_Country_code;
    bool m_Country_codeIsSet;
    utility::string_t m_Continent;
    bool m_ContinentIsSet;
    utility::string_t m_Postcode;
    bool m_PostcodeIsSet;
    std::shared_ptr<ResponseMapInfoFeatures> m_Features;
    bool m_FeaturesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseGeocodingProperties_H_ */
