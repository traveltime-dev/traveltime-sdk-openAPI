/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseMapInfoFeatures.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseMapInfoFeatures::ResponseMapInfoFeatures()
{
    m_Public_transportIsSet = false;
    m_Fares = false;
    m_FaresIsSet = false;
    m_Postcodes = false;
    m_PostcodesIsSet = false;
}

ResponseMapInfoFeatures::~ResponseMapInfoFeatures()
{
}

void ResponseMapInfoFeatures::validate()
{
    // TODO: implement validation
}

web::json::value ResponseMapInfoFeatures::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Public_transportIsSet)
    {
        val[utility::conversions::to_string_t("public_transport")] = ModelBase::toJson(m_Public_transport);
    }
    if(m_FaresIsSet)
    {
        val[utility::conversions::to_string_t("fares")] = ModelBase::toJson(m_Fares);
    }
    if(m_PostcodesIsSet)
    {
        val[utility::conversions::to_string_t("postcodes")] = ModelBase::toJson(m_Postcodes);
    }

    return val;
}

bool ResponseMapInfoFeatures::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("public_transport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("public_transport"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> refVal_public_transport;
            ok &= ModelBase::fromJson(fieldValue, refVal_public_transport);
            setPublicTransport(refVal_public_transport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fares")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fares"));
        if(!fieldValue.is_null())
        {
            bool refVal_fares;
            ok &= ModelBase::fromJson(fieldValue, refVal_fares);
            setFares(refVal_fares);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postcodes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("postcodes"));
        if(!fieldValue.is_null())
        {
            bool refVal_postcodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_postcodes);
            setPostcodes(refVal_postcodes);
        }
    }
    return ok;
}

void ResponseMapInfoFeatures::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Public_transportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public_transport"), m_Public_transport));
    }
    if(m_FaresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fares"), m_Fares));
    }
    if(m_PostcodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postcodes"), m_Postcodes));
    }
}

bool ResponseMapInfoFeatures::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("public_transport")))
    {
        std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> refVal_public_transport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("public_transport")), refVal_public_transport );
        setPublicTransport(refVal_public_transport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fares")))
    {
        bool refVal_fares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fares")), refVal_fares );
        setFares(refVal_fares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postcodes")))
    {
        bool refVal_postcodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("postcodes")), refVal_postcodes );
        setPostcodes(refVal_postcodes);
    }
    return ok;
}

std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> ResponseMapInfoFeatures::getPublicTransport() const
{
    return m_Public_transport;
}

void ResponseMapInfoFeatures::setPublicTransport(const std::shared_ptr<ResponseMapInfoFeaturesPublicTransport>& value)
{
    m_Public_transport = value;
    m_Public_transportIsSet = true;
}

bool ResponseMapInfoFeatures::publicTransportIsSet() const
{
    return m_Public_transportIsSet;
}

void ResponseMapInfoFeatures::unsetPublic_transport()
{
    m_Public_transportIsSet = false;
}
bool ResponseMapInfoFeatures::isFares() const
{
    return m_Fares;
}

void ResponseMapInfoFeatures::setFares(bool value)
{
    m_Fares = value;
    m_FaresIsSet = true;
}

bool ResponseMapInfoFeatures::faresIsSet() const
{
    return m_FaresIsSet;
}

void ResponseMapInfoFeatures::unsetFares()
{
    m_FaresIsSet = false;
}
bool ResponseMapInfoFeatures::isPostcodes() const
{
    return m_Postcodes;
}

void ResponseMapInfoFeatures::setPostcodes(bool value)
{
    m_Postcodes = value;
    m_PostcodesIsSet = true;
}

bool ResponseMapInfoFeatures::postcodesIsSet() const
{
    return m_PostcodesIsSet;
}

void ResponseMapInfoFeatures::unsetPostcodes()
{
    m_PostcodesIsSet = false;
}
}
}
}
}


