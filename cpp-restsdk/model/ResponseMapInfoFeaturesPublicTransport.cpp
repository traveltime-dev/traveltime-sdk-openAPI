/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseMapInfoFeaturesPublicTransport.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseMapInfoFeaturesPublicTransport::ResponseMapInfoFeaturesPublicTransport()
{
    m_Date_start = utility::datetime();
    m_Date_startIsSet = false;
    m_Date_end = utility::datetime();
    m_Date_endIsSet = false;
}

ResponseMapInfoFeaturesPublicTransport::~ResponseMapInfoFeaturesPublicTransport()
{
}

void ResponseMapInfoFeaturesPublicTransport::validate()
{
    // TODO: implement validation
}

web::json::value ResponseMapInfoFeaturesPublicTransport::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Date_startIsSet)
    {
        val[utility::conversions::to_string_t("date_start")] = ModelBase::toJson(m_Date_start);
    }
    if(m_Date_endIsSet)
    {
        val[utility::conversions::to_string_t("date_end")] = ModelBase::toJson(m_Date_end);
    }

    return val;
}

bool ResponseMapInfoFeaturesPublicTransport::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("date_start")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_start"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_date_start;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_start);
            setDateStart(refVal_date_start);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_end")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_end"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_date_end;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_end);
            setDateEnd(refVal_date_end);
        }
    }
    return ok;
}

void ResponseMapInfoFeaturesPublicTransport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Date_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_start"), m_Date_start));
    }
    if(m_Date_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_end"), m_Date_end));
    }
}

bool ResponseMapInfoFeaturesPublicTransport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("date_start")))
    {
        utility::datetime refVal_date_start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_start")), refVal_date_start );
        setDateStart(refVal_date_start);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_end")))
    {
        utility::datetime refVal_date_end;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_end")), refVal_date_end );
        setDateEnd(refVal_date_end);
    }
    return ok;
}

utility::datetime ResponseMapInfoFeaturesPublicTransport::getDateStart() const
{
    return m_Date_start;
}

void ResponseMapInfoFeaturesPublicTransport::setDateStart(const utility::datetime& value)
{
    m_Date_start = value;
    m_Date_startIsSet = true;
}

bool ResponseMapInfoFeaturesPublicTransport::dateStartIsSet() const
{
    return m_Date_startIsSet;
}

void ResponseMapInfoFeaturesPublicTransport::unsetDate_start()
{
    m_Date_startIsSet = false;
}
utility::datetime ResponseMapInfoFeaturesPublicTransport::getDateEnd() const
{
    return m_Date_end;
}

void ResponseMapInfoFeaturesPublicTransport::setDateEnd(const utility::datetime& value)
{
    m_Date_end = value;
    m_Date_endIsSet = true;
}

bool ResponseMapInfoFeaturesPublicTransport::dateEndIsSet() const
{
    return m_Date_endIsSet;
}

void ResponseMapInfoFeaturesPublicTransport::unsetDate_end()
{
    m_Date_endIsSet = false;
}
}
}
}
}


