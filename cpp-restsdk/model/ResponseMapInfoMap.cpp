/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseMapInfoMap.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseMapInfoMap::ResponseMapInfoMap()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_FeaturesIsSet = false;
}

ResponseMapInfoMap::~ResponseMapInfoMap()
{
}

void ResponseMapInfoMap::validate()
{
    // TODO: implement validation
}

web::json::value ResponseMapInfoMap::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);
    }

    return val;
}

bool ResponseMapInfoMap::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("features")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("features"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseMapInfoFeatures> refVal_features;
            ok &= ModelBase::fromJson(fieldValue, refVal_features);
            setFeatures(refVal_features);
        }
    }
    return ok;
}

void ResponseMapInfoMap::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), m_Features));
    }
}

bool ResponseMapInfoMap::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("features")))
    {
        std::shared_ptr<ResponseMapInfoFeatures> refVal_features;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("features")), refVal_features );
        setFeatures(refVal_features);
    }
    return ok;
}

utility::string_t ResponseMapInfoMap::getName() const
{
    return m_Name;
}

void ResponseMapInfoMap::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ResponseMapInfoMap::nameIsSet() const
{
    return m_NameIsSet;
}

void ResponseMapInfoMap::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<ResponseMapInfoFeatures> ResponseMapInfoMap::getFeatures() const
{
    return m_Features;
}

void ResponseMapInfoMap::setFeatures(const std::shared_ptr<ResponseMapInfoFeatures>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool ResponseMapInfoMap::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void ResponseMapInfoMap::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
}
}
}
}


