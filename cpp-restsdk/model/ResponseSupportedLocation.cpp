/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseSupportedLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseSupportedLocation::ResponseSupportedLocation()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Map_name = utility::conversions::to_string_t("");
    m_Map_nameIsSet = false;
}

ResponseSupportedLocation::~ResponseSupportedLocation()
{
}

void ResponseSupportedLocation::validate()
{
    // TODO: implement validation
}

web::json::value ResponseSupportedLocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Map_nameIsSet)
    {
        val[utility::conversions::to_string_t("map_name")] = ModelBase::toJson(m_Map_name);
    }

    return val;
}

bool ResponseSupportedLocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("map_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("map_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_map_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_map_name);
            setMapName(refVal_map_name);
        }
    }
    return ok;
}

void ResponseSupportedLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Map_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("map_name"), m_Map_name));
    }
}

bool ResponseSupportedLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("map_name")))
    {
        utility::string_t refVal_map_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("map_name")), refVal_map_name );
        setMapName(refVal_map_name);
    }
    return ok;
}

utility::string_t ResponseSupportedLocation::getId() const
{
    return m_Id;
}

void ResponseSupportedLocation::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ResponseSupportedLocation::idIsSet() const
{
    return m_IdIsSet;
}

void ResponseSupportedLocation::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ResponseSupportedLocation::getMapName() const
{
    return m_Map_name;
}

void ResponseSupportedLocation::setMapName(const utility::string_t& value)
{
    m_Map_name = value;
    m_Map_nameIsSet = true;
}

bool ResponseSupportedLocation::mapNameIsSet() const
{
    return m_Map_nameIsSet;
}

void ResponseSupportedLocation::unsetMap_name()
{
    m_Map_nameIsSet = false;
}
}
}
}
}


