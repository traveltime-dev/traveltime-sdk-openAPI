/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseSupportedLocations.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseSupportedLocations::ResponseSupportedLocations()
{
    m_LocationsIsSet = false;
    m_Unsupported_locationsIsSet = false;
}

ResponseSupportedLocations::~ResponseSupportedLocations()
{
}

void ResponseSupportedLocations::validate()
{
    // TODO: implement validation
}

web::json::value ResponseSupportedLocations::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LocationsIsSet)
    {
        val[utility::conversions::to_string_t("locations")] = ModelBase::toJson(m_Locations);
    }
    if(m_Unsupported_locationsIsSet)
    {
        val[utility::conversions::to_string_t("unsupported_locations")] = ModelBase::toJson(m_Unsupported_locations);
    }

    return val;
}

bool ResponseSupportedLocations::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("locations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locations"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseSupportedLocation>> refVal_locations;
            ok &= ModelBase::fromJson(fieldValue, refVal_locations);
            setLocations(refVal_locations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unsupported_locations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unsupported_locations"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_unsupported_locations;
            ok &= ModelBase::fromJson(fieldValue, refVal_unsupported_locations);
            setUnsupportedLocations(refVal_unsupported_locations);
        }
    }
    return ok;
}

void ResponseSupportedLocations::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LocationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locations"), m_Locations));
    }
    if(m_Unsupported_locationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unsupported_locations"), m_Unsupported_locations));
    }
}

bool ResponseSupportedLocations::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("locations")))
    {
        std::vector<std::shared_ptr<ResponseSupportedLocation>> refVal_locations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locations")), refVal_locations );
        setLocations(refVal_locations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unsupported_locations")))
    {
        std::vector<utility::string_t> refVal_unsupported_locations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unsupported_locations")), refVal_unsupported_locations );
        setUnsupportedLocations(refVal_unsupported_locations);
    }
    return ok;
}

std::vector<std::shared_ptr<ResponseSupportedLocation>>& ResponseSupportedLocations::getLocations()
{
    return m_Locations;
}

void ResponseSupportedLocations::setLocations(const std::vector<std::shared_ptr<ResponseSupportedLocation>>& value)
{
    m_Locations = value;
    m_LocationsIsSet = true;
}

bool ResponseSupportedLocations::locationsIsSet() const
{
    return m_LocationsIsSet;
}

void ResponseSupportedLocations::unsetLocations()
{
    m_LocationsIsSet = false;
}
std::vector<utility::string_t>& ResponseSupportedLocations::getUnsupportedLocations()
{
    return m_Unsupported_locations;
}

void ResponseSupportedLocations::setUnsupportedLocations(const std::vector<utility::string_t>& value)
{
    m_Unsupported_locations = value;
    m_Unsupported_locationsIsSet = true;
}

bool ResponseSupportedLocations::unsupportedLocationsIsSet() const
{
    return m_Unsupported_locationsIsSet;
}

void ResponseSupportedLocations::unsetUnsupported_locations()
{
    m_Unsupported_locationsIsSet = false;
}
}
}
}
}


