/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeFilterResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseTimeFilterResult::ResponseTimeFilterResult()
{
    m_Search_id = utility::conversions::to_string_t("");
    m_Search_idIsSet = false;
    m_LocationsIsSet = false;
    m_UnreachableIsSet = false;
}

ResponseTimeFilterResult::~ResponseTimeFilterResult()
{
}

void ResponseTimeFilterResult::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeFilterResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Search_idIsSet)
    {
        val[utility::conversions::to_string_t("search_id")] = ModelBase::toJson(m_Search_id);
    }
    if(m_LocationsIsSet)
    {
        val[utility::conversions::to_string_t("locations")] = ModelBase::toJson(m_Locations);
    }
    if(m_UnreachableIsSet)
    {
        val[utility::conversions::to_string_t("unreachable")] = ModelBase::toJson(m_Unreachable);
    }

    return val;
}

bool ResponseTimeFilterResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("search_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("search_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_search_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_search_id);
            setSearchId(refVal_search_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locations"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseTimeFilterLocation>> refVal_locations;
            ok &= ModelBase::fromJson(fieldValue, refVal_locations);
            setLocations(refVal_locations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unreachable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unreachable"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_unreachable;
            ok &= ModelBase::fromJson(fieldValue, refVal_unreachable);
            setUnreachable(refVal_unreachable);
        }
    }
    return ok;
}

void ResponseTimeFilterResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Search_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("search_id"), m_Search_id));
    }
    if(m_LocationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locations"), m_Locations));
    }
    if(m_UnreachableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unreachable"), m_Unreachable));
    }
}

bool ResponseTimeFilterResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("search_id")))
    {
        utility::string_t refVal_search_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("search_id")), refVal_search_id );
        setSearchId(refVal_search_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locations")))
    {
        std::vector<std::shared_ptr<ResponseTimeFilterLocation>> refVal_locations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locations")), refVal_locations );
        setLocations(refVal_locations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unreachable")))
    {
        std::vector<utility::string_t> refVal_unreachable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unreachable")), refVal_unreachable );
        setUnreachable(refVal_unreachable);
    }
    return ok;
}

utility::string_t ResponseTimeFilterResult::getSearchId() const
{
    return m_Search_id;
}

void ResponseTimeFilterResult::setSearchId(const utility::string_t& value)
{
    m_Search_id = value;
    m_Search_idIsSet = true;
}

bool ResponseTimeFilterResult::searchIdIsSet() const
{
    return m_Search_idIsSet;
}

void ResponseTimeFilterResult::unsetSearch_id()
{
    m_Search_idIsSet = false;
}
std::vector<std::shared_ptr<ResponseTimeFilterLocation>>& ResponseTimeFilterResult::getLocations()
{
    return m_Locations;
}

void ResponseTimeFilterResult::setLocations(const std::vector<std::shared_ptr<ResponseTimeFilterLocation>>& value)
{
    m_Locations = value;
    m_LocationsIsSet = true;
}

bool ResponseTimeFilterResult::locationsIsSet() const
{
    return m_LocationsIsSet;
}

void ResponseTimeFilterResult::unsetLocations()
{
    m_LocationsIsSet = false;
}
std::vector<utility::string_t>& ResponseTimeFilterResult::getUnreachable()
{
    return m_Unreachable;
}

void ResponseTimeFilterResult::setUnreachable(const std::vector<utility::string_t>& value)
{
    m_Unreachable = value;
    m_UnreachableIsSet = true;
}

bool ResponseTimeFilterResult::unreachableIsSet() const
{
    return m_UnreachableIsSet;
}

void ResponseTimeFilterResult::unsetUnreachable()
{
    m_UnreachableIsSet = false;
}
}
}
}
}


