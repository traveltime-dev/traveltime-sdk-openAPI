/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMapBoundingBoxesResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseTimeMapBoundingBoxesResult::ResponseTimeMapBoundingBoxesResult()
{
    m_Search_id = utility::conversions::to_string_t("");
    m_Search_idIsSet = false;
    m_Bounding_boxesIsSet = false;
    m_PropertiesIsSet = false;
}

ResponseTimeMapBoundingBoxesResult::~ResponseTimeMapBoundingBoxesResult()
{
}

void ResponseTimeMapBoundingBoxesResult::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeMapBoundingBoxesResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Search_idIsSet)
    {
        val[utility::conversions::to_string_t("search_id")] = ModelBase::toJson(m_Search_id);
    }
    if(m_Bounding_boxesIsSet)
    {
        val[utility::conversions::to_string_t("bounding_boxes")] = ModelBase::toJson(m_Bounding_boxes);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }

    return val;
}

bool ResponseTimeMapBoundingBoxesResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("search_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("search_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_search_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_search_id);
            setSearchId(refVal_search_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounding_boxes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounding_boxes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResponseBoundingBox>> refVal_bounding_boxes;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounding_boxes);
            setBoundingBoxes(refVal_bounding_boxes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseTimeMapProperties> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    return ok;
}

void ResponseTimeMapBoundingBoxesResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Search_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("search_id"), m_Search_id));
    }
    if(m_Bounding_boxesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounding_boxes"), m_Bounding_boxes));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
}

bool ResponseTimeMapBoundingBoxesResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("search_id")))
    {
        utility::string_t refVal_search_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("search_id")), refVal_search_id );
        setSearchId(refVal_search_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounding_boxes")))
    {
        std::vector<std::shared_ptr<ResponseBoundingBox>> refVal_bounding_boxes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounding_boxes")), refVal_bounding_boxes );
        setBoundingBoxes(refVal_bounding_boxes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::shared_ptr<ResponseTimeMapProperties> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    return ok;
}

utility::string_t ResponseTimeMapBoundingBoxesResult::getSearchId() const
{
    return m_Search_id;
}

void ResponseTimeMapBoundingBoxesResult::setSearchId(const utility::string_t& value)
{
    m_Search_id = value;
    m_Search_idIsSet = true;
}

bool ResponseTimeMapBoundingBoxesResult::searchIdIsSet() const
{
    return m_Search_idIsSet;
}

void ResponseTimeMapBoundingBoxesResult::unsetSearch_id()
{
    m_Search_idIsSet = false;
}
std::vector<std::shared_ptr<ResponseBoundingBox>>& ResponseTimeMapBoundingBoxesResult::getBoundingBoxes()
{
    return m_Bounding_boxes;
}

void ResponseTimeMapBoundingBoxesResult::setBoundingBoxes(const std::vector<std::shared_ptr<ResponseBoundingBox>>& value)
{
    m_Bounding_boxes = value;
    m_Bounding_boxesIsSet = true;
}

bool ResponseTimeMapBoundingBoxesResult::boundingBoxesIsSet() const
{
    return m_Bounding_boxesIsSet;
}

void ResponseTimeMapBoundingBoxesResult::unsetBounding_boxes()
{
    m_Bounding_boxesIsSet = false;
}
std::shared_ptr<ResponseTimeMapProperties> ResponseTimeMapBoundingBoxesResult::getProperties() const
{
    return m_Properties;
}

void ResponseTimeMapBoundingBoxesResult::setProperties(const std::shared_ptr<ResponseTimeMapProperties>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool ResponseTimeMapBoundingBoxesResult::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void ResponseTimeMapBoundingBoxesResult::unsetProperties()
{
    m_PropertiesIsSet = false;
}
}
}
}
}


