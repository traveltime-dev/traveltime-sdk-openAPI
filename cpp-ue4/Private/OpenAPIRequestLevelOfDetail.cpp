/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRequestLevelOfDetail.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

inline FString ToString(const OpenAPIRequestLevelOfDetail::ScaleTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRequestLevelOfDetail::ScaleTypeEnum::Simple:
		return TEXT("simple");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRequestLevelOfDetail::ScaleTypeEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPIRequestLevelOfDetail::EnumToString(const OpenAPIRequestLevelOfDetail::ScaleTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRequestLevelOfDetail::ScaleTypeEnum& Value)
{
	static TMap<FString, OpenAPIRequestLevelOfDetail::ScaleTypeEnum> StringToEnum = { 
		{ TEXT("simple"), OpenAPIRequestLevelOfDetail::ScaleTypeEnum::Simple }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRequestLevelOfDetail::EnumFromString(const FString& EnumAsString, OpenAPIRequestLevelOfDetail::ScaleTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIRequestLevelOfDetail::ScaleTypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRequestLevelOfDetail::ScaleTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRequestLevelOfDetail::ScaleTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIRequestLevelOfDetail::LevelEnum& Value)
{
	switch (Value)
	{
	case OpenAPIRequestLevelOfDetail::LevelEnum::Lowest:
		return TEXT("lowest");
	case OpenAPIRequestLevelOfDetail::LevelEnum::Low:
		return TEXT("low");
	case OpenAPIRequestLevelOfDetail::LevelEnum::Medium:
		return TEXT("medium");
	case OpenAPIRequestLevelOfDetail::LevelEnum::High:
		return TEXT("high");
	case OpenAPIRequestLevelOfDetail::LevelEnum::Highest:
		return TEXT("highest");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRequestLevelOfDetail::LevelEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPIRequestLevelOfDetail::EnumToString(const OpenAPIRequestLevelOfDetail::LevelEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIRequestLevelOfDetail::LevelEnum& Value)
{
	static TMap<FString, OpenAPIRequestLevelOfDetail::LevelEnum> StringToEnum = { 
		{ TEXT("lowest"), OpenAPIRequestLevelOfDetail::LevelEnum::Lowest },
		{ TEXT("low"), OpenAPIRequestLevelOfDetail::LevelEnum::Low },
		{ TEXT("medium"), OpenAPIRequestLevelOfDetail::LevelEnum::Medium },
		{ TEXT("high"), OpenAPIRequestLevelOfDetail::LevelEnum::High },
		{ TEXT("highest"), OpenAPIRequestLevelOfDetail::LevelEnum::Highest }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIRequestLevelOfDetail::EnumFromString(const FString& EnumAsString, OpenAPIRequestLevelOfDetail::LevelEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIRequestLevelOfDetail::LevelEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRequestLevelOfDetail::LevelEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRequestLevelOfDetail::LevelEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIRequestLevelOfDetail::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("scale_type")); WriteJsonValue(Writer, ScaleType);
	Writer->WriteIdentifierPrefix(TEXT("level")); WriteJsonValue(Writer, Level);
	Writer->WriteObjectEnd();
}

bool OpenAPIRequestLevelOfDetail::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("scale_type"), ScaleType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("level"), Level);

	return ParseSuccess;
}

}
