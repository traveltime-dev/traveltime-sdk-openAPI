/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRequestTimeFilterFastProperty.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

inline FString ToString(const OpenAPIRequestTimeFilterFastProperty::Values& Value)
{
	switch (Value)
	{
	case OpenAPIRequestTimeFilterFastProperty::Values::TravelTime:
		return TEXT("travel_time");
	case OpenAPIRequestTimeFilterFastProperty::Values::Fares:
		return TEXT("fares");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIRequestTimeFilterFastProperty::Values Value (%d)"), (int)Value);	
	return TEXT("");
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIRequestTimeFilterFastProperty::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIRequestTimeFilterFastProperty::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIRequestTimeFilterFastProperty::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		static TMap<FString, OpenAPIRequestTimeFilterFastProperty::Values> StringToEnum = { 
			{ TEXT("travel_time"), OpenAPIRequestTimeFilterFastProperty::Values::TravelTime },
			{ TEXT("fares"), OpenAPIRequestTimeFilterFastProperty::Values::Fares }, };

		const auto Found = StringToEnum.Find(TmpValue);
		if(Found)
		{
			Value = *Found;
			return true;
		}
	}
	return false;
}

void OpenAPIRequestTimeFilterFastProperty::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIRequestTimeFilterFastProperty::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
