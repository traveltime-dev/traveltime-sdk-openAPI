/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingReverseSearch(double lat, double lng, string withinCountry = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingReverseSearchWithHttpInfo(double lat, double lng, string withinCountry = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingSearch(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingSearchWithHttpInfo(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        ResponseMapInfo MapInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        ApiResponse<ResponseMapInfo> MapInfoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        ResponseRoutes Routes(RequestRoutes requestRoutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        ApiResponse<ResponseRoutes> RoutesWithHttpInfo(RequestRoutes requestRoutes);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        ResponseSupportedLocations SupportedLocations(RequestSupportedLocations requestSupportedLocations);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        ApiResponse<ResponseSupportedLocations> SupportedLocationsWithHttpInfo(RequestSupportedLocations requestSupportedLocations);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        ResponseTimeFilter TimeFilter(RequestTimeFilter requestTimeFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        ApiResponse<ResponseTimeFilter> TimeFilterWithHttpInfo(RequestTimeFilter requestTimeFilter);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        ResponseTimeFilterFast TimeFilterFast(RequestTimeFilterFast requestTimeFilterFast);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        ApiResponse<ResponseTimeFilterFast> TimeFilterFastWithHttpInfo(RequestTimeFilterFast requestTimeFilterFast);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        ApiResponse<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsWithHttpInfo(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        ApiResponse<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsWithHttpInfo(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        ResponseTimeFilterPostcodes TimeFilterPostcodes(RequestTimeFilterPostcodes requestTimeFilterPostcodes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        ApiResponse<ResponseTimeFilterPostcodes> TimeFilterPostcodesWithHttpInfo(RequestTimeFilterPostcodes requestTimeFilterPostcodes);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        ResponseTimeMap TimeMap(RequestTimeMap requestTimeMap);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        ApiResponse<ResponseTimeMap> TimeMapWithHttpInfo(RequestTimeMap requestTimeMap);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync(double lat, double lng, string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingReverseSearchWithHttpInfoAsync(double lat, double lng, string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingSearchWithHttpInfoAsync(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseMapInfo</returns>
        System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseMapInfo>> MapInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoutes</returns>
        System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync(RequestRoutes requestRoutes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRoutes>> RoutesWithHttpInfoAsync(RequestRoutes requestRoutes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync(RequestSupportedLocations requestSupportedLocations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSupportedLocations>> SupportedLocationsWithHttpInfoAsync(RequestSupportedLocations requestSupportedLocations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilter</returns>
        System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync(RequestTimeFilter requestTimeFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilter>> TimeFilterWithHttpInfoAsync(RequestTimeFilter requestTimeFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync(RequestTimeFilterFast requestTimeFilterFast, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterFast>> TimeFilterFastWithHttpInfoAsync(RequestTimeFilterFast requestTimeFilterFast, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsWithHttpInfoAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsWithHttpInfoAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesWithHttpInfoAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeMap</returns>
        System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync(RequestTimeMap requestTimeMap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeMap>> TimeMapWithHttpInfoAsync(RequestTimeMap requestTimeMap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingReverseSearch(double lat, double lng, string withinCountry = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> localVarResponse = GeocodingReverseSearchWithHttpInfo(lat, lng, withinCountry);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> GeocodingReverseSearchWithHttpInfo(double lat, double lng, string withinCountry = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            if (withinCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseGeocoding>("/v4/geocoding/reverse", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeocodingReverseSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync(double lat, double lng, string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingReverseSearchWithHttpInfoAsync(lat, lng, withinCountry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding>> GeocodingReverseSearchWithHttpInfoAsync(double lat, double lng, string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            if (withinCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseGeocoding>("/v4/geocoding/reverse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeocodingReverseSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingSearch(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> localVarResponse = GeocodingSearchWithHttpInfo(query, focusLat, focusLng, withinCountry);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> GeocodingSearchWithHttpInfo(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (focusLat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat));
            }
            if (focusLng != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng));
            }
            if (withinCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseGeocoding>("/v4/geocoding/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeocodingSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingSearchWithHttpInfoAsync(query, focusLat, focusLng, withinCountry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseGeocoding>> GeocodingSearchWithHttpInfoAsync(string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (focusLat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat));
            }
            if (focusLng != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng));
            }
            if (withinCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseGeocoding>("/v4/geocoding/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeocodingSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        public ResponseMapInfo MapInfo()
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseMapInfo> localVarResponse = MapInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseMapInfo> MapInfoWithHttpInfo()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseMapInfo>("/v4/map-info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MapInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseMapInfo</returns>
        public async System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseMapInfo> localVarResponse = await MapInfoWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseMapInfo>> MapInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseMapInfo>("/v4/map-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MapInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        public ResponseRoutes Routes(RequestRoutes requestRoutes)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseRoutes> localVarResponse = RoutesWithHttpInfo(requestRoutes);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseRoutes> RoutesWithHttpInfo(RequestRoutes requestRoutes)
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestRoutes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseRoutes>("/v4/routes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Routes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseRoutes</returns>
        public async System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync(RequestRoutes requestRoutes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseRoutes> localVarResponse = await RoutesWithHttpInfoAsync(requestRoutes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseRoutes>> RoutesWithHttpInfoAsync(RequestRoutes requestRoutes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestRoutes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseRoutes>("/v4/routes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Routes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        public ResponseSupportedLocations SupportedLocations(RequestSupportedLocations requestSupportedLocations)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseSupportedLocations> localVarResponse = SupportedLocationsWithHttpInfo(requestSupportedLocations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseSupportedLocations> SupportedLocationsWithHttpInfo(RequestSupportedLocations requestSupportedLocations)
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestSupportedLocations;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSupportedLocations>("/v4/supported-locations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupportedLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        public async System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync(RequestSupportedLocations requestSupportedLocations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseSupportedLocations> localVarResponse = await SupportedLocationsWithHttpInfoAsync(requestSupportedLocations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseSupportedLocations>> SupportedLocationsWithHttpInfoAsync(RequestSupportedLocations requestSupportedLocations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestSupportedLocations;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSupportedLocations>("/v4/supported-locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupportedLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        public ResponseTimeFilter TimeFilter(RequestTimeFilter requestTimeFilter)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilter> localVarResponse = TimeFilterWithHttpInfo(requestTimeFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilter> TimeFilterWithHttpInfo(RequestTimeFilter requestTimeFilter)
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilter;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeFilter>("/v4/time-filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilter</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync(RequestTimeFilter requestTimeFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilter> localVarResponse = await TimeFilterWithHttpInfoAsync(requestTimeFilter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilter>> TimeFilterWithHttpInfoAsync(RequestTimeFilter requestTimeFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilter;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeFilter>("/v4/time-filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        public ResponseTimeFilterFast TimeFilterFast(RequestTimeFilterFast requestTimeFilterFast)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterFast> localVarResponse = TimeFilterFastWithHttpInfo(requestTimeFilterFast);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterFast> TimeFilterFastWithHttpInfo(RequestTimeFilterFast requestTimeFilterFast)
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterFast;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeFilterFast>("/v4/time-filter/fast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterFast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync(RequestTimeFilterFast requestTimeFilterFast, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterFast> localVarResponse = await TimeFilterFastWithHttpInfoAsync(requestTimeFilterFast, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterFast>> TimeFilterFastWithHttpInfoAsync(RequestTimeFilterFast requestTimeFilterFast, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterFast;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeFilterFast>("/v4/time-filter/fast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterFast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        public ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = TimeFilterPostcodeDistrictsWithHttpInfo(requestTimeFilterPostcodeDistricts);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsWithHttpInfo(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodeDistricts;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeFilterPostcodeDistricts>("/v4/time-filter/postcode-districts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodeDistricts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = await TimeFilterPostcodeDistrictsWithHttpInfoAsync(requestTimeFilterPostcodeDistricts, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsWithHttpInfoAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodeDistricts;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodeDistricts>("/v4/time-filter/postcode-districts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodeDistricts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        public ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = TimeFilterPostcodeSectorsWithHttpInfo(requestTimeFilterPostcodeSectors);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsWithHttpInfo(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodeSectors;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeFilterPostcodeSectors>("/v4/time-filter/postcode-sectors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodeSectors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = await TimeFilterPostcodeSectorsWithHttpInfoAsync(requestTimeFilterPostcodeSectors, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsWithHttpInfoAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodeSectors;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodeSectors>("/v4/time-filter/postcode-sectors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodeSectors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        public ResponseTimeFilterPostcodes TimeFilterPostcodes(RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = TimeFilterPostcodesWithHttpInfo(requestTimeFilterPostcodes);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodes> TimeFilterPostcodesWithHttpInfo(RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeFilterPostcodes>("/v4/time-filter/postcodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = await TimeFilterPostcodesWithHttpInfoAsync(requestTimeFilterPostcodes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesWithHttpInfoAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeFilterPostcodes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodes>("/v4/time-filter/postcodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeFilterPostcodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        public ResponseTimeMap TimeMap(RequestTimeMap requestTimeMap)
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeMap> localVarResponse = TimeMapWithHttpInfo(requestTimeMap);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResponseTimeMap> TimeMapWithHttpInfo(RequestTimeMap requestTimeMap)
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeMap;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseTimeMap>("/v4/time-map", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeMap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseTimeMap</returns>
        public async System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync(RequestTimeMap requestTimeMap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResponseTimeMap> localVarResponse = await TimeMapWithHttpInfoAsync(requestTimeMap, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResponseTimeMap>> TimeMapWithHttpInfoAsync(RequestTimeMap requestTimeMap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestTimeMap;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseTimeMap>("/v4/time-map", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeMap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
