/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseBoundingBox
    /// </summary>
    [DataContract(Name = "ResponseBoundingBox")]
    public partial class ResponseBoundingBox : IEquatable<ResponseBoundingBox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseBoundingBox" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseBoundingBox() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseBoundingBox" /> class.
        /// </summary>
        /// <param name="envelope">envelope (required).</param>
        /// <param name="boxes">boxes (required).</param>
        public ResponseBoundingBox(ResponseBox envelope = default(ResponseBox), List<ResponseBox> boxes = default(List<ResponseBox>))
        {
            // to ensure "envelope" is required (not null)
            this.Envelope = envelope ?? throw new ArgumentNullException("envelope is a required property for ResponseBoundingBox and cannot be null");
            // to ensure "boxes" is required (not null)
            this.Boxes = boxes ?? throw new ArgumentNullException("boxes is a required property for ResponseBoundingBox and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Envelope
        /// </summary>
        [DataMember(Name = "envelope", IsRequired = true, EmitDefaultValue = false)]
        public ResponseBox Envelope { get; set; }

        /// <summary>
        /// Gets or Sets Boxes
        /// </summary>
        [DataMember(Name = "boxes", IsRequired = true, EmitDefaultValue = false)]
        public List<ResponseBox> Boxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseBoundingBox {\n");
            sb.Append("  Envelope: ").Append(Envelope).Append("\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseBoundingBox);
        }

        /// <summary>
        /// Returns true if ResponseBoundingBox instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseBoundingBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseBoundingBox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Envelope == input.Envelope ||
                    (this.Envelope != null &&
                    this.Envelope.Equals(input.Envelope))
                ) && 
                (
                    this.Boxes == input.Boxes ||
                    this.Boxes != null &&
                    input.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Envelope != null)
                    hashCode = hashCode * 59 + this.Envelope.GetHashCode();
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
