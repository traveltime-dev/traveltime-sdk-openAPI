/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseRoute
    /// </summary>
    [DataContract(Name = "ResponseRoute")]
    public partial class ResponseRoute : IEquatable<ResponseRoute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseRoute" /> class.
        /// </summary>
        /// <param name="departureTime">departureTime (required).</param>
        /// <param name="arrivalTime">arrivalTime (required).</param>
        /// <param name="parts">parts (required).</param>
        public ResponseRoute(DateTime departureTime = default(DateTime), DateTime arrivalTime = default(DateTime), List<ResponseRoutePart> parts = default(List<ResponseRoutePart>))
        {
            this.DepartureTime = departureTime;
            this.ArrivalTime = arrivalTime;
            // to ensure "parts" is required (not null)
            this.Parts = parts ?? throw new ArgumentNullException("parts is a required property for ResponseRoute and cannot be null");
        }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name = "departure_time", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalTime
        /// </summary>
        [DataMember(Name = "arrival_time", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name = "parts", IsRequired = true, EmitDefaultValue = false)]
        public List<ResponseRoutePart> Parts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseRoute {\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseRoute);
        }

        /// <summary>
        /// Returns true if ResponseRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.Parts == input.Parts ||
                    this.Parts != null &&
                    input.Parts != null &&
                    this.Parts.SequenceEqual(input.Parts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.Parts != null)
                    hashCode = hashCode * 59 + this.Parts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
