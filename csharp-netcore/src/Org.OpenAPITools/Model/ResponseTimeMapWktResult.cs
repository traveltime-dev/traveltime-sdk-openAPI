/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseTimeMapWktResult
    /// </summary>
    [DataContract(Name = "ResponseTimeMapWktResult")]
    public partial class ResponseTimeMapWktResult : IEquatable<ResponseTimeMapWktResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseTimeMapWktResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseTimeMapWktResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseTimeMapWktResult" /> class.
        /// </summary>
        /// <param name="searchId">searchId (required).</param>
        /// <param name="shape">shape (required).</param>
        /// <param name="properties">properties (required).</param>
        public ResponseTimeMapWktResult(string searchId = default(string), string shape = default(string), ResponseTimeMapProperties properties = default(ResponseTimeMapProperties))
        {
            // to ensure "searchId" is required (not null)
            this.SearchId = searchId ?? throw new ArgumentNullException("searchId is a required property for ResponseTimeMapWktResult and cannot be null");
            // to ensure "shape" is required (not null)
            this.Shape = shape ?? throw new ArgumentNullException("shape is a required property for ResponseTimeMapWktResult and cannot be null");
            // to ensure "properties" is required (not null)
            this.Properties = properties ?? throw new ArgumentNullException("properties is a required property for ResponseTimeMapWktResult and cannot be null");
        }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name = "search_id", IsRequired = true, EmitDefaultValue = false)]
        public string SearchId { get; set; }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", IsRequired = true, EmitDefaultValue = false)]
        public string Shape { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = false)]
        public ResponseTimeMapProperties Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseTimeMapWktResult {\n");
            sb.Append("  SearchId: ").Append(SearchId).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseTimeMapWktResult);
        }

        /// <summary>
        /// Returns true if ResponseTimeMapWktResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseTimeMapWktResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseTimeMapWktResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
