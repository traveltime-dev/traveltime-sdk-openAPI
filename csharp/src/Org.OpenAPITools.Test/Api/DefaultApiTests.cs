/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DefaultApi
            //Assert.IsInstanceOf(typeof(DefaultApi), instance);
        }

        
        /// <summary>
        /// Test GeocodingReverseSearch
        /// </summary>
        [Test]
        public void GeocodingReverseSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double lat = null;
            //double lng = null;
            //string withinCountry = null;
            //var response = instance.GeocodingReverseSearch(lat, lng, withinCountry);
            //Assert.IsInstanceOf(typeof(ResponseGeocoding), response, "response is ResponseGeocoding");
        }
        
        /// <summary>
        /// Test GeocodingSearch
        /// </summary>
        [Test]
        public void GeocodingSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //double? focusLat = null;
            //double? focusLng = null;
            //string withinCountry = null;
            //var response = instance.GeocodingSearch(query, focusLat, focusLng, withinCountry);
            //Assert.IsInstanceOf(typeof(ResponseGeocoding), response, "response is ResponseGeocoding");
        }
        
        /// <summary>
        /// Test MapInfo
        /// </summary>
        [Test]
        public void MapInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MapInfo();
            //Assert.IsInstanceOf(typeof(ResponseMapInfo), response, "response is ResponseMapInfo");
        }
        
        /// <summary>
        /// Test Routes
        /// </summary>
        [Test]
        public void RoutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestRoutes requestRoutes = null;
            //var response = instance.Routes(requestRoutes);
            //Assert.IsInstanceOf(typeof(ResponseRoutes), response, "response is ResponseRoutes");
        }
        
        /// <summary>
        /// Test SupportedLocations
        /// </summary>
        [Test]
        public void SupportedLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestSupportedLocations requestSupportedLocations = null;
            //var response = instance.SupportedLocations(requestSupportedLocations);
            //Assert.IsInstanceOf(typeof(ResponseSupportedLocations), response, "response is ResponseSupportedLocations");
        }
        
        /// <summary>
        /// Test TimeFilter
        /// </summary>
        [Test]
        public void TimeFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeFilter requestTimeFilter = null;
            //var response = instance.TimeFilter(requestTimeFilter);
            //Assert.IsInstanceOf(typeof(ResponseTimeFilter), response, "response is ResponseTimeFilter");
        }
        
        /// <summary>
        /// Test TimeFilterFast
        /// </summary>
        [Test]
        public void TimeFilterFastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeFilterFast requestTimeFilterFast = null;
            //var response = instance.TimeFilterFast(requestTimeFilterFast);
            //Assert.IsInstanceOf(typeof(ResponseTimeFilterFast), response, "response is ResponseTimeFilterFast");
        }
        
        /// <summary>
        /// Test TimeFilterPostcodeDistricts
        /// </summary>
        [Test]
        public void TimeFilterPostcodeDistrictsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts = null;
            //var response = instance.TimeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts);
            //Assert.IsInstanceOf(typeof(ResponseTimeFilterPostcodeDistricts), response, "response is ResponseTimeFilterPostcodeDistricts");
        }
        
        /// <summary>
        /// Test TimeFilterPostcodeSectors
        /// </summary>
        [Test]
        public void TimeFilterPostcodeSectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors = null;
            //var response = instance.TimeFilterPostcodeSectors(requestTimeFilterPostcodeSectors);
            //Assert.IsInstanceOf(typeof(ResponseTimeFilterPostcodeSectors), response, "response is ResponseTimeFilterPostcodeSectors");
        }
        
        /// <summary>
        /// Test TimeFilterPostcodes
        /// </summary>
        [Test]
        public void TimeFilterPostcodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeFilterPostcodes requestTimeFilterPostcodes = null;
            //var response = instance.TimeFilterPostcodes(requestTimeFilterPostcodes);
            //Assert.IsInstanceOf(typeof(ResponseTimeFilterPostcodes), response, "response is ResponseTimeFilterPostcodes");
        }
        
        /// <summary>
        /// Test TimeMap
        /// </summary>
        [Test]
        public void TimeMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestTimeMap requestTimeMap = null;
            //var response = instance.TimeMap(requestTimeMap);
            //Assert.IsInstanceOf(typeof(ResponseTimeMap), response, "response is ResponseTimeMap");
        }
        
    }

}
