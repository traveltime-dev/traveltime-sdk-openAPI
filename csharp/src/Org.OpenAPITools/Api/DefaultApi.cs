/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingReverseSearch (double lat, double lng, string withinCountry = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingReverseSearchWithHttpInfo (double lat, double lng, string withinCountry = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingSearch (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingSearchWithHttpInfo (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        ResponseMapInfo MapInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        ApiResponse<ResponseMapInfo> MapInfoWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        ResponseRoutes Routes (RequestRoutes requestRoutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        ApiResponse<ResponseRoutes> RoutesWithHttpInfo (RequestRoutes requestRoutes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        ResponseSupportedLocations SupportedLocations (RequestSupportedLocations requestSupportedLocations);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        ApiResponse<ResponseSupportedLocations> SupportedLocationsWithHttpInfo (RequestSupportedLocations requestSupportedLocations);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        ResponseTimeFilter TimeFilter (RequestTimeFilter requestTimeFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        ApiResponse<ResponseTimeFilter> TimeFilterWithHttpInfo (RequestTimeFilter requestTimeFilter);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        ResponseTimeFilterFast TimeFilterFast (RequestTimeFilterFast requestTimeFilterFast);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        ApiResponse<ResponseTimeFilterFast> TimeFilterFastWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        ApiResponse<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        ApiResponse<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        ResponseTimeFilterPostcodes TimeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        ApiResponse<ResponseTimeFilterPostcodes> TimeFilterPostcodesWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        ResponseTimeMap TimeMap (RequestTimeMap requestTimeMap);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        ApiResponse<ResponseTimeMap> TimeMapWithHttpInfo (RequestTimeMap requestTimeMap);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync (double lat, double lng, string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingReverseSearchWithHttpInfoAsync (double lat, double lng, string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingSearchWithHttpInfoAsync (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseMapInfo</returns>
        System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseMapInfo>> MapInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseRoutes</returns>
        System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync (RequestRoutes requestRoutes, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRoutes>> RoutesWithHttpInfoAsync (RequestRoutes requestRoutes, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync (RequestSupportedLocations requestSupportedLocations, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSupportedLocations>> SupportedLocationsWithHttpInfoAsync (RequestSupportedLocations requestSupportedLocations, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilter</returns>
        System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync (RequestTimeFilter requestTimeFilter, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilter>> TimeFilterWithHttpInfoAsync (RequestTimeFilter requestTimeFilter, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync (RequestTimeFilterFast requestTimeFilterFast, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterFast>> TimeFilterFastWithHttpInfoAsync (RequestTimeFilterFast requestTimeFilterFast, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsWithHttpInfoAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsWithHttpInfoAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesWithHttpInfoAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeMap</returns>
        System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync (RequestTimeMap requestTimeMap, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeMap>> TimeMapWithHttpInfoAsync (RequestTimeMap requestTimeMap, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingReverseSearch (double lat, double lng, string withinCountry = default(string))
        {
             ApiResponse<ResponseGeocoding> localVarResponse = GeocodingReverseSearchWithHttpInfo(lat, lng, withinCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public ApiResponse<ResponseGeocoding> GeocodingReverseSearchWithHttpInfo (double lat, double lng, string withinCountry = default(string))
        {
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling DefaultApi->GeocodingReverseSearch");
            // verify the required parameter 'lng' is set
            if (lng == null)
                throw new ApiException(400, "Missing required parameter 'lng' when calling DefaultApi->GeocodingReverseSearch");

            var localVarPath = "/v4/geocoding/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lng != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lng", lng)); // query parameter
            if (withinCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "within.country", withinCountry)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodingReverseSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseGeocoding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocoding)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync (double lat, double lng, string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingReverseSearchWithHttpInfoAsync(lat, lng, withinCountry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat"></param>
        /// <param name="lng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingReverseSearchWithHttpInfoAsync (double lat, double lng, string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lat' is set
            if (lat == null)
                throw new ApiException(400, "Missing required parameter 'lat' when calling DefaultApi->GeocodingReverseSearch");
            // verify the required parameter 'lng' is set
            if (lng == null)
                throw new ApiException(400, "Missing required parameter 'lng' when calling DefaultApi->GeocodingReverseSearch");

            var localVarPath = "/v4/geocoding/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lat", lat)); // query parameter
            if (lng != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lng", lng)); // query parameter
            if (withinCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "within.country", withinCountry)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodingReverseSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseGeocoding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocoding)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingSearch (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string))
        {
             ApiResponse<ResponseGeocoding> localVarResponse = GeocodingSearchWithHttpInfo(query, focusLat, focusLng, withinCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public ApiResponse<ResponseGeocoding> GeocodingSearchWithHttpInfo (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");

            var localVarPath = "/v4/geocoding/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (focusLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "focus.lat", focusLat)); // query parameter
            if (focusLng != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "focus.lng", focusLng)); // query parameter
            if (withinCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "within.country", withinCountry)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodingSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseGeocoding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocoding)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingSearchWithHttpInfoAsync(query, focusLat, focusLng, withinCountry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingSearchWithHttpInfoAsync (string query, double? focusLat = default(double?), double? focusLng = default(double?), string withinCountry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");

            var localVarPath = "/v4/geocoding/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (focusLat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "focus.lat", focusLat)); // query parameter
            if (focusLng != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "focus.lng", focusLng)); // query parameter
            if (withinCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "within.country", withinCountry)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodingSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocoding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseGeocoding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocoding)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        public ResponseMapInfo MapInfo ()
        {
             ApiResponse<ResponseMapInfo> localVarResponse = MapInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        public ApiResponse<ResponseMapInfo> MapInfoWithHttpInfo ()
        {

            var localVarPath = "/v4/map-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MapInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseMapInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseMapInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseMapInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseMapInfo</returns>
        public async System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseMapInfo> localVarResponse = await MapInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseMapInfo>> MapInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v4/map-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MapInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseMapInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseMapInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseMapInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        public ResponseRoutes Routes (RequestRoutes requestRoutes)
        {
             ApiResponse<ResponseRoutes> localVarResponse = RoutesWithHttpInfo(requestRoutes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        public ApiResponse<ResponseRoutes> RoutesWithHttpInfo (RequestRoutes requestRoutes)
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");

            var localVarPath = "/v4/routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestRoutes != null && requestRoutes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestRoutes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestRoutes; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Routes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRoutes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseRoutes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRoutes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseRoutes</returns>
        public async System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync (RequestRoutes requestRoutes, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseRoutes> localVarResponse = await RoutesWithHttpInfoAsync(requestRoutes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRoutes>> RoutesWithHttpInfoAsync (RequestRoutes requestRoutes, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");

            var localVarPath = "/v4/routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestRoutes != null && requestRoutes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestRoutes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestRoutes; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Routes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRoutes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseRoutes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRoutes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        public ResponseSupportedLocations SupportedLocations (RequestSupportedLocations requestSupportedLocations)
        {
             ApiResponse<ResponseSupportedLocations> localVarResponse = SupportedLocationsWithHttpInfo(requestSupportedLocations);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        public ApiResponse<ResponseSupportedLocations> SupportedLocationsWithHttpInfo (RequestSupportedLocations requestSupportedLocations)
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");

            var localVarPath = "/v4/supported-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSupportedLocations != null && requestSupportedLocations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSupportedLocations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSupportedLocations; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSupportedLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseSupportedLocations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSupportedLocations)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        public async System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync (RequestSupportedLocations requestSupportedLocations, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseSupportedLocations> localVarResponse = await SupportedLocationsWithHttpInfoAsync(requestSupportedLocations, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSupportedLocations>> SupportedLocationsWithHttpInfoAsync (RequestSupportedLocations requestSupportedLocations, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");

            var localVarPath = "/v4/supported-locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSupportedLocations != null && requestSupportedLocations.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSupportedLocations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSupportedLocations; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSupportedLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseSupportedLocations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSupportedLocations)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        public ResponseTimeFilter TimeFilter (RequestTimeFilter requestTimeFilter)
        {
             ApiResponse<ResponseTimeFilter> localVarResponse = TimeFilterWithHttpInfo(requestTimeFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        public ApiResponse<ResponseTimeFilter> TimeFilterWithHttpInfo (RequestTimeFilter requestTimeFilter)
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");

            var localVarPath = "/v4/time-filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilter != null && requestTimeFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilter; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilter) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilter)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilter</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync (RequestTimeFilter requestTimeFilter, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeFilter> localVarResponse = await TimeFilterWithHttpInfoAsync(requestTimeFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilter>> TimeFilterWithHttpInfoAsync (RequestTimeFilter requestTimeFilter, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");

            var localVarPath = "/v4/time-filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilter != null && requestTimeFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilter; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilter) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilter)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        public ResponseTimeFilterFast TimeFilterFast (RequestTimeFilterFast requestTimeFilterFast)
        {
             ApiResponse<ResponseTimeFilterFast> localVarResponse = TimeFilterFastWithHttpInfo(requestTimeFilterFast);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        public ApiResponse<ResponseTimeFilterFast> TimeFilterFastWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast)
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");

            var localVarPath = "/v4/time-filter/fast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterFast != null && requestTimeFilterFast.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterFast); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterFast; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterFast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterFast>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterFast) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterFast)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync (RequestTimeFilterFast requestTimeFilterFast, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeFilterFast> localVarResponse = await TimeFilterFastWithHttpInfoAsync(requestTimeFilterFast, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterFast>> TimeFilterFastWithHttpInfoAsync (RequestTimeFilterFast requestTimeFilterFast, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");

            var localVarPath = "/v4/time-filter/fast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterFast != null && requestTimeFilterFast.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterFast); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterFast; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterFast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterFast>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterFast) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterFast)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        public ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
             ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = TimeFilterPostcodeDistrictsWithHttpInfo(requestTimeFilterPostcodeDistricts);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        public ApiResponse<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");

            var localVarPath = "/v4/time-filter/postcode-districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodeDistricts != null && requestTimeFilterPostcodeDistricts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodeDistricts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodeDistricts; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodeDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodeDistricts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodeDistricts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodeDistricts)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = await TimeFilterPostcodeDistrictsWithHttpInfoAsync(requestTimeFilterPostcodeDistricts, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsWithHttpInfoAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");

            var localVarPath = "/v4/time-filter/postcode-districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodeDistricts != null && requestTimeFilterPostcodeDistricts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodeDistricts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodeDistricts; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodeDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodeDistricts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodeDistricts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodeDistricts)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        public ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
             ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = TimeFilterPostcodeSectorsWithHttpInfo(requestTimeFilterPostcodeSectors);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        public ApiResponse<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");

            var localVarPath = "/v4/time-filter/postcode-sectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodeSectors != null && requestTimeFilterPostcodeSectors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodeSectors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodeSectors; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodeSectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodeSectors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodeSectors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodeSectors)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = await TimeFilterPostcodeSectorsWithHttpInfoAsync(requestTimeFilterPostcodeSectors, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsWithHttpInfoAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");

            var localVarPath = "/v4/time-filter/postcode-sectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodeSectors != null && requestTimeFilterPostcodeSectors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodeSectors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodeSectors; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodeSectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodeSectors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodeSectors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodeSectors)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        public ResponseTimeFilterPostcodes TimeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
             ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = TimeFilterPostcodesWithHttpInfo(requestTimeFilterPostcodes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        public ApiResponse<ResponseTimeFilterPostcodes> TimeFilterPostcodesWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");

            var localVarPath = "/v4/time-filter/postcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodes != null && requestTimeFilterPostcodes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodes; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = await TimeFilterPostcodesWithHttpInfoAsync(requestTimeFilterPostcodes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesWithHttpInfoAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");

            var localVarPath = "/v4/time-filter/postcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeFilterPostcodes != null && requestTimeFilterPostcodes.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeFilterPostcodes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeFilterPostcodes; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeFilterPostcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeFilterPostcodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeFilterPostcodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeFilterPostcodes)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        public ResponseTimeMap TimeMap (RequestTimeMap requestTimeMap)
        {
             ApiResponse<ResponseTimeMap> localVarResponse = TimeMapWithHttpInfo(requestTimeMap);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        public ApiResponse<ResponseTimeMap> TimeMapWithHttpInfo (RequestTimeMap requestTimeMap)
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");

            var localVarPath = "/v4/time-map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeMap != null && requestTimeMap.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeMap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeMap; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeMap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeMap) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeMap)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseTimeMap</returns>
        public async System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync (RequestTimeMap requestTimeMap, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseTimeMap> localVarResponse = await TimeMapWithHttpInfoAsync(requestTimeMap, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTimeMap>> TimeMapWithHttpInfoAsync (RequestTimeMap requestTimeMap, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");

            var localVarPath = "/v4/time-map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestTimeMap != null && requestTimeMap.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestTimeMap); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestTimeMap; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarHeaderParams["X-Api-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Key");
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                localVarHeaderParams["X-Application-Id"] = this.Configuration.GetApiKeyWithPrefix("X-Application-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTimeMap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTimeMap) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTimeMap)));
        }

    }
}
