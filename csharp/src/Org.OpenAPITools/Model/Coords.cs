/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Coords
    /// </summary>
    [DataContract]
    public partial class Coords :  IEquatable<Coords>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coords" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Coords() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coords" /> class.
        /// </summary>
        /// <param name="lat">lat (required).</param>
        /// <param name="lng">lng (required).</param>
        public Coords(double lat = default(double), double lng = default(double))
        {
            // to ensure "lat" is required (not null)
            if (lat == null)
            {
                throw new InvalidDataException("lat is a required property for Coords and cannot be null");
            }
            else
            {
                this.Lat = lat;
            }

            // to ensure "lng" is required (not null)
            if (lng == null)
            {
                throw new InvalidDataException("lng is a required property for Coords and cannot be null");
            }
            else
            {
                this.Lng = lng;
            }

        }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=true)]
        public double Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lng
        /// </summary>
        [DataMember(Name="lng", EmitDefaultValue=true)]
        public double Lng { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coords {\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lng: ").Append(Lng).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coords);
        }

        /// <summary>
        /// Returns true if Coords instances are equal
        /// </summary>
        /// <param name="input">Instance of Coords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coords input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lng == input.Lng ||
                    (this.Lng != null &&
                    this.Lng.Equals(input.Lng))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lng != null)
                    hashCode = hashCode * 59 + this.Lng.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
