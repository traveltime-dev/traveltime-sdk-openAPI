/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RequestLevelOfDetail
    /// </summary>
    [DataContract]
    public partial class RequestLevelOfDetail :  IEquatable<RequestLevelOfDetail>, IValidatableObject
    {
        /// <summary>
        /// Defines ScaleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScaleTypeEnum
        {
            /// <summary>
            /// Enum Simple for value: simple
            /// </summary>
            [EnumMember(Value = "simple")]
            Simple = 1

        }

        /// <summary>
        /// Gets or Sets ScaleType
        /// </summary>
        [DataMember(Name="scale_type", EmitDefaultValue=true)]
        public ScaleTypeEnum ScaleType { get; set; }
        /// <summary>
        /// Defines Level
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum Lowest for value: lowest
            /// </summary>
            [EnumMember(Value = "lowest")]
            Lowest = 1,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 4,

            /// <summary>
            /// Enum Highest for value: highest
            /// </summary>
            [EnumMember(Value = "highest")]
            Highest = 5

        }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=true)]
        public LevelEnum Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestLevelOfDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestLevelOfDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestLevelOfDetail" /> class.
        /// </summary>
        /// <param name="scaleType">scaleType (required).</param>
        /// <param name="level">level (required).</param>
        public RequestLevelOfDetail(ScaleTypeEnum scaleType = default(ScaleTypeEnum), LevelEnum level = default(LevelEnum))
        {
            // to ensure "scaleType" is required (not null)
            if (scaleType == null)
            {
                throw new InvalidDataException("scaleType is a required property for RequestLevelOfDetail and cannot be null");
            }
            else
            {
                this.ScaleType = scaleType;
            }

            // to ensure "level" is required (not null)
            if (level == null)
            {
                throw new InvalidDataException("level is a required property for RequestLevelOfDetail and cannot be null");
            }
            else
            {
                this.Level = level;
            }

        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestLevelOfDetail {\n");
            sb.Append("  ScaleType: ").Append(ScaleType).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestLevelOfDetail);
        }

        /// <summary>
        /// Returns true if RequestLevelOfDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestLevelOfDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestLevelOfDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScaleType == input.ScaleType ||
                    (this.ScaleType != null &&
                    this.ScaleType.Equals(input.ScaleType))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScaleType != null)
                    hashCode = hashCode * 59 + this.ScaleType.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
