/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseSupportedLocations
    /// </summary>
    [DataContract]
    public partial class ResponseSupportedLocations :  IEquatable<ResponseSupportedLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseSupportedLocations" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseSupportedLocations() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseSupportedLocations" /> class.
        /// </summary>
        /// <param name="locations">locations (required).</param>
        /// <param name="unsupportedLocations">unsupportedLocations (required).</param>
        public ResponseSupportedLocations(List<ResponseSupportedLocation> locations = default(List<ResponseSupportedLocation>), List<string> unsupportedLocations = default(List<string>))
        {
            // to ensure "locations" is required (not null)
            if (locations == null)
            {
                throw new InvalidDataException("locations is a required property for ResponseSupportedLocations and cannot be null");
            }
            else
            {
                this.Locations = locations;
            }

            // to ensure "unsupportedLocations" is required (not null)
            if (unsupportedLocations == null)
            {
                throw new InvalidDataException("unsupportedLocations is a required property for ResponseSupportedLocations and cannot be null");
            }
            else
            {
                this.UnsupportedLocations = unsupportedLocations;
            }

        }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="locations", EmitDefaultValue=true)]
        public List<ResponseSupportedLocation> Locations { get; set; }

        /// <summary>
        /// Gets or Sets UnsupportedLocations
        /// </summary>
        [DataMember(Name="unsupported_locations", EmitDefaultValue=true)]
        public List<string> UnsupportedLocations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseSupportedLocations {\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  UnsupportedLocations: ").Append(UnsupportedLocations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseSupportedLocations);
        }

        /// <summary>
        /// Returns true if ResponseSupportedLocations instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseSupportedLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseSupportedLocations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.UnsupportedLocations == input.UnsupportedLocations ||
                    this.UnsupportedLocations != null &&
                    input.UnsupportedLocations != null &&
                    this.UnsupportedLocations.SequenceEqual(input.UnsupportedLocations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.UnsupportedLocations != null)
                    hashCode = hashCode * 59 + this.UnsupportedLocations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
