note
 description:"[
		TravelTime API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: 1.2.3
 	    Contact: support@igeolise.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class REQUEST_TRANSPORTATION 




feature --Access

    type: detachable STRING_32 
      
 	disable_border_crossing: BOOLEAN 
    	 
 	pt_change_delay: INTEGER_32 
    	 
 	walking_time: INTEGER_32 
    	 
 	driving_time_to_station: INTEGER_32 
    	 
 	cycling_time_to_station: INTEGER_32 
    	 
 	parking_time: INTEGER_32 
    	 
 	boarding_time: INTEGER_32 
    	 

feature -- Change Element  
 
    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name		
      end

    set_disable_border_crossing (a_name: like disable_border_crossing)
        -- Set 'disable_border_crossing' with 'a_name'.
      do
        disable_border_crossing := a_name
      ensure
        disable_border_crossing_set: disable_border_crossing = a_name		
      end

    set_pt_change_delay (a_name: like pt_change_delay)
        -- Set 'pt_change_delay' with 'a_name'.
      do
        pt_change_delay := a_name
      ensure
        pt_change_delay_set: pt_change_delay = a_name		
      end

    set_walking_time (a_name: like walking_time)
        -- Set 'walking_time' with 'a_name'.
      do
        walking_time := a_name
      ensure
        walking_time_set: walking_time = a_name		
      end

    set_driving_time_to_station (a_name: like driving_time_to_station)
        -- Set 'driving_time_to_station' with 'a_name'.
      do
        driving_time_to_station := a_name
      ensure
        driving_time_to_station_set: driving_time_to_station = a_name		
      end

    set_cycling_time_to_station (a_name: like cycling_time_to_station)
        -- Set 'cycling_time_to_station' with 'a_name'.
      do
        cycling_time_to_station := a_name
      ensure
        cycling_time_to_station_set: cycling_time_to_station = a_name		
      end

    set_parking_time (a_name: like parking_time)
        -- Set 'parking_time' with 'a_name'.
      do
        parking_time := a_name
      ensure
        parking_time_set: parking_time = a_name		
      end

    set_boarding_time (a_name: like boarding_time)
        -- Set 'boarding_time' with 'a_name'.
      do
        boarding_time := a_name
      ensure
        boarding_time_set: boarding_time = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass REQUEST_TRANSPORTATION%N")
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")    
        end  
        if attached disable_border_crossing as l_disable_border_crossing then
          Result.append ("%Ndisable_border_crossing:")
          Result.append (l_disable_border_crossing.out)
          Result.append ("%N")    
        end  
        if attached pt_change_delay as l_pt_change_delay then
          Result.append ("%Npt_change_delay:")
          Result.append (l_pt_change_delay.out)
          Result.append ("%N")    
        end  
        if attached walking_time as l_walking_time then
          Result.append ("%Nwalking_time:")
          Result.append (l_walking_time.out)
          Result.append ("%N")    
        end  
        if attached driving_time_to_station as l_driving_time_to_station then
          Result.append ("%Ndriving_time_to_station:")
          Result.append (l_driving_time_to_station.out)
          Result.append ("%N")    
        end  
        if attached cycling_time_to_station as l_cycling_time_to_station then
          Result.append ("%Ncycling_time_to_station:")
          Result.append (l_cycling_time_to_station.out)
          Result.append ("%N")    
        end  
        if attached parking_time as l_parking_time then
          Result.append ("%Nparking_time:")
          Result.append (l_parking_time.out)
          Result.append ("%N")    
        end  
        if attached boarding_time as l_boarding_time then
          Result.append ("%Nboarding_time:")
          Result.append (l_boarding_time.out)
          Result.append ("%N")    
        end  
      end
end


