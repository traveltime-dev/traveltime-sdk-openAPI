note
 description:"[
		TravelTime API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: 1.2.3
 	    Contact: support@igeolise.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class RESPONSE_FARES_BREAKDOWN_ITEM 




feature --Access

    modes: detachable LIST [RESPONSE_TRANSPORTATION_MODE] 
      
 	route_part_ids: detachable LIST [INTEGER_32] 
    	 
    tickets: detachable LIST [RESPONSE_FARE_TICKET] 
      

feature -- Change Element  
 
    set_modes (a_name: like modes)
        -- Set 'modes' with 'a_name'.
      do
        modes := a_name
      ensure
        modes_set: modes = a_name		
      end

    set_route_part_ids (a_name: like route_part_ids)
        -- Set 'route_part_ids' with 'a_name'.
      do
        route_part_ids := a_name
      ensure
        route_part_ids_set: route_part_ids = a_name		
      end

    set_tickets (a_name: like tickets)
        -- Set 'tickets' with 'a_name'.
      do
        tickets := a_name
      ensure
        tickets_set: tickets = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass RESPONSE_FARES_BREAKDOWN_ITEM%N")
        if attached modes as l_modes then
          across l_modes as ic loop
            Result.append ("%N modes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached route_part_ids as l_route_part_ids then
          across l_route_part_ids as ic loop
            Result.append ("%N route_part_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached tickets as l_tickets then
          across l_tickets as ic loop
            Result.append ("%N tickets:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


