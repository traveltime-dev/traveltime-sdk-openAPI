# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule TravelTimeAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias TravelTimeAPI.Connection
  import TravelTimeAPI.RequestBuilder


  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - lat (float()): 
  - lng (float()): 
  - opts (KeywordList): [optional] Optional parameters
    - :within_periodcountry (String.t): 
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseGeocoding.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec geocoding_reverse_search(Tesla.Env.client, float(), float(), keyword()) :: {:ok, TravelTimeAPI.Model.ResponseGeocoding.t} | {:ok, TravelTimeAPI.Model.ResponseError.t} | {:error, Tesla.Env.t}
  def geocoding_reverse_search(connection, lat, lng, opts \\ []) do
    optional_params = %{
      :"within.country" => :query
    }
    %{}
    |> method(:get)
    |> url("/v4/geocoding/reverse")
    |> add_param(:query, :"lat", lat)
    |> add_param(:query, :"lng", lng)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseGeocoding{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - query (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :focus_periodlat (float()): 
    - :focus_periodlng (float()): 
    - :within_periodcountry (String.t): 
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseGeocoding.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec geocoding_search(Tesla.Env.client, String.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseGeocoding.t} | {:ok, TravelTimeAPI.Model.ResponseError.t} | {:error, Tesla.Env.t}
  def geocoding_search(connection, query, opts \\ []) do
    optional_params = %{
      :"focus.lat" => :query,
      :"focus.lng" => :query,
      :"within.country" => :query
    }
    %{}
    |> method(:get)
    |> url("/v4/geocoding/search")
    |> add_param(:query, :"query", query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseGeocoding{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseMapInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec map_info(Tesla.Env.client, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseMapInfo.t} | {:error, Tesla.Env.t}
  def map_info(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v4/map-info")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseMapInfo{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_routes (RequestRoutes): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseRoutes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec routes(Tesla.Env.client, TravelTimeAPI.Model.RequestRoutes.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseRoutes.t} | {:ok, TravelTimeAPI.Model.ResponseError.t} | {:error, Tesla.Env.t}
  def routes(connection, request_routes, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/routes")
    |> add_param(:body, :body, request_routes)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseRoutes{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_supported_locations (RequestSupportedLocations): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseSupportedLocations.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec supported_locations(Tesla.Env.client, TravelTimeAPI.Model.RequestSupportedLocations.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseSupportedLocations.t} | {:ok, TravelTimeAPI.Model.ResponseError.t} | {:error, Tesla.Env.t}
  def supported_locations(connection, request_supported_locations, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/supported-locations")
    |> add_param(:body, :body, request_supported_locations)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseSupportedLocations{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_filter (RequestTimeFilter): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeFilter.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_filter(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeFilter.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseTimeFilter.t} | {:error, Tesla.Env.t}
  def time_filter(connection, request_time_filter, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-filter")
    |> add_param(:body, :body, request_time_filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeFilter{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_filter_fast (RequestTimeFilterFast): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeFilterFast.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_filter_fast(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeFilterFast.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseTimeFilterFast.t} | {:error, Tesla.Env.t}
  def time_filter_fast(connection, request_time_filter_fast, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-filter/fast")
    |> add_param(:body, :body, request_time_filter_fast)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeFilterFast{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_filter_postcode_districts (RequestTimeFilterPostcodeDistricts): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodeDistricts.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_filter_postcode_districts(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeFilterPostcodeDistricts.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodeDistricts.t} | {:error, Tesla.Env.t}
  def time_filter_postcode_districts(connection, request_time_filter_postcode_districts, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-filter/postcode-districts")
    |> add_param(:body, :body, request_time_filter_postcode_districts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeFilterPostcodeDistricts{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_filter_postcode_sectors (RequestTimeFilterPostcodeSectors): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodeSectors.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_filter_postcode_sectors(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeFilterPostcodeSectors.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodeSectors.t} | {:error, Tesla.Env.t}
  def time_filter_postcode_sectors(connection, request_time_filter_postcode_sectors, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-filter/postcode-sectors")
    |> add_param(:body, :body, request_time_filter_postcode_sectors)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeFilterPostcodeSectors{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_filter_postcodes (RequestTimeFilterPostcodes): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodes.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_filter_postcodes(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeFilterPostcodes.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseTimeFilterPostcodes.t} | {:ok, TravelTimeAPI.Model.ResponseError.t} | {:error, Tesla.Env.t}
  def time_filter_postcodes(connection, request_time_filter_postcodes, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-filter/postcodes")
    |> add_param(:body, :body, request_time_filter_postcodes)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeFilterPostcodes{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (TravelTimeAPI.Connection): Connection to server
  - request_time_map (RequestTimeMap): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, TravelTimeAPI.Model.ResponseTimeMap.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec time_map(Tesla.Env.client, TravelTimeAPI.Model.RequestTimeMap.t, keyword()) :: {:ok, TravelTimeAPI.Model.ResponseError.t} | {:ok, TravelTimeAPI.Model.ResponseTimeMap.t} | {:error, Tesla.Env.t}
  def time_map(connection, request_time_map, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v4/time-map")
    |> add_param(:body, :body, request_time_map)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %TravelTimeAPI.Model.ResponseTimeMap{}},
      { :default, %TravelTimeAPI.Model.ResponseError{}}
    ])
  end
end
