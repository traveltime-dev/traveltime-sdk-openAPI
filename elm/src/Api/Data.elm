{-
   TravelTime API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.2.3
   Contact: support@igeolise.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Coords
    , RequestArrivalTimePeriod(..), requestArrivalTimePeriodVariants
    , RequestDepartureArrivalLocationOne
    , RequestDepartureArrivalTime
    , RequestLevelOfDetail, RequestLevelOfDetailScaleType(..), requestLevelOfDetailScaleTypeVariants, RequestLevelOfDetailLevel(..), requestLevelOfDetailLevelVariants
    , RequestLocation
    , RequestLocationId
    , RequestRangeEnabled
    , RequestRangeFull
    , RequestRangeNoMaxResults
    , RequestRangeWidth
    , RequestRoutes
    , RequestRoutesArrivalSearch
    , RequestRoutesDepartureSearch
    , RequestRoutesProperty(..), requestRoutesPropertyVariants
    , RequestSearchId
    , RequestSupportedLocations
    , RequestTimeFilter
    , RequestTimeFilterArrivalSearch
    , RequestTimeFilterDepartureSearch
    , RequestTimeFilterFast
    , RequestTimeFilterFastArrivalManyToOneSearch
    , RequestTimeFilterFastArrivalOneToManySearch
    , RequestTimeFilterFastArrivalSearches
    , RequestTimeFilterFastProperty(..), requestTimeFilterFastPropertyVariants
    , RequestTimeFilterPostcodeDistricts
    , RequestTimeFilterPostcodeDistrictsArrivalSearch
    , RequestTimeFilterPostcodeDistrictsDepartureSearch
    , RequestTimeFilterPostcodeDistrictsProperty(..), requestTimeFilterPostcodeDistrictsPropertyVariants
    , RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold
    , RequestTimeFilterPostcodeSectors
    , RequestTimeFilterPostcodeSectorsArrivalSearch
    , RequestTimeFilterPostcodeSectorsDepartureSearch
    , RequestTimeFilterPostcodeSectorsProperty(..), requestTimeFilterPostcodeSectorsPropertyVariants
    , RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold
    , RequestTimeFilterPostcodes
    , RequestTimeFilterPostcodesArrivalSearch
    , RequestTimeFilterPostcodesDepartureSearch
    , RequestTimeFilterPostcodesProperty(..), requestTimeFilterPostcodesPropertyVariants
    , RequestTimeFilterProperty(..), requestTimeFilterPropertyVariants
    , RequestTimeMap
    , RequestTimeMapArrivalSearch
    , RequestTimeMapDepartureSearch
    , RequestTimeMapProperty(..), requestTimeMapPropertyVariants
    , RequestTransportation, RequestTransportationType(..), requestTransportationTypeVariants
    , RequestTransportationFast, RequestTransportationFastType(..), requestTransportationFastTypeVariants
    , RequestTravelTime
    , RequestUnionOnIntersection
    , ResponseBoundingBox
    , ResponseBox
    , ResponseDistance
    , ResponseDistanceBreakdownItem
    , ResponseError
    , ResponseFareTicket, ResponseFareTicketType(..), responseFareTicketTypeVariants
    , ResponseFares
    , ResponseFaresBreakdownItem
    , ResponseFaresFast
    , ResponseGeocoding
    , ResponseGeocodingGeoJsonFeature
    , ResponseGeocodingGeometry
    , ResponseGeocodingProperties
    , ResponseLocalTime
    , ResponseLocationId
    , ResponseMapInfo
    , ResponseMapInfoFeatures
    , ResponseMapInfoFeaturesPublicTransport
    , ResponseMapInfoMap
    , ResponseRoute
    , ResponseRoutePart, ResponseRoutePartType(..), responseRoutePartTypeVariants
    , ResponseRoutes
    , ResponseRoutesLocation
    , ResponseRoutesProperties
    , ResponseRoutesResult
    , ResponseSearchId
    , ResponseShape
    , ResponseSupportedLocation
    , ResponseSupportedLocations
    , ResponseTimeFilter
    , ResponseTimeFilterFast
    , ResponseTimeFilterFastLocation
    , ResponseTimeFilterFastProperties
    , ResponseTimeFilterFastResult
    , ResponseTimeFilterLocation
    , ResponseTimeFilterPostcode
    , ResponseTimeFilterPostcodeDistrict
    , ResponseTimeFilterPostcodeDistrictProperties
    , ResponseTimeFilterPostcodeDistricts
    , ResponseTimeFilterPostcodeDistrictsResult
    , ResponseTimeFilterPostcodeSector
    , ResponseTimeFilterPostcodeSectorProperties
    , ResponseTimeFilterPostcodeSectors
    , ResponseTimeFilterPostcodeSectorsResult
    , ResponseTimeFilterPostcodes
    , ResponseTimeFilterPostcodesProperties
    , ResponseTimeFilterPostcodesResult
    , ResponseTimeFilterProperties
    , ResponseTimeFilterResult
    , ResponseTimeMap
    , ResponseTimeMapBoundingBoxes
    , ResponseTimeMapBoundingBoxesResult
    , ResponseTimeMapProperties
    , ResponseTimeMapResult
    , ResponseTimeMapWkt
    , ResponseTimeMapWktResult
    , ResponseTransportationMode(..), responseTransportationModeVariants
    , ResponseTravelTime
    , ResponseTravelTimeStatistics
    , ResponseWktShape
    , encodeCoords
    , encodeRequestArrivalTimePeriod
    , encodeRequestDepartureArrivalLocationOne
    , encodeRequestDepartureArrivalTime
    , encodeRequestLevelOfDetail
    , encodeRequestLocation
    , encodeRequestLocationId
    , encodeRequestRangeEnabled
    , encodeRequestRangeFull
    , encodeRequestRangeNoMaxResults
    , encodeRequestRangeWidth
    , encodeRequestRoutes
    , encodeRequestRoutesArrivalSearch
    , encodeRequestRoutesDepartureSearch
    , encodeRequestRoutesProperty
    , encodeRequestSearchId
    , encodeRequestSupportedLocations
    , encodeRequestTimeFilter
    , encodeRequestTimeFilterArrivalSearch
    , encodeRequestTimeFilterDepartureSearch
    , encodeRequestTimeFilterFast
    , encodeRequestTimeFilterFastArrivalManyToOneSearch
    , encodeRequestTimeFilterFastArrivalOneToManySearch
    , encodeRequestTimeFilterFastArrivalSearches
    , encodeRequestTimeFilterFastProperty
    , encodeRequestTimeFilterPostcodeDistricts
    , encodeRequestTimeFilterPostcodeDistrictsArrivalSearch
    , encodeRequestTimeFilterPostcodeDistrictsDepartureSearch
    , encodeRequestTimeFilterPostcodeDistrictsProperty
    , encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold
    , encodeRequestTimeFilterPostcodeSectors
    , encodeRequestTimeFilterPostcodeSectorsArrivalSearch
    , encodeRequestTimeFilterPostcodeSectorsDepartureSearch
    , encodeRequestTimeFilterPostcodeSectorsProperty
    , encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThreshold
    , encodeRequestTimeFilterPostcodes
    , encodeRequestTimeFilterPostcodesArrivalSearch
    , encodeRequestTimeFilterPostcodesDepartureSearch
    , encodeRequestTimeFilterPostcodesProperty
    , encodeRequestTimeFilterProperty
    , encodeRequestTimeMap
    , encodeRequestTimeMapArrivalSearch
    , encodeRequestTimeMapDepartureSearch
    , encodeRequestTimeMapProperty
    , encodeRequestTransportation
    , encodeRequestTransportationFast
    , encodeRequestTravelTime
    , encodeRequestUnionOnIntersection
    , encodeResponseBoundingBox
    , encodeResponseBox
    , encodeResponseDistance
    , encodeResponseDistanceBreakdownItem
    , encodeResponseError
    , encodeResponseFareTicket
    , encodeResponseFares
    , encodeResponseFaresBreakdownItem
    , encodeResponseFaresFast
    , encodeResponseGeocoding
    , encodeResponseGeocodingGeoJsonFeature
    , encodeResponseGeocodingGeometry
    , encodeResponseGeocodingProperties
    , encodeResponseLocalTime
    , encodeResponseLocationId
    , encodeResponseMapInfo
    , encodeResponseMapInfoFeatures
    , encodeResponseMapInfoFeaturesPublicTransport
    , encodeResponseMapInfoMap
    , encodeResponseRoute
    , encodeResponseRoutePart
    , encodeResponseRoutes
    , encodeResponseRoutesLocation
    , encodeResponseRoutesProperties
    , encodeResponseRoutesResult
    , encodeResponseSearchId
    , encodeResponseShape
    , encodeResponseSupportedLocation
    , encodeResponseSupportedLocations
    , encodeResponseTimeFilter
    , encodeResponseTimeFilterFast
    , encodeResponseTimeFilterFastLocation
    , encodeResponseTimeFilterFastProperties
    , encodeResponseTimeFilterFastResult
    , encodeResponseTimeFilterLocation
    , encodeResponseTimeFilterPostcode
    , encodeResponseTimeFilterPostcodeDistrict
    , encodeResponseTimeFilterPostcodeDistrictProperties
    , encodeResponseTimeFilterPostcodeDistricts
    , encodeResponseTimeFilterPostcodeDistrictsResult
    , encodeResponseTimeFilterPostcodeSector
    , encodeResponseTimeFilterPostcodeSectorProperties
    , encodeResponseTimeFilterPostcodeSectors
    , encodeResponseTimeFilterPostcodeSectorsResult
    , encodeResponseTimeFilterPostcodes
    , encodeResponseTimeFilterPostcodesProperties
    , encodeResponseTimeFilterPostcodesResult
    , encodeResponseTimeFilterProperties
    , encodeResponseTimeFilterResult
    , encodeResponseTimeMap
    , encodeResponseTimeMapBoundingBoxes
    , encodeResponseTimeMapBoundingBoxesResult
    , encodeResponseTimeMapProperties
    , encodeResponseTimeMapResult
    , encodeResponseTimeMapWkt
    , encodeResponseTimeMapWktResult
    , encodeResponseTransportationMode
    , encodeResponseTravelTime
    , encodeResponseTravelTimeStatistics
    , encodeResponseWktShape
    , coordsDecoder
    , requestArrivalTimePeriodDecoder
    , requestDepartureArrivalLocationOneDecoder
    , requestDepartureArrivalTimeDecoder
    , requestLevelOfDetailDecoder
    , requestLocationDecoder
    , requestLocationIdDecoder
    , requestRangeEnabledDecoder
    , requestRangeFullDecoder
    , requestRangeNoMaxResultsDecoder
    , requestRangeWidthDecoder
    , requestRoutesDecoder
    , requestRoutesArrivalSearchDecoder
    , requestRoutesDepartureSearchDecoder
    , requestRoutesPropertyDecoder
    , requestSearchIdDecoder
    , requestSupportedLocationsDecoder
    , requestTimeFilterDecoder
    , requestTimeFilterArrivalSearchDecoder
    , requestTimeFilterDepartureSearchDecoder
    , requestTimeFilterFastDecoder
    , requestTimeFilterFastArrivalManyToOneSearchDecoder
    , requestTimeFilterFastArrivalOneToManySearchDecoder
    , requestTimeFilterFastArrivalSearchesDecoder
    , requestTimeFilterFastPropertyDecoder
    , requestTimeFilterPostcodeDistrictsDecoder
    , requestTimeFilterPostcodeDistrictsArrivalSearchDecoder
    , requestTimeFilterPostcodeDistrictsDepartureSearchDecoder
    , requestTimeFilterPostcodeDistrictsPropertyDecoder
    , requestTimeFilterPostcodeDistrictsReachablePostcodesThresholdDecoder
    , requestTimeFilterPostcodeSectorsDecoder
    , requestTimeFilterPostcodeSectorsArrivalSearchDecoder
    , requestTimeFilterPostcodeSectorsDepartureSearchDecoder
    , requestTimeFilterPostcodeSectorsPropertyDecoder
    , requestTimeFilterPostcodeSectorsReachablePostcodesThresholdDecoder
    , requestTimeFilterPostcodesDecoder
    , requestTimeFilterPostcodesArrivalSearchDecoder
    , requestTimeFilterPostcodesDepartureSearchDecoder
    , requestTimeFilterPostcodesPropertyDecoder
    , requestTimeFilterPropertyDecoder
    , requestTimeMapDecoder
    , requestTimeMapArrivalSearchDecoder
    , requestTimeMapDepartureSearchDecoder
    , requestTimeMapPropertyDecoder
    , requestTransportationDecoder
    , requestTransportationFastDecoder
    , requestTravelTimeDecoder
    , requestUnionOnIntersectionDecoder
    , responseBoundingBoxDecoder
    , responseBoxDecoder
    , responseDistanceDecoder
    , responseDistanceBreakdownItemDecoder
    , responseErrorDecoder
    , responseFareTicketDecoder
    , responseFaresDecoder
    , responseFaresBreakdownItemDecoder
    , responseFaresFastDecoder
    , responseGeocodingDecoder
    , responseGeocodingGeoJsonFeatureDecoder
    , responseGeocodingGeometryDecoder
    , responseGeocodingPropertiesDecoder
    , responseLocalTimeDecoder
    , responseLocationIdDecoder
    , responseMapInfoDecoder
    , responseMapInfoFeaturesDecoder
    , responseMapInfoFeaturesPublicTransportDecoder
    , responseMapInfoMapDecoder
    , responseRouteDecoder
    , responseRoutePartDecoder
    , responseRoutesDecoder
    , responseRoutesLocationDecoder
    , responseRoutesPropertiesDecoder
    , responseRoutesResultDecoder
    , responseSearchIdDecoder
    , responseShapeDecoder
    , responseSupportedLocationDecoder
    , responseSupportedLocationsDecoder
    , responseTimeFilterDecoder
    , responseTimeFilterFastDecoder
    , responseTimeFilterFastLocationDecoder
    , responseTimeFilterFastPropertiesDecoder
    , responseTimeFilterFastResultDecoder
    , responseTimeFilterLocationDecoder
    , responseTimeFilterPostcodeDecoder
    , responseTimeFilterPostcodeDistrictDecoder
    , responseTimeFilterPostcodeDistrictPropertiesDecoder
    , responseTimeFilterPostcodeDistrictsDecoder
    , responseTimeFilterPostcodeDistrictsResultDecoder
    , responseTimeFilterPostcodeSectorDecoder
    , responseTimeFilterPostcodeSectorPropertiesDecoder
    , responseTimeFilterPostcodeSectorsDecoder
    , responseTimeFilterPostcodeSectorsResultDecoder
    , responseTimeFilterPostcodesDecoder
    , responseTimeFilterPostcodesPropertiesDecoder
    , responseTimeFilterPostcodesResultDecoder
    , responseTimeFilterPropertiesDecoder
    , responseTimeFilterResultDecoder
    , responseTimeMapDecoder
    , responseTimeMapBoundingBoxesDecoder
    , responseTimeMapBoundingBoxesResultDecoder
    , responseTimeMapPropertiesDecoder
    , responseTimeMapResultDecoder
    , responseTimeMapWktDecoder
    , responseTimeMapWktResultDecoder
    , responseTransportationModeDecoder
    , responseTravelTimeDecoder
    , responseTravelTimeStatisticsDecoder
    , responseWktShapeDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Coords =
    { lat : Float
    , lng : Float
    }


type RequestArrivalTimePeriod
    = RequestArrivalTimePeriodWeekdayMorning


requestArrivalTimePeriodVariants : List RequestArrivalTimePeriod
requestArrivalTimePeriodVariants =
    [ RequestArrivalTimePeriodWeekdayMorning
    ]


type alias RequestDepartureArrivalLocationOne =
    { }


type alias RequestDepartureArrivalTime =
    { }


type alias RequestLevelOfDetail =
    { scaleType : RequestLevelOfDetailScaleType
    , level : RequestLevelOfDetailLevel
    }


type RequestLevelOfDetailScaleType
    = RequestLevelOfDetailScaleTypeSimple


requestLevelOfDetailScaleTypeVariants : List RequestLevelOfDetailScaleType
requestLevelOfDetailScaleTypeVariants =
    [ RequestLevelOfDetailScaleTypeSimple
    ]


type RequestLevelOfDetailLevel
    = RequestLevelOfDetailLevelLowest
    | RequestLevelOfDetailLevelLow
    | RequestLevelOfDetailLevelMedium
    | RequestLevelOfDetailLevelHigh
    | RequestLevelOfDetailLevelHighest


requestLevelOfDetailLevelVariants : List RequestLevelOfDetailLevel
requestLevelOfDetailLevelVariants =
    [ RequestLevelOfDetailLevelLowest
    , RequestLevelOfDetailLevelLow
    , RequestLevelOfDetailLevelMedium
    , RequestLevelOfDetailLevelHigh
    , RequestLevelOfDetailLevelHighest
    ]


type alias RequestLocation =
    { id : String
    , coords : Coords
    }


type alias RequestLocationId =
    { }


type alias RequestRangeEnabled =
    { }


type alias RequestRangeFull =
    { enabled : Bool
    , maxResults : Int
    , width : Int
    }


type alias RequestRangeNoMaxResults =
    { enabled : Bool
    , width : Int
    }


type alias RequestRangeWidth =
    { }


type alias RequestRoutes =
    { locations : List (RequestLocation)
    , departureSearches : Maybe (List (RequestRoutesDepartureSearch))
    , arrivalSearches : Maybe (List (RequestRoutesArrivalSearch))
    }


type alias RequestRoutesArrivalSearch =
    { id : String
    , departureLocationIds : List (String)
    , arrivalLocationId : String
    , transportation : RequestTransportation
    , arrivalTime : Posix
    , properties : List (RequestRoutesProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestRoutesDepartureSearch =
    { id : String
    , departureLocationId : String
    , arrivalLocationIds : List (String)
    , transportation : RequestTransportation
    , departureTime : Posix
    , properties : List (RequestRoutesProperty)
    , range : Maybe RequestRangeFull
    }


type RequestRoutesProperty
    = RequestRoutesPropertyTravelTime
    | RequestRoutesPropertyDistance
    | RequestRoutesPropertyFares
    | RequestRoutesPropertyRoute


requestRoutesPropertyVariants : List RequestRoutesProperty
requestRoutesPropertyVariants =
    [ RequestRoutesPropertyTravelTime
    , RequestRoutesPropertyDistance
    , RequestRoutesPropertyFares
    , RequestRoutesPropertyRoute
    ]


type alias RequestSearchId =
    { }


type alias RequestSupportedLocations =
    { locations : List (RequestLocation)
    }


type alias RequestTimeFilter =
    { locations : List (RequestLocation)
    , departureSearches : Maybe (List (RequestTimeFilterDepartureSearch))
    , arrivalSearches : Maybe (List (RequestTimeFilterArrivalSearch))
    }


type alias RequestTimeFilterArrivalSearch =
    { id : String
    , departureLocationIds : List (String)
    , arrivalLocationId : String
    , transportation : RequestTransportation
    , travelTime : Int
    , arrivalTime : Posix
    , properties : List (RequestTimeFilterProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestTimeFilterDepartureSearch =
    { id : String
    , departureLocationId : String
    , arrivalLocationIds : List (String)
    , transportation : RequestTransportation
    , travelTime : Int
    , departureTime : Posix
    , properties : List (RequestTimeFilterProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestTimeFilterFast =
    { locations : List (RequestLocation)
    , arrivalSearches : RequestTimeFilterFastArrivalSearches
    }


type alias RequestTimeFilterFastArrivalManyToOneSearch =
    { id : String
    , arrivalLocationId : String
    , departureLocationIds : List (String)
    , transportation : RequestTransportationFast
    , travelTime : Int
    , arrivalTimePeriod : RequestArrivalTimePeriod
    , properties : List (RequestTimeFilterFastProperty)
    }


type alias RequestTimeFilterFastArrivalOneToManySearch =
    { id : String
    , departureLocationId : String
    , arrivalLocationIds : List (String)
    , transportation : RequestTransportationFast
    , travelTime : Int
    , arrivalTimePeriod : RequestArrivalTimePeriod
    , properties : List (RequestTimeFilterFastProperty)
    }


type alias RequestTimeFilterFastArrivalSearches =
    { manyToOne : Maybe (List (RequestTimeFilterFastArrivalManyToOneSearch))
    , oneToMany : Maybe (List (RequestTimeFilterFastArrivalOneToManySearch))
    }


type RequestTimeFilterFastProperty
    = RequestTimeFilterFastPropertyTravelTime
    | RequestTimeFilterFastPropertyFares


requestTimeFilterFastPropertyVariants : List RequestTimeFilterFastProperty
requestTimeFilterFastPropertyVariants =
    [ RequestTimeFilterFastPropertyTravelTime
    , RequestTimeFilterFastPropertyFares
    ]


type alias RequestTimeFilterPostcodeDistricts =
    { departureSearches : Maybe (List (RequestTimeFilterPostcodeDistrictsDepartureSearch))
    , arrivalSearches : Maybe (List (RequestTimeFilterPostcodeDistrictsArrivalSearch))
    }


type alias RequestTimeFilterPostcodeDistrictsArrivalSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , arrivalTime : Posix
    , reachablePostcodesThreshold : Float
    , properties : List (RequestTimeFilterPostcodeDistrictsProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestTimeFilterPostcodeDistrictsDepartureSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , departureTime : Posix
    , reachablePostcodesThreshold : Float
    , properties : List (RequestTimeFilterPostcodeDistrictsProperty)
    , range : Maybe RequestRangeFull
    }


type RequestTimeFilterPostcodeDistrictsProperty
    = RequestTimeFilterPostcodeDistrictsPropertyTravelTimeReachable
    | RequestTimeFilterPostcodeDistrictsPropertyTravelTimeAll
    | RequestTimeFilterPostcodeDistrictsPropertyCoverage


requestTimeFilterPostcodeDistrictsPropertyVariants : List RequestTimeFilterPostcodeDistrictsProperty
requestTimeFilterPostcodeDistrictsPropertyVariants =
    [ RequestTimeFilterPostcodeDistrictsPropertyTravelTimeReachable
    , RequestTimeFilterPostcodeDistrictsPropertyTravelTimeAll
    , RequestTimeFilterPostcodeDistrictsPropertyCoverage
    ]


type alias RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold =
    { }


type alias RequestTimeFilterPostcodeSectors =
    { departureSearches : Maybe (List (RequestTimeFilterPostcodeSectorsDepartureSearch))
    , arrivalSearches : Maybe (List (RequestTimeFilterPostcodeSectorsArrivalSearch))
    }


type alias RequestTimeFilterPostcodeSectorsArrivalSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , arrivalTime : Posix
    , reachablePostcodesThreshold : Float
    , properties : List (RequestTimeFilterPostcodeSectorsProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestTimeFilterPostcodeSectorsDepartureSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , departureTime : Posix
    , reachablePostcodesThreshold : Float
    , properties : List (RequestTimeFilterPostcodeSectorsProperty)
    , range : Maybe RequestRangeFull
    }


type RequestTimeFilterPostcodeSectorsProperty
    = RequestTimeFilterPostcodeSectorsPropertyTravelTimeReachable
    | RequestTimeFilterPostcodeSectorsPropertyTravelTimeAll
    | RequestTimeFilterPostcodeSectorsPropertyCoverage


requestTimeFilterPostcodeSectorsPropertyVariants : List RequestTimeFilterPostcodeSectorsProperty
requestTimeFilterPostcodeSectorsPropertyVariants =
    [ RequestTimeFilterPostcodeSectorsPropertyTravelTimeReachable
    , RequestTimeFilterPostcodeSectorsPropertyTravelTimeAll
    , RequestTimeFilterPostcodeSectorsPropertyCoverage
    ]


type alias RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold =
    { }


type alias RequestTimeFilterPostcodes =
    { departureSearches : Maybe (List (RequestTimeFilterPostcodesDepartureSearch))
    , arrivalSearches : Maybe (List (RequestTimeFilterPostcodesArrivalSearch))
    }


type alias RequestTimeFilterPostcodesArrivalSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , arrivalTime : Posix
    , properties : List (RequestTimeFilterPostcodesProperty)
    , range : Maybe RequestRangeFull
    }


type alias RequestTimeFilterPostcodesDepartureSearch =
    { id : String
    , transportation : RequestTransportation
    , travelTime : Int
    , departureTime : Posix
    , properties : List (RequestTimeFilterPostcodesProperty)
    , range : Maybe RequestRangeFull
    }


type RequestTimeFilterPostcodesProperty
    = RequestTimeFilterPostcodesPropertyTravelTime
    | RequestTimeFilterPostcodesPropertyDistance


requestTimeFilterPostcodesPropertyVariants : List RequestTimeFilterPostcodesProperty
requestTimeFilterPostcodesPropertyVariants =
    [ RequestTimeFilterPostcodesPropertyTravelTime
    , RequestTimeFilterPostcodesPropertyDistance
    ]


type RequestTimeFilterProperty
    = RequestTimeFilterPropertyTravelTime
    | RequestTimeFilterPropertyDistance
    | RequestTimeFilterPropertyDistanceBreakdown
    | RequestTimeFilterPropertyFares
    | RequestTimeFilterPropertyRoute


requestTimeFilterPropertyVariants : List RequestTimeFilterProperty
requestTimeFilterPropertyVariants =
    [ RequestTimeFilterPropertyTravelTime
    , RequestTimeFilterPropertyDistance
    , RequestTimeFilterPropertyDistanceBreakdown
    , RequestTimeFilterPropertyFares
    , RequestTimeFilterPropertyRoute
    ]


type alias RequestTimeMap =
    { departureSearches : Maybe (List (RequestTimeMapDepartureSearch))
    , arrivalSearches : Maybe (List (RequestTimeMapArrivalSearch))
    , unions : Maybe (List (RequestUnionOnIntersection))
    , intersections : Maybe (List (RequestUnionOnIntersection))
    }


type alias RequestTimeMapArrivalSearch =
    { id : String
    , coords : Coords
    , transportation : RequestTransportation
    , travelTime : Int
    , arrivalTime : Posix
    , properties : Maybe (List (RequestTimeMapProperty))
    , range : Maybe RequestRangeNoMaxResults
    , levelOfDetail : Maybe RequestLevelOfDetail
    }


type alias RequestTimeMapDepartureSearch =
    { id : String
    , coords : Coords
    , transportation : RequestTransportation
    , travelTime : Int
    , departureTime : Posix
    , properties : Maybe (List (RequestTimeMapProperty))
    , range : Maybe RequestRangeNoMaxResults
    , levelOfDetail : Maybe RequestLevelOfDetail
    }


type RequestTimeMapProperty
    = RequestTimeMapPropertyIsOnlyWalking


requestTimeMapPropertyVariants : List RequestTimeMapProperty
requestTimeMapPropertyVariants =
    [ RequestTimeMapPropertyIsOnlyWalking
    ]


type alias RequestTransportation =
    { type_ : RequestTransportationType
    , disableBorderCrossing : Maybe Bool
    , ptChangeDelay : Maybe Int
    , walkingTime : Maybe Int
    , drivingTimeToStation : Maybe Int
    , cyclingTimeToStation : Maybe Int
    , parkingTime : Maybe Int
    , boardingTime : Maybe Int
    }


type RequestTransportationType
    = RequestTransportationTypeCycling
    | RequestTransportationTypeDriving
    | RequestTransportationTypeDriving+train
    | RequestTransportationTypePublicTransport
    | RequestTransportationTypeWalking
    | RequestTransportationTypeCoach
    | RequestTransportationTypeBus
    | RequestTransportationTypeTrain
    | RequestTransportationTypeFerry
    | RequestTransportationTypeDriving+ferry
    | RequestTransportationTypeCycling+ferry


requestTransportationTypeVariants : List RequestTransportationType
requestTransportationTypeVariants =
    [ RequestTransportationTypeCycling
    , RequestTransportationTypeDriving
    , RequestTransportationTypeDriving+train
    , RequestTransportationTypePublicTransport
    , RequestTransportationTypeWalking
    , RequestTransportationTypeCoach
    , RequestTransportationTypeBus
    , RequestTransportationTypeTrain
    , RequestTransportationTypeFerry
    , RequestTransportationTypeDriving+ferry
    , RequestTransportationTypeCycling+ferry
    ]


type alias RequestTransportationFast =
    { type_ : RequestTransportationFastType
    }


type RequestTransportationFastType
    = RequestTransportationFastTypePublicTransport
    | RequestTransportationFastTypeDriving
    | RequestTransportationFastTypeDriving+publicTransport


requestTransportationFastTypeVariants : List RequestTransportationFastType
requestTransportationFastTypeVariants =
    [ RequestTransportationFastTypePublicTransport
    , RequestTransportationFastTypeDriving
    , RequestTransportationFastTypeDriving+publicTransport
    ]


type alias RequestTravelTime =
    { }


type alias RequestUnionOnIntersection =
    { id : String
    , searchIds : List (String)
    }


type alias ResponseBoundingBox =
    { envelope : ResponseBox
    , boxes : List (ResponseBox)
    }


type alias ResponseBox =
    { minLat : Float
    , maxLat : Float
    , minLng : Float
    , maxLng : Float
    }


type alias ResponseDistance =
    { }


type alias ResponseDistanceBreakdownItem =
    { mode : ResponseTransportationMode
    , distance : Int
    }


type alias ResponseError =
    { httpStatus : Maybe Int
    , errorCode : Maybe Int
    , description : Maybe String
    , documentationLink : Maybe String
    , additionalInfo : Maybe (Dict.Dict String (List (String)))
    }


type alias ResponseFareTicket =
    { type_ : ResponseFareTicketType
    , price : Float
    , currency : String
    }


type ResponseFareTicketType
    = ResponseFareTicketTypeSingle
    | ResponseFareTicketTypeWeek
    | ResponseFareTicketTypeMonth
    | ResponseFareTicketTypeYear


responseFareTicketTypeVariants : List ResponseFareTicketType
responseFareTicketTypeVariants =
    [ ResponseFareTicketTypeSingle
    , ResponseFareTicketTypeWeek
    , ResponseFareTicketTypeMonth
    , ResponseFareTicketTypeYear
    ]


type alias ResponseFares =
    { breakdown : List (ResponseFaresBreakdownItem)
    , ticketsTotal : List (ResponseFareTicket)
    }


type alias ResponseFaresBreakdownItem =
    { modes : List (ResponseTransportationMode)
    , routePartIds : List (Int)
    , tickets : List (ResponseFareTicket)
    }


type alias ResponseFaresFast =
    { ticketsTotal : List (ResponseFareTicket)
    }


type alias ResponseGeocoding =
    { type_ : String
    , features : List (ResponseGeocodingGeoJsonFeature)
    }


type alias ResponseGeocodingGeoJsonFeature =
    { type_ : String
    , geometry : ResponseGeocodingGeometry
    , properties : ResponseGeocodingProperties
    }


type alias ResponseGeocodingGeometry =
    { type_ : String
    , coordinates : List (Float)
    }


type alias ResponseGeocodingProperties =
    { name : String
    , label : String
    , score : Maybe Float
    , houseNumber : Maybe String
    , street : Maybe String
    , region : Maybe String
    , regionCode : Maybe String
    , neighbourhood : Maybe String
    , county : Maybe String
    , macroregion : Maybe String
    , city : Maybe String
    , country : Maybe String
    , countryCode : Maybe String
    , continent : Maybe String
    , postcode : Maybe String
    , features : Maybe ResponseMapInfoFeatures
    }


type alias ResponseLocalTime =
    { }


type alias ResponseLocationId =
    { }


type alias ResponseMapInfo =
    { maps : List (ResponseMapInfoMap)
    }


type alias ResponseMapInfoFeatures =
    { publicTransport : Maybe ResponseMapInfoFeaturesPublicTransport
    , fares : Bool
    , postcodes : Bool
    }


type alias ResponseMapInfoFeaturesPublicTransport =
    { dateStart : Posix
    , dateEnd : Posix
    }


type alias ResponseMapInfoMap =
    { name : String
    , features : ResponseMapInfoFeatures
    }


type alias ResponseRoute =
    { departureTime : Posix
    , arrivalTime : Posix
    , parts : List (ResponseRoutePart)
    }


type alias ResponseRoutePart =
    { id : String
    , type_ : ResponseRoutePartType
    , mode : ResponseTransportationMode
    , directions : String
    , distance : Int
    , travelTime : Int
    , coords : List (Coords)
    , direction : Maybe String
    , road : Maybe String
    , turn : Maybe String
    , line : Maybe String
    , departureStation : Maybe String
    , arrivalStation : Maybe String
    , departsAt : Maybe String
    , arrivesAt : Maybe String
    , numStops : Maybe Int
    }


type ResponseRoutePartType
    = ResponseRoutePartTypeBasic
    | ResponseRoutePartTypeStartEnd
    | ResponseRoutePartTypeRoad
    | ResponseRoutePartTypePublicTransport


responseRoutePartTypeVariants : List ResponseRoutePartType
responseRoutePartTypeVariants =
    [ ResponseRoutePartTypeBasic
    , ResponseRoutePartTypeStartEnd
    , ResponseRoutePartTypeRoad
    , ResponseRoutePartTypePublicTransport
    ]


type alias ResponseRoutes =
    { results : List (ResponseRoutesResult)
    }


type alias ResponseRoutesLocation =
    { id : String
    , properties : List (ResponseRoutesProperties)
    }


type alias ResponseRoutesProperties =
    { travelTime : Maybe Int
    , distance : Maybe Int
    , fares : Maybe ResponseFares
    , route : Maybe ResponseRoute
    }


type alias ResponseRoutesResult =
    { searchId : String
    , locations : List (ResponseRoutesLocation)
    , unreachable : List (String)
    }


type alias ResponseSearchId =
    { }


type alias ResponseShape =
    { shell : List (Coords)
    , holes : List (List (Coords))
    }


type alias ResponseSupportedLocation =
    { id : String
    , mapName : String
    }


type alias ResponseSupportedLocations =
    { locations : List (ResponseSupportedLocation)
    , unsupportedLocations : List (String)
    }


type alias ResponseTimeFilter =
    { results : List (ResponseTimeFilterResult)
    }


type alias ResponseTimeFilterFast =
    { results : List (ResponseTimeFilterFastResult)
    }


type alias ResponseTimeFilterFastLocation =
    { id : String
    , properties : List (ResponseTimeFilterFastProperties)
    }


type alias ResponseTimeFilterFastProperties =
    { travelTime : Maybe Int
    , fares : Maybe ResponseFaresFast
    }


type alias ResponseTimeFilterFastResult =
    { searchId : String
    , locations : List (ResponseTimeFilterFastLocation)
    , unreachable : List (String)
    }


type alias ResponseTimeFilterLocation =
    { id : String
    , properties : List (ResponseTimeFilterProperties)
    }


type alias ResponseTimeFilterPostcode =
    { code : String
    , properties : List (ResponseTimeFilterPostcodesProperties)
    }


type alias ResponseTimeFilterPostcodeDistrict =
    { code : String
    , properties : ResponseTimeFilterPostcodeDistrictProperties
    }


type alias ResponseTimeFilterPostcodeDistrictProperties =
    { travelTimeReachable : Maybe ResponseTravelTimeStatistics
    , travelTimeAll : Maybe ResponseTravelTimeStatistics
    , coverage : Maybe Float
    }


type alias ResponseTimeFilterPostcodeDistricts =
    { results : List (ResponseTimeFilterPostcodeDistrictsResult)
    }


type alias ResponseTimeFilterPostcodeDistrictsResult =
    { searchId : String
    , districts : List (ResponseTimeFilterPostcodeDistrict)
    }


type alias ResponseTimeFilterPostcodeSector =
    { code : String
    , properties : ResponseTimeFilterPostcodeSectorProperties
    }


type alias ResponseTimeFilterPostcodeSectorProperties =
    { travelTimeReachable : Maybe ResponseTravelTimeStatistics
    , travelTimeAll : Maybe ResponseTravelTimeStatistics
    , coverage : Maybe Float
    }


type alias ResponseTimeFilterPostcodeSectors =
    { results : List (ResponseTimeFilterPostcodeSectorsResult)
    }


type alias ResponseTimeFilterPostcodeSectorsResult =
    { searchId : String
    , sectors : List (ResponseTimeFilterPostcodeSector)
    }


type alias ResponseTimeFilterPostcodes =
    { results : List (ResponseTimeFilterPostcodesResult)
    }


type alias ResponseTimeFilterPostcodesProperties =
    { travelTime : Maybe Int
    , distance : Maybe Int
    }


type alias ResponseTimeFilterPostcodesResult =
    { searchId : String
    , postcodes : List (ResponseTimeFilterPostcode)
    }


type alias ResponseTimeFilterProperties =
    { travelTime : Maybe Int
    , distance : Maybe Int
    , distanceBreakdown : Maybe (List (ResponseDistanceBreakdownItem))
    , fares : Maybe ResponseFares
    , route : Maybe ResponseRoute
    }


type alias ResponseTimeFilterResult =
    { searchId : String
    , locations : List (ResponseTimeFilterLocation)
    , unreachable : List (String)
    }


type alias ResponseTimeMap =
    { results : List (ResponseTimeMapResult)
    }


type alias ResponseTimeMapBoundingBoxes =
    { results : List (ResponseTimeMapBoundingBoxesResult)
    }


type alias ResponseTimeMapBoundingBoxesResult =
    { searchId : String
    , boundingBoxes : List (ResponseBoundingBox)
    , properties : ResponseTimeMapProperties
    }


type alias ResponseTimeMapProperties =
    { isOnlyWalking : Maybe Bool
    }


type alias ResponseTimeMapResult =
    { searchId : String
    , shapes : List (ResponseShape)
    , properties : ResponseTimeMapProperties
    }


type alias ResponseTimeMapWkt =
    { results : List (ResponseTimeMapWktResult)
    }


type alias ResponseTimeMapWktResult =
    { searchId : String
    , shape : String
    , properties : ResponseTimeMapProperties
    }


type ResponseTransportationMode
    = ResponseTransportationModeCar
    | ResponseTransportationModeParking
    | ResponseTransportationModeBoarding
    | ResponseTransportationModeWalk
    | ResponseTransportationModeBike
    | ResponseTransportationModeTrain
    | ResponseTransportationModeRailNational
    | ResponseTransportationModeRailOverground
    | ResponseTransportationModeRailUnderground
    | ResponseTransportationModeRailDlr
    | ResponseTransportationModeBus
    | ResponseTransportationModeCableCar
    | ResponseTransportationModePlane
    | ResponseTransportationModeFerry
    | ResponseTransportationModeCoach


responseTransportationModeVariants : List ResponseTransportationMode
responseTransportationModeVariants =
    [ ResponseTransportationModeCar
    , ResponseTransportationModeParking
    , ResponseTransportationModeBoarding
    , ResponseTransportationModeWalk
    , ResponseTransportationModeBike
    , ResponseTransportationModeTrain
    , ResponseTransportationModeRailNational
    , ResponseTransportationModeRailOverground
    , ResponseTransportationModeRailUnderground
    , ResponseTransportationModeRailDlr
    , ResponseTransportationModeBus
    , ResponseTransportationModeCableCar
    , ResponseTransportationModePlane
    , ResponseTransportationModeFerry
    , ResponseTransportationModeCoach
    ]


type alias ResponseTravelTime =
    { }


type alias ResponseTravelTimeStatistics =
    { min : Int
    , max : Int
    , mean : Int
    , median : Int
    }


type alias ResponseWktShape =
    { }


-- ENCODER


encodeCoords : Coords -> Json.Encode.Value
encodeCoords =
    encodeObject << encodeCoordsPairs


encodeCoordsWithTag : ( String, String ) -> Coords -> Json.Encode.Value
encodeCoordsWithTag (tagField, tag) model =
    encodeObject (encodeCoordsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCoordsPairs : Coords -> List EncodedField
encodeCoordsPairs model =
    let
        pairs =
            [ encode "lat" Json.Encode.float model.lat
            , encode "lng" Json.Encode.float model.lng
            ]
    in
    pairs


stringFromRequestArrivalTimePeriod : RequestArrivalTimePeriod -> String
stringFromRequestArrivalTimePeriod model =
    case model of
        RequestArrivalTimePeriodWeekdayMorning ->
            "weekday_morning"


encodeRequestArrivalTimePeriod : RequestArrivalTimePeriod -> Json.Encode.Value
encodeRequestArrivalTimePeriod =
    Json.Encode.string << stringFromRequestArrivalTimePeriod


encodeRequestDepartureArrivalLocationOne : RequestDepartureArrivalLocationOne -> Json.Encode.Value
encodeRequestDepartureArrivalLocationOne =
    encodeObject << encodeRequestDepartureArrivalLocationOnePairs


encodeRequestDepartureArrivalLocationOneWithTag : ( String, String ) -> RequestDepartureArrivalLocationOne -> Json.Encode.Value
encodeRequestDepartureArrivalLocationOneWithTag (tagField, tag) model =
    encodeObject (encodeRequestDepartureArrivalLocationOnePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestDepartureArrivalLocationOnePairs : RequestDepartureArrivalLocationOne -> List EncodedField
encodeRequestDepartureArrivalLocationOnePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestDepartureArrivalTime : RequestDepartureArrivalTime -> Json.Encode.Value
encodeRequestDepartureArrivalTime =
    encodeObject << encodeRequestDepartureArrivalTimePairs


encodeRequestDepartureArrivalTimeWithTag : ( String, String ) -> RequestDepartureArrivalTime -> Json.Encode.Value
encodeRequestDepartureArrivalTimeWithTag (tagField, tag) model =
    encodeObject (encodeRequestDepartureArrivalTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestDepartureArrivalTimePairs : RequestDepartureArrivalTime -> List EncodedField
encodeRequestDepartureArrivalTimePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestLevelOfDetail : RequestLevelOfDetail -> Json.Encode.Value
encodeRequestLevelOfDetail =
    encodeObject << encodeRequestLevelOfDetailPairs


encodeRequestLevelOfDetailWithTag : ( String, String ) -> RequestLevelOfDetail -> Json.Encode.Value
encodeRequestLevelOfDetailWithTag (tagField, tag) model =
    encodeObject (encodeRequestLevelOfDetailPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestLevelOfDetailPairs : RequestLevelOfDetail -> List EncodedField
encodeRequestLevelOfDetailPairs model =
    let
        pairs =
            [ encode "scale_type"  model.scaleType
            , encode "level"  model.level
            ]
    in
    pairs

stringFromRequestLevelOfDetailScaleType : RequestLevelOfDetailScaleType -> String
stringFromRequestLevelOfDetailScaleType model =
    case model of
        RequestLevelOfDetailScaleTypeSimple ->
            "simple"


encodeRequestLevelOfDetailScaleType : RequestLevelOfDetailScaleType -> Json.Encode.Value
encodeRequestLevelOfDetailScaleType =
    Json.Encode.string << stringFromRequestLevelOfDetailScaleType


stringFromRequestLevelOfDetailLevel : RequestLevelOfDetailLevel -> String
stringFromRequestLevelOfDetailLevel model =
    case model of
        RequestLevelOfDetailLevelLowest ->
            "lowest"

        RequestLevelOfDetailLevelLow ->
            "low"

        RequestLevelOfDetailLevelMedium ->
            "medium"

        RequestLevelOfDetailLevelHigh ->
            "high"

        RequestLevelOfDetailLevelHighest ->
            "highest"


encodeRequestLevelOfDetailLevel : RequestLevelOfDetailLevel -> Json.Encode.Value
encodeRequestLevelOfDetailLevel =
    Json.Encode.string << stringFromRequestLevelOfDetailLevel



encodeRequestLocation : RequestLocation -> Json.Encode.Value
encodeRequestLocation =
    encodeObject << encodeRequestLocationPairs


encodeRequestLocationWithTag : ( String, String ) -> RequestLocation -> Json.Encode.Value
encodeRequestLocationWithTag (tagField, tag) model =
    encodeObject (encodeRequestLocationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestLocationPairs : RequestLocation -> List EncodedField
encodeRequestLocationPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "coords" encodeCoords model.coords
            ]
    in
    pairs


encodeRequestLocationId : RequestLocationId -> Json.Encode.Value
encodeRequestLocationId =
    encodeObject << encodeRequestLocationIdPairs


encodeRequestLocationIdWithTag : ( String, String ) -> RequestLocationId -> Json.Encode.Value
encodeRequestLocationIdWithTag (tagField, tag) model =
    encodeObject (encodeRequestLocationIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestLocationIdPairs : RequestLocationId -> List EncodedField
encodeRequestLocationIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestRangeEnabled : RequestRangeEnabled -> Json.Encode.Value
encodeRequestRangeEnabled =
    encodeObject << encodeRequestRangeEnabledPairs


encodeRequestRangeEnabledWithTag : ( String, String ) -> RequestRangeEnabled -> Json.Encode.Value
encodeRequestRangeEnabledWithTag (tagField, tag) model =
    encodeObject (encodeRequestRangeEnabledPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRangeEnabledPairs : RequestRangeEnabled -> List EncodedField
encodeRequestRangeEnabledPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestRangeFull : RequestRangeFull -> Json.Encode.Value
encodeRequestRangeFull =
    encodeObject << encodeRequestRangeFullPairs


encodeRequestRangeFullWithTag : ( String, String ) -> RequestRangeFull -> Json.Encode.Value
encodeRequestRangeFullWithTag (tagField, tag) model =
    encodeObject (encodeRequestRangeFullPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRangeFullPairs : RequestRangeFull -> List EncodedField
encodeRequestRangeFullPairs model =
    let
        pairs =
            [ encode "enabled" Json.Encode.bool model.enabled
            , encode "max_results" Json.Encode.int model.maxResults
            , encode "width" Json.Encode.int model.width
            ]
    in
    pairs


encodeRequestRangeNoMaxResults : RequestRangeNoMaxResults -> Json.Encode.Value
encodeRequestRangeNoMaxResults =
    encodeObject << encodeRequestRangeNoMaxResultsPairs


encodeRequestRangeNoMaxResultsWithTag : ( String, String ) -> RequestRangeNoMaxResults -> Json.Encode.Value
encodeRequestRangeNoMaxResultsWithTag (tagField, tag) model =
    encodeObject (encodeRequestRangeNoMaxResultsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRangeNoMaxResultsPairs : RequestRangeNoMaxResults -> List EncodedField
encodeRequestRangeNoMaxResultsPairs model =
    let
        pairs =
            [ encode "enabled" Json.Encode.bool model.enabled
            , encode "width" Json.Encode.int model.width
            ]
    in
    pairs


encodeRequestRangeWidth : RequestRangeWidth -> Json.Encode.Value
encodeRequestRangeWidth =
    encodeObject << encodeRequestRangeWidthPairs


encodeRequestRangeWidthWithTag : ( String, String ) -> RequestRangeWidth -> Json.Encode.Value
encodeRequestRangeWidthWithTag (tagField, tag) model =
    encodeObject (encodeRequestRangeWidthPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRangeWidthPairs : RequestRangeWidth -> List EncodedField
encodeRequestRangeWidthPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestRoutes : RequestRoutes -> Json.Encode.Value
encodeRequestRoutes =
    encodeObject << encodeRequestRoutesPairs


encodeRequestRoutesWithTag : ( String, String ) -> RequestRoutes -> Json.Encode.Value
encodeRequestRoutesWithTag (tagField, tag) model =
    encodeObject (encodeRequestRoutesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRoutesPairs : RequestRoutes -> List EncodedField
encodeRequestRoutesPairs model =
    let
        pairs =
            [ encode "locations" (Json.Encode.list encodeRequestLocation) model.locations
            , maybeEncode "departure_searches" (Json.Encode.list encodeRequestRoutesDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestRoutesArrivalSearch) model.arrivalSearches
            ]
    in
    pairs


encodeRequestRoutesArrivalSearch : RequestRoutesArrivalSearch -> Json.Encode.Value
encodeRequestRoutesArrivalSearch =
    encodeObject << encodeRequestRoutesArrivalSearchPairs


encodeRequestRoutesArrivalSearchWithTag : ( String, String ) -> RequestRoutesArrivalSearch -> Json.Encode.Value
encodeRequestRoutesArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestRoutesArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRoutesArrivalSearchPairs : RequestRoutesArrivalSearch -> List EncodedField
encodeRequestRoutesArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "departure_location_ids" (Json.Encode.list Json.Encode.string) model.departureLocationIds
            , encode "arrival_location_id" Json.Encode.string model.arrivalLocationId
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "properties" (Json.Encode.list encodeRequestRoutesProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestRoutesDepartureSearch : RequestRoutesDepartureSearch -> Json.Encode.Value
encodeRequestRoutesDepartureSearch =
    encodeObject << encodeRequestRoutesDepartureSearchPairs


encodeRequestRoutesDepartureSearchWithTag : ( String, String ) -> RequestRoutesDepartureSearch -> Json.Encode.Value
encodeRequestRoutesDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestRoutesDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRoutesDepartureSearchPairs : RequestRoutesDepartureSearch -> List EncodedField
encodeRequestRoutesDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "departure_location_id" Json.Encode.string model.departureLocationId
            , encode "arrival_location_ids" (Json.Encode.list Json.Encode.string) model.arrivalLocationIds
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "properties" (Json.Encode.list encodeRequestRoutesProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


stringFromRequestRoutesProperty : RequestRoutesProperty -> String
stringFromRequestRoutesProperty model =
    case model of
        RequestRoutesPropertyTravelTime ->
            "travel_time"

        RequestRoutesPropertyDistance ->
            "distance"

        RequestRoutesPropertyFares ->
            "fares"

        RequestRoutesPropertyRoute ->
            "route"


encodeRequestRoutesProperty : RequestRoutesProperty -> Json.Encode.Value
encodeRequestRoutesProperty =
    Json.Encode.string << stringFromRequestRoutesProperty


encodeRequestSearchId : RequestSearchId -> Json.Encode.Value
encodeRequestSearchId =
    encodeObject << encodeRequestSearchIdPairs


encodeRequestSearchIdWithTag : ( String, String ) -> RequestSearchId -> Json.Encode.Value
encodeRequestSearchIdWithTag (tagField, tag) model =
    encodeObject (encodeRequestSearchIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestSearchIdPairs : RequestSearchId -> List EncodedField
encodeRequestSearchIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestSupportedLocations : RequestSupportedLocations -> Json.Encode.Value
encodeRequestSupportedLocations =
    encodeObject << encodeRequestSupportedLocationsPairs


encodeRequestSupportedLocationsWithTag : ( String, String ) -> RequestSupportedLocations -> Json.Encode.Value
encodeRequestSupportedLocationsWithTag (tagField, tag) model =
    encodeObject (encodeRequestSupportedLocationsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestSupportedLocationsPairs : RequestSupportedLocations -> List EncodedField
encodeRequestSupportedLocationsPairs model =
    let
        pairs =
            [ encode "locations" (Json.Encode.list encodeRequestLocation) model.locations
            ]
    in
    pairs


encodeRequestTimeFilter : RequestTimeFilter -> Json.Encode.Value
encodeRequestTimeFilter =
    encodeObject << encodeRequestTimeFilterPairs


encodeRequestTimeFilterWithTag : ( String, String ) -> RequestTimeFilter -> Json.Encode.Value
encodeRequestTimeFilterWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPairs : RequestTimeFilter -> List EncodedField
encodeRequestTimeFilterPairs model =
    let
        pairs =
            [ encode "locations" (Json.Encode.list encodeRequestLocation) model.locations
            , maybeEncode "departure_searches" (Json.Encode.list encodeRequestTimeFilterDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestTimeFilterArrivalSearch) model.arrivalSearches
            ]
    in
    pairs


encodeRequestTimeFilterArrivalSearch : RequestTimeFilterArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterArrivalSearch =
    encodeObject << encodeRequestTimeFilterArrivalSearchPairs


encodeRequestTimeFilterArrivalSearchWithTag : ( String, String ) -> RequestTimeFilterArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterArrivalSearchPairs : RequestTimeFilterArrivalSearch -> List EncodedField
encodeRequestTimeFilterArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "departure_location_ids" (Json.Encode.list Json.Encode.string) model.departureLocationIds
            , encode "arrival_location_id" Json.Encode.string model.arrivalLocationId
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestTimeFilterDepartureSearch : RequestTimeFilterDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterDepartureSearch =
    encodeObject << encodeRequestTimeFilterDepartureSearchPairs


encodeRequestTimeFilterDepartureSearchWithTag : ( String, String ) -> RequestTimeFilterDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterDepartureSearchPairs : RequestTimeFilterDepartureSearch -> List EncodedField
encodeRequestTimeFilterDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "departure_location_id" Json.Encode.string model.departureLocationId
            , encode "arrival_location_ids" (Json.Encode.list Json.Encode.string) model.arrivalLocationIds
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestTimeFilterFast : RequestTimeFilterFast -> Json.Encode.Value
encodeRequestTimeFilterFast =
    encodeObject << encodeRequestTimeFilterFastPairs


encodeRequestTimeFilterFastWithTag : ( String, String ) -> RequestTimeFilterFast -> Json.Encode.Value
encodeRequestTimeFilterFastWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterFastPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterFastPairs : RequestTimeFilterFast -> List EncodedField
encodeRequestTimeFilterFastPairs model =
    let
        pairs =
            [ encode "locations" (Json.Encode.list encodeRequestLocation) model.locations
            , encode "arrival_searches" encodeRequestTimeFilterFastArrivalSearches model.arrivalSearches
            ]
    in
    pairs


encodeRequestTimeFilterFastArrivalManyToOneSearch : RequestTimeFilterFastArrivalManyToOneSearch -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalManyToOneSearch =
    encodeObject << encodeRequestTimeFilterFastArrivalManyToOneSearchPairs


encodeRequestTimeFilterFastArrivalManyToOneSearchWithTag : ( String, String ) -> RequestTimeFilterFastArrivalManyToOneSearch -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalManyToOneSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterFastArrivalManyToOneSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterFastArrivalManyToOneSearchPairs : RequestTimeFilterFastArrivalManyToOneSearch -> List EncodedField
encodeRequestTimeFilterFastArrivalManyToOneSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "arrival_location_id" Json.Encode.string model.arrivalLocationId
            , encode "departure_location_ids" (Json.Encode.list Json.Encode.string) model.departureLocationIds
            , encode "transportation" encodeRequestTransportationFast model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time_period" encodeRequestArrivalTimePeriod model.arrivalTimePeriod
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterFastProperty) model.properties
            ]
    in
    pairs


encodeRequestTimeFilterFastArrivalOneToManySearch : RequestTimeFilterFastArrivalOneToManySearch -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalOneToManySearch =
    encodeObject << encodeRequestTimeFilterFastArrivalOneToManySearchPairs


encodeRequestTimeFilterFastArrivalOneToManySearchWithTag : ( String, String ) -> RequestTimeFilterFastArrivalOneToManySearch -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalOneToManySearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterFastArrivalOneToManySearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterFastArrivalOneToManySearchPairs : RequestTimeFilterFastArrivalOneToManySearch -> List EncodedField
encodeRequestTimeFilterFastArrivalOneToManySearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "departure_location_id" Json.Encode.string model.departureLocationId
            , encode "arrival_location_ids" (Json.Encode.list Json.Encode.string) model.arrivalLocationIds
            , encode "transportation" encodeRequestTransportationFast model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time_period" encodeRequestArrivalTimePeriod model.arrivalTimePeriod
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterFastProperty) model.properties
            ]
    in
    pairs


encodeRequestTimeFilterFastArrivalSearches : RequestTimeFilterFastArrivalSearches -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalSearches =
    encodeObject << encodeRequestTimeFilterFastArrivalSearchesPairs


encodeRequestTimeFilterFastArrivalSearchesWithTag : ( String, String ) -> RequestTimeFilterFastArrivalSearches -> Json.Encode.Value
encodeRequestTimeFilterFastArrivalSearchesWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterFastArrivalSearchesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterFastArrivalSearchesPairs : RequestTimeFilterFastArrivalSearches -> List EncodedField
encodeRequestTimeFilterFastArrivalSearchesPairs model =
    let
        pairs =
            [ maybeEncode "many_to_one" (Json.Encode.list encodeRequestTimeFilterFastArrivalManyToOneSearch) model.manyToOne
            , maybeEncode "one_to_many" (Json.Encode.list encodeRequestTimeFilterFastArrivalOneToManySearch) model.oneToMany
            ]
    in
    pairs


stringFromRequestTimeFilterFastProperty : RequestTimeFilterFastProperty -> String
stringFromRequestTimeFilterFastProperty model =
    case model of
        RequestTimeFilterFastPropertyTravelTime ->
            "travel_time"

        RequestTimeFilterFastPropertyFares ->
            "fares"


encodeRequestTimeFilterFastProperty : RequestTimeFilterFastProperty -> Json.Encode.Value
encodeRequestTimeFilterFastProperty =
    Json.Encode.string << stringFromRequestTimeFilterFastProperty


encodeRequestTimeFilterPostcodeDistricts : RequestTimeFilterPostcodeDistricts -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistricts =
    encodeObject << encodeRequestTimeFilterPostcodeDistrictsPairs


encodeRequestTimeFilterPostcodeDistrictsWithTag : ( String, String ) -> RequestTimeFilterPostcodeDistricts -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeDistrictsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeDistrictsPairs : RequestTimeFilterPostcodeDistricts -> List EncodedField
encodeRequestTimeFilterPostcodeDistrictsPairs model =
    let
        pairs =
            [ maybeEncode "departure_searches" (Json.Encode.list encodeRequestTimeFilterPostcodeDistrictsDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestTimeFilterPostcodeDistrictsArrivalSearch) model.arrivalSearches
            ]
    in
    pairs


encodeRequestTimeFilterPostcodeDistrictsArrivalSearch : RequestTimeFilterPostcodeDistrictsArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsArrivalSearch =
    encodeObject << encodeRequestTimeFilterPostcodeDistrictsArrivalSearchPairs


encodeRequestTimeFilterPostcodeDistrictsArrivalSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodeDistrictsArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeDistrictsArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeDistrictsArrivalSearchPairs : RequestTimeFilterPostcodeDistrictsArrivalSearch -> List EncodedField
encodeRequestTimeFilterPostcodeDistrictsArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "reachable_postcodes_threshold" Json.Encode.float model.reachablePostcodesThreshold
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodeDistrictsProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestTimeFilterPostcodeDistrictsDepartureSearch : RequestTimeFilterPostcodeDistrictsDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsDepartureSearch =
    encodeObject << encodeRequestTimeFilterPostcodeDistrictsDepartureSearchPairs


encodeRequestTimeFilterPostcodeDistrictsDepartureSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodeDistrictsDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeDistrictsDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeDistrictsDepartureSearchPairs : RequestTimeFilterPostcodeDistrictsDepartureSearch -> List EncodedField
encodeRequestTimeFilterPostcodeDistrictsDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "reachable_postcodes_threshold" Json.Encode.float model.reachablePostcodesThreshold
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodeDistrictsProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


stringFromRequestTimeFilterPostcodeDistrictsProperty : RequestTimeFilterPostcodeDistrictsProperty -> String
stringFromRequestTimeFilterPostcodeDistrictsProperty model =
    case model of
        RequestTimeFilterPostcodeDistrictsPropertyTravelTimeReachable ->
            "travel_time_reachable"

        RequestTimeFilterPostcodeDistrictsPropertyTravelTimeAll ->
            "travel_time_all"

        RequestTimeFilterPostcodeDistrictsPropertyCoverage ->
            "coverage"


encodeRequestTimeFilterPostcodeDistrictsProperty : RequestTimeFilterPostcodeDistrictsProperty -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsProperty =
    Json.Encode.string << stringFromRequestTimeFilterPostcodeDistrictsProperty


encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold : RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold =
    encodeObject << encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdPairs


encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdWithTag : ( String, String ) -> RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold -> Json.Encode.Value
encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdPairs : RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold -> List EncodedField
encodeRequestTimeFilterPostcodeDistrictsReachablePostcodesThresholdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestTimeFilterPostcodeSectors : RequestTimeFilterPostcodeSectors -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectors =
    encodeObject << encodeRequestTimeFilterPostcodeSectorsPairs


encodeRequestTimeFilterPostcodeSectorsWithTag : ( String, String ) -> RequestTimeFilterPostcodeSectors -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeSectorsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeSectorsPairs : RequestTimeFilterPostcodeSectors -> List EncodedField
encodeRequestTimeFilterPostcodeSectorsPairs model =
    let
        pairs =
            [ maybeEncode "departure_searches" (Json.Encode.list encodeRequestTimeFilterPostcodeSectorsDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestTimeFilterPostcodeSectorsArrivalSearch) model.arrivalSearches
            ]
    in
    pairs


encodeRequestTimeFilterPostcodeSectorsArrivalSearch : RequestTimeFilterPostcodeSectorsArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsArrivalSearch =
    encodeObject << encodeRequestTimeFilterPostcodeSectorsArrivalSearchPairs


encodeRequestTimeFilterPostcodeSectorsArrivalSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodeSectorsArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeSectorsArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeSectorsArrivalSearchPairs : RequestTimeFilterPostcodeSectorsArrivalSearch -> List EncodedField
encodeRequestTimeFilterPostcodeSectorsArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "reachable_postcodes_threshold" Json.Encode.float model.reachablePostcodesThreshold
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodeSectorsProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestTimeFilterPostcodeSectorsDepartureSearch : RequestTimeFilterPostcodeSectorsDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsDepartureSearch =
    encodeObject << encodeRequestTimeFilterPostcodeSectorsDepartureSearchPairs


encodeRequestTimeFilterPostcodeSectorsDepartureSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodeSectorsDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeSectorsDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeSectorsDepartureSearchPairs : RequestTimeFilterPostcodeSectorsDepartureSearch -> List EncodedField
encodeRequestTimeFilterPostcodeSectorsDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "reachable_postcodes_threshold" Json.Encode.float model.reachablePostcodesThreshold
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodeSectorsProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


stringFromRequestTimeFilterPostcodeSectorsProperty : RequestTimeFilterPostcodeSectorsProperty -> String
stringFromRequestTimeFilterPostcodeSectorsProperty model =
    case model of
        RequestTimeFilterPostcodeSectorsPropertyTravelTimeReachable ->
            "travel_time_reachable"

        RequestTimeFilterPostcodeSectorsPropertyTravelTimeAll ->
            "travel_time_all"

        RequestTimeFilterPostcodeSectorsPropertyCoverage ->
            "coverage"


encodeRequestTimeFilterPostcodeSectorsProperty : RequestTimeFilterPostcodeSectorsProperty -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsProperty =
    Json.Encode.string << stringFromRequestTimeFilterPostcodeSectorsProperty


encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThreshold : RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThreshold =
    encodeObject << encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdPairs


encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdWithTag : ( String, String ) -> RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold -> Json.Encode.Value
encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdPairs : RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold -> List EncodedField
encodeRequestTimeFilterPostcodeSectorsReachablePostcodesThresholdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestTimeFilterPostcodes : RequestTimeFilterPostcodes -> Json.Encode.Value
encodeRequestTimeFilterPostcodes =
    encodeObject << encodeRequestTimeFilterPostcodesPairs


encodeRequestTimeFilterPostcodesWithTag : ( String, String ) -> RequestTimeFilterPostcodes -> Json.Encode.Value
encodeRequestTimeFilterPostcodesWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodesPairs : RequestTimeFilterPostcodes -> List EncodedField
encodeRequestTimeFilterPostcodesPairs model =
    let
        pairs =
            [ maybeEncode "departure_searches" (Json.Encode.list encodeRequestTimeFilterPostcodesDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestTimeFilterPostcodesArrivalSearch) model.arrivalSearches
            ]
    in
    pairs


encodeRequestTimeFilterPostcodesArrivalSearch : RequestTimeFilterPostcodesArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodesArrivalSearch =
    encodeObject << encodeRequestTimeFilterPostcodesArrivalSearchPairs


encodeRequestTimeFilterPostcodesArrivalSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodesArrivalSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodesArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodesArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodesArrivalSearchPairs : RequestTimeFilterPostcodesArrivalSearch -> List EncodedField
encodeRequestTimeFilterPostcodesArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodesProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


encodeRequestTimeFilterPostcodesDepartureSearch : RequestTimeFilterPostcodesDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodesDepartureSearch =
    encodeObject << encodeRequestTimeFilterPostcodesDepartureSearchPairs


encodeRequestTimeFilterPostcodesDepartureSearchWithTag : ( String, String ) -> RequestTimeFilterPostcodesDepartureSearch -> Json.Encode.Value
encodeRequestTimeFilterPostcodesDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeFilterPostcodesDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeFilterPostcodesDepartureSearchPairs : RequestTimeFilterPostcodesDepartureSearch -> List EncodedField
encodeRequestTimeFilterPostcodesDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "properties" (Json.Encode.list encodeRequestTimeFilterPostcodesProperty) model.properties
            , maybeEncode "range" encodeRequestRangeFull model.range
            ]
    in
    pairs


stringFromRequestTimeFilterPostcodesProperty : RequestTimeFilterPostcodesProperty -> String
stringFromRequestTimeFilterPostcodesProperty model =
    case model of
        RequestTimeFilterPostcodesPropertyTravelTime ->
            "travel_time"

        RequestTimeFilterPostcodesPropertyDistance ->
            "distance"


encodeRequestTimeFilterPostcodesProperty : RequestTimeFilterPostcodesProperty -> Json.Encode.Value
encodeRequestTimeFilterPostcodesProperty =
    Json.Encode.string << stringFromRequestTimeFilterPostcodesProperty


stringFromRequestTimeFilterProperty : RequestTimeFilterProperty -> String
stringFromRequestTimeFilterProperty model =
    case model of
        RequestTimeFilterPropertyTravelTime ->
            "travel_time"

        RequestTimeFilterPropertyDistance ->
            "distance"

        RequestTimeFilterPropertyDistanceBreakdown ->
            "distance_breakdown"

        RequestTimeFilterPropertyFares ->
            "fares"

        RequestTimeFilterPropertyRoute ->
            "route"


encodeRequestTimeFilterProperty : RequestTimeFilterProperty -> Json.Encode.Value
encodeRequestTimeFilterProperty =
    Json.Encode.string << stringFromRequestTimeFilterProperty


encodeRequestTimeMap : RequestTimeMap -> Json.Encode.Value
encodeRequestTimeMap =
    encodeObject << encodeRequestTimeMapPairs


encodeRequestTimeMapWithTag : ( String, String ) -> RequestTimeMap -> Json.Encode.Value
encodeRequestTimeMapWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeMapPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeMapPairs : RequestTimeMap -> List EncodedField
encodeRequestTimeMapPairs model =
    let
        pairs =
            [ maybeEncode "departure_searches" (Json.Encode.list encodeRequestTimeMapDepartureSearch) model.departureSearches
            , maybeEncode "arrival_searches" (Json.Encode.list encodeRequestTimeMapArrivalSearch) model.arrivalSearches
            , maybeEncode "unions" (Json.Encode.list encodeRequestUnionOnIntersection) model.unions
            , maybeEncode "intersections" (Json.Encode.list encodeRequestUnionOnIntersection) model.intersections
            ]
    in
    pairs


encodeRequestTimeMapArrivalSearch : RequestTimeMapArrivalSearch -> Json.Encode.Value
encodeRequestTimeMapArrivalSearch =
    encodeObject << encodeRequestTimeMapArrivalSearchPairs


encodeRequestTimeMapArrivalSearchWithTag : ( String, String ) -> RequestTimeMapArrivalSearch -> Json.Encode.Value
encodeRequestTimeMapArrivalSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeMapArrivalSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeMapArrivalSearchPairs : RequestTimeMapArrivalSearch -> List EncodedField
encodeRequestTimeMapArrivalSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "coords" encodeCoords model.coords
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , maybeEncode "properties" (Json.Encode.list encodeRequestTimeMapProperty) model.properties
            , maybeEncode "range" encodeRequestRangeNoMaxResults model.range
            , maybeEncode "level_of_detail" encodeRequestLevelOfDetail model.levelOfDetail
            ]
    in
    pairs


encodeRequestTimeMapDepartureSearch : RequestTimeMapDepartureSearch -> Json.Encode.Value
encodeRequestTimeMapDepartureSearch =
    encodeObject << encodeRequestTimeMapDepartureSearchPairs


encodeRequestTimeMapDepartureSearchWithTag : ( String, String ) -> RequestTimeMapDepartureSearch -> Json.Encode.Value
encodeRequestTimeMapDepartureSearchWithTag (tagField, tag) model =
    encodeObject (encodeRequestTimeMapDepartureSearchPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTimeMapDepartureSearchPairs : RequestTimeMapDepartureSearch -> List EncodedField
encodeRequestTimeMapDepartureSearchPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "coords" encodeCoords model.coords
            , encode "transportation" encodeRequestTransportation model.transportation
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , maybeEncode "properties" (Json.Encode.list encodeRequestTimeMapProperty) model.properties
            , maybeEncode "range" encodeRequestRangeNoMaxResults model.range
            , maybeEncode "level_of_detail" encodeRequestLevelOfDetail model.levelOfDetail
            ]
    in
    pairs


stringFromRequestTimeMapProperty : RequestTimeMapProperty -> String
stringFromRequestTimeMapProperty model =
    case model of
        RequestTimeMapPropertyIsOnlyWalking ->
            "is_only_walking"


encodeRequestTimeMapProperty : RequestTimeMapProperty -> Json.Encode.Value
encodeRequestTimeMapProperty =
    Json.Encode.string << stringFromRequestTimeMapProperty


encodeRequestTransportation : RequestTransportation -> Json.Encode.Value
encodeRequestTransportation =
    encodeObject << encodeRequestTransportationPairs


encodeRequestTransportationWithTag : ( String, String ) -> RequestTransportation -> Json.Encode.Value
encodeRequestTransportationWithTag (tagField, tag) model =
    encodeObject (encodeRequestTransportationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTransportationPairs : RequestTransportation -> List EncodedField
encodeRequestTransportationPairs model =
    let
        pairs =
            [ encode "type"  model.type_
            , maybeEncode "disable_border_crossing" Json.Encode.bool model.disableBorderCrossing
            , maybeEncode "pt_change_delay" Json.Encode.int model.ptChangeDelay
            , maybeEncode "walking_time" Json.Encode.int model.walkingTime
            , maybeEncode "driving_time_to_station" Json.Encode.int model.drivingTimeToStation
            , maybeEncode "cycling_time_to_station" Json.Encode.int model.cyclingTimeToStation
            , maybeEncode "parking_time" Json.Encode.int model.parkingTime
            , maybeEncode "boarding_time" Json.Encode.int model.boardingTime
            ]
    in
    pairs

stringFromRequestTransportationType : RequestTransportationType -> String
stringFromRequestTransportationType model =
    case model of
        RequestTransportationTypeCycling ->
            "cycling"

        RequestTransportationTypeDriving ->
            "driving"

        RequestTransportationTypeDriving+train ->
            "driving+train"

        RequestTransportationTypePublicTransport ->
            "public_transport"

        RequestTransportationTypeWalking ->
            "walking"

        RequestTransportationTypeCoach ->
            "coach"

        RequestTransportationTypeBus ->
            "bus"

        RequestTransportationTypeTrain ->
            "train"

        RequestTransportationTypeFerry ->
            "ferry"

        RequestTransportationTypeDriving+ferry ->
            "driving+ferry"

        RequestTransportationTypeCycling+ferry ->
            "cycling+ferry"


encodeRequestTransportationType : RequestTransportationType -> Json.Encode.Value
encodeRequestTransportationType =
    Json.Encode.string << stringFromRequestTransportationType



encodeRequestTransportationFast : RequestTransportationFast -> Json.Encode.Value
encodeRequestTransportationFast =
    encodeObject << encodeRequestTransportationFastPairs


encodeRequestTransportationFastWithTag : ( String, String ) -> RequestTransportationFast -> Json.Encode.Value
encodeRequestTransportationFastWithTag (tagField, tag) model =
    encodeObject (encodeRequestTransportationFastPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTransportationFastPairs : RequestTransportationFast -> List EncodedField
encodeRequestTransportationFastPairs model =
    let
        pairs =
            [ encode "type"  model.type_
            ]
    in
    pairs

stringFromRequestTransportationFastType : RequestTransportationFastType -> String
stringFromRequestTransportationFastType model =
    case model of
        RequestTransportationFastTypePublicTransport ->
            "public_transport"

        RequestTransportationFastTypeDriving ->
            "driving"

        RequestTransportationFastTypeDriving+publicTransport ->
            "driving+public_transport"


encodeRequestTransportationFastType : RequestTransportationFastType -> Json.Encode.Value
encodeRequestTransportationFastType =
    Json.Encode.string << stringFromRequestTransportationFastType



encodeRequestTravelTime : RequestTravelTime -> Json.Encode.Value
encodeRequestTravelTime =
    encodeObject << encodeRequestTravelTimePairs


encodeRequestTravelTimeWithTag : ( String, String ) -> RequestTravelTime -> Json.Encode.Value
encodeRequestTravelTimeWithTag (tagField, tag) model =
    encodeObject (encodeRequestTravelTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestTravelTimePairs : RequestTravelTime -> List EncodedField
encodeRequestTravelTimePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeRequestUnionOnIntersection : RequestUnionOnIntersection -> Json.Encode.Value
encodeRequestUnionOnIntersection =
    encodeObject << encodeRequestUnionOnIntersectionPairs


encodeRequestUnionOnIntersectionWithTag : ( String, String ) -> RequestUnionOnIntersection -> Json.Encode.Value
encodeRequestUnionOnIntersectionWithTag (tagField, tag) model =
    encodeObject (encodeRequestUnionOnIntersectionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestUnionOnIntersectionPairs : RequestUnionOnIntersection -> List EncodedField
encodeRequestUnionOnIntersectionPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "search_ids" (Json.Encode.list Json.Encode.string) model.searchIds
            ]
    in
    pairs


encodeResponseBoundingBox : ResponseBoundingBox -> Json.Encode.Value
encodeResponseBoundingBox =
    encodeObject << encodeResponseBoundingBoxPairs


encodeResponseBoundingBoxWithTag : ( String, String ) -> ResponseBoundingBox -> Json.Encode.Value
encodeResponseBoundingBoxWithTag (tagField, tag) model =
    encodeObject (encodeResponseBoundingBoxPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseBoundingBoxPairs : ResponseBoundingBox -> List EncodedField
encodeResponseBoundingBoxPairs model =
    let
        pairs =
            [ encode "envelope" encodeResponseBox model.envelope
            , encode "boxes" (Json.Encode.list encodeResponseBox) model.boxes
            ]
    in
    pairs


encodeResponseBox : ResponseBox -> Json.Encode.Value
encodeResponseBox =
    encodeObject << encodeResponseBoxPairs


encodeResponseBoxWithTag : ( String, String ) -> ResponseBox -> Json.Encode.Value
encodeResponseBoxWithTag (tagField, tag) model =
    encodeObject (encodeResponseBoxPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseBoxPairs : ResponseBox -> List EncodedField
encodeResponseBoxPairs model =
    let
        pairs =
            [ encode "min_lat" Json.Encode.float model.minLat
            , encode "max_lat" Json.Encode.float model.maxLat
            , encode "min_lng" Json.Encode.float model.minLng
            , encode "max_lng" Json.Encode.float model.maxLng
            ]
    in
    pairs


encodeResponseDistance : ResponseDistance -> Json.Encode.Value
encodeResponseDistance =
    encodeObject << encodeResponseDistancePairs


encodeResponseDistanceWithTag : ( String, String ) -> ResponseDistance -> Json.Encode.Value
encodeResponseDistanceWithTag (tagField, tag) model =
    encodeObject (encodeResponseDistancePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseDistancePairs : ResponseDistance -> List EncodedField
encodeResponseDistancePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeResponseDistanceBreakdownItem : ResponseDistanceBreakdownItem -> Json.Encode.Value
encodeResponseDistanceBreakdownItem =
    encodeObject << encodeResponseDistanceBreakdownItemPairs


encodeResponseDistanceBreakdownItemWithTag : ( String, String ) -> ResponseDistanceBreakdownItem -> Json.Encode.Value
encodeResponseDistanceBreakdownItemWithTag (tagField, tag) model =
    encodeObject (encodeResponseDistanceBreakdownItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseDistanceBreakdownItemPairs : ResponseDistanceBreakdownItem -> List EncodedField
encodeResponseDistanceBreakdownItemPairs model =
    let
        pairs =
            [ encode "mode" encodeResponseTransportationMode model.mode
            , encode "distance" Json.Encode.int model.distance
            ]
    in
    pairs


encodeResponseError : ResponseError -> Json.Encode.Value
encodeResponseError =
    encodeObject << encodeResponseErrorPairs


encodeResponseErrorWithTag : ( String, String ) -> ResponseError -> Json.Encode.Value
encodeResponseErrorWithTag (tagField, tag) model =
    encodeObject (encodeResponseErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseErrorPairs : ResponseError -> List EncodedField
encodeResponseErrorPairs model =
    let
        pairs =
            [ maybeEncode "http_status" Json.Encode.int model.httpStatus
            , maybeEncode "error_code" Json.Encode.int model.errorCode
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "documentation_link" Json.Encode.string model.documentationLink
            , maybeEncode "additional_info" (Json.Encode.dict identity (Json.Encode.list Json.Encode.string)) model.additionalInfo
            ]
    in
    pairs


encodeResponseFareTicket : ResponseFareTicket -> Json.Encode.Value
encodeResponseFareTicket =
    encodeObject << encodeResponseFareTicketPairs


encodeResponseFareTicketWithTag : ( String, String ) -> ResponseFareTicket -> Json.Encode.Value
encodeResponseFareTicketWithTag (tagField, tag) model =
    encodeObject (encodeResponseFareTicketPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseFareTicketPairs : ResponseFareTicket -> List EncodedField
encodeResponseFareTicketPairs model =
    let
        pairs =
            [ encode "type"  model.type_
            , encode "price" Json.Encode.float model.price
            , encode "currency" Json.Encode.string model.currency
            ]
    in
    pairs

stringFromResponseFareTicketType : ResponseFareTicketType -> String
stringFromResponseFareTicketType model =
    case model of
        ResponseFareTicketTypeSingle ->
            "single"

        ResponseFareTicketTypeWeek ->
            "week"

        ResponseFareTicketTypeMonth ->
            "month"

        ResponseFareTicketTypeYear ->
            "year"


encodeResponseFareTicketType : ResponseFareTicketType -> Json.Encode.Value
encodeResponseFareTicketType =
    Json.Encode.string << stringFromResponseFareTicketType



encodeResponseFares : ResponseFares -> Json.Encode.Value
encodeResponseFares =
    encodeObject << encodeResponseFaresPairs


encodeResponseFaresWithTag : ( String, String ) -> ResponseFares -> Json.Encode.Value
encodeResponseFaresWithTag (tagField, tag) model =
    encodeObject (encodeResponseFaresPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseFaresPairs : ResponseFares -> List EncodedField
encodeResponseFaresPairs model =
    let
        pairs =
            [ encode "breakdown" (Json.Encode.list encodeResponseFaresBreakdownItem) model.breakdown
            , encode "tickets_total" (Json.Encode.list encodeResponseFareTicket) model.ticketsTotal
            ]
    in
    pairs


encodeResponseFaresBreakdownItem : ResponseFaresBreakdownItem -> Json.Encode.Value
encodeResponseFaresBreakdownItem =
    encodeObject << encodeResponseFaresBreakdownItemPairs


encodeResponseFaresBreakdownItemWithTag : ( String, String ) -> ResponseFaresBreakdownItem -> Json.Encode.Value
encodeResponseFaresBreakdownItemWithTag (tagField, tag) model =
    encodeObject (encodeResponseFaresBreakdownItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseFaresBreakdownItemPairs : ResponseFaresBreakdownItem -> List EncodedField
encodeResponseFaresBreakdownItemPairs model =
    let
        pairs =
            [ encode "modes" (Json.Encode.list encodeResponseTransportationMode) model.modes
            , encode "route_part_ids" (Json.Encode.list Json.Encode.int) model.routePartIds
            , encode "tickets" (Json.Encode.list encodeResponseFareTicket) model.tickets
            ]
    in
    pairs


encodeResponseFaresFast : ResponseFaresFast -> Json.Encode.Value
encodeResponseFaresFast =
    encodeObject << encodeResponseFaresFastPairs


encodeResponseFaresFastWithTag : ( String, String ) -> ResponseFaresFast -> Json.Encode.Value
encodeResponseFaresFastWithTag (tagField, tag) model =
    encodeObject (encodeResponseFaresFastPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseFaresFastPairs : ResponseFaresFast -> List EncodedField
encodeResponseFaresFastPairs model =
    let
        pairs =
            [ encode "tickets_total" (Json.Encode.list encodeResponseFareTicket) model.ticketsTotal
            ]
    in
    pairs


encodeResponseGeocoding : ResponseGeocoding -> Json.Encode.Value
encodeResponseGeocoding =
    encodeObject << encodeResponseGeocodingPairs


encodeResponseGeocodingWithTag : ( String, String ) -> ResponseGeocoding -> Json.Encode.Value
encodeResponseGeocodingWithTag (tagField, tag) model =
    encodeObject (encodeResponseGeocodingPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseGeocodingPairs : ResponseGeocoding -> List EncodedField
encodeResponseGeocodingPairs model =
    let
        pairs =
            [ encode "type" Json.Encode.string model.type_
            , encode "features" (Json.Encode.list encodeResponseGeocodingGeoJsonFeature) model.features
            ]
    in
    pairs


encodeResponseGeocodingGeoJsonFeature : ResponseGeocodingGeoJsonFeature -> Json.Encode.Value
encodeResponseGeocodingGeoJsonFeature =
    encodeObject << encodeResponseGeocodingGeoJsonFeaturePairs


encodeResponseGeocodingGeoJsonFeatureWithTag : ( String, String ) -> ResponseGeocodingGeoJsonFeature -> Json.Encode.Value
encodeResponseGeocodingGeoJsonFeatureWithTag (tagField, tag) model =
    encodeObject (encodeResponseGeocodingGeoJsonFeaturePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseGeocodingGeoJsonFeaturePairs : ResponseGeocodingGeoJsonFeature -> List EncodedField
encodeResponseGeocodingGeoJsonFeaturePairs model =
    let
        pairs =
            [ encode "type" Json.Encode.string model.type_
            , encode "geometry" encodeResponseGeocodingGeometry model.geometry
            , encode "properties" encodeResponseGeocodingProperties model.properties
            ]
    in
    pairs


encodeResponseGeocodingGeometry : ResponseGeocodingGeometry -> Json.Encode.Value
encodeResponseGeocodingGeometry =
    encodeObject << encodeResponseGeocodingGeometryPairs


encodeResponseGeocodingGeometryWithTag : ( String, String ) -> ResponseGeocodingGeometry -> Json.Encode.Value
encodeResponseGeocodingGeometryWithTag (tagField, tag) model =
    encodeObject (encodeResponseGeocodingGeometryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseGeocodingGeometryPairs : ResponseGeocodingGeometry -> List EncodedField
encodeResponseGeocodingGeometryPairs model =
    let
        pairs =
            [ encode "type" Json.Encode.string model.type_
            , encode "coordinates" (Json.Encode.list Json.Encode.float) model.coordinates
            ]
    in
    pairs


encodeResponseGeocodingProperties : ResponseGeocodingProperties -> Json.Encode.Value
encodeResponseGeocodingProperties =
    encodeObject << encodeResponseGeocodingPropertiesPairs


encodeResponseGeocodingPropertiesWithTag : ( String, String ) -> ResponseGeocodingProperties -> Json.Encode.Value
encodeResponseGeocodingPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseGeocodingPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseGeocodingPropertiesPairs : ResponseGeocodingProperties -> List EncodedField
encodeResponseGeocodingPropertiesPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "label" Json.Encode.string model.label
            , maybeEncode "score" Json.Encode.float model.score
            , maybeEncode "house_number" Json.Encode.string model.houseNumber
            , maybeEncode "street" Json.Encode.string model.street
            , maybeEncode "region" Json.Encode.string model.region
            , maybeEncode "region_code" Json.Encode.string model.regionCode
            , maybeEncode "neighbourhood" Json.Encode.string model.neighbourhood
            , maybeEncode "county" Json.Encode.string model.county
            , maybeEncode "macroregion" Json.Encode.string model.macroregion
            , maybeEncode "city" Json.Encode.string model.city
            , maybeEncode "country" Json.Encode.string model.country
            , maybeEncode "country_code" Json.Encode.string model.countryCode
            , maybeEncode "continent" Json.Encode.string model.continent
            , maybeEncode "postcode" Json.Encode.string model.postcode
            , maybeEncode "features" encodeResponseMapInfoFeatures model.features
            ]
    in
    pairs


encodeResponseLocalTime : ResponseLocalTime -> Json.Encode.Value
encodeResponseLocalTime =
    encodeObject << encodeResponseLocalTimePairs


encodeResponseLocalTimeWithTag : ( String, String ) -> ResponseLocalTime -> Json.Encode.Value
encodeResponseLocalTimeWithTag (tagField, tag) model =
    encodeObject (encodeResponseLocalTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseLocalTimePairs : ResponseLocalTime -> List EncodedField
encodeResponseLocalTimePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeResponseLocationId : ResponseLocationId -> Json.Encode.Value
encodeResponseLocationId =
    encodeObject << encodeResponseLocationIdPairs


encodeResponseLocationIdWithTag : ( String, String ) -> ResponseLocationId -> Json.Encode.Value
encodeResponseLocationIdWithTag (tagField, tag) model =
    encodeObject (encodeResponseLocationIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseLocationIdPairs : ResponseLocationId -> List EncodedField
encodeResponseLocationIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeResponseMapInfo : ResponseMapInfo -> Json.Encode.Value
encodeResponseMapInfo =
    encodeObject << encodeResponseMapInfoPairs


encodeResponseMapInfoWithTag : ( String, String ) -> ResponseMapInfo -> Json.Encode.Value
encodeResponseMapInfoWithTag (tagField, tag) model =
    encodeObject (encodeResponseMapInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseMapInfoPairs : ResponseMapInfo -> List EncodedField
encodeResponseMapInfoPairs model =
    let
        pairs =
            [ encode "maps" (Json.Encode.list encodeResponseMapInfoMap) model.maps
            ]
    in
    pairs


encodeResponseMapInfoFeatures : ResponseMapInfoFeatures -> Json.Encode.Value
encodeResponseMapInfoFeatures =
    encodeObject << encodeResponseMapInfoFeaturesPairs


encodeResponseMapInfoFeaturesWithTag : ( String, String ) -> ResponseMapInfoFeatures -> Json.Encode.Value
encodeResponseMapInfoFeaturesWithTag (tagField, tag) model =
    encodeObject (encodeResponseMapInfoFeaturesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseMapInfoFeaturesPairs : ResponseMapInfoFeatures -> List EncodedField
encodeResponseMapInfoFeaturesPairs model =
    let
        pairs =
            [ maybeEncode "public_transport" encodeResponseMapInfoFeaturesPublicTransport model.publicTransport
            , encode "fares" Json.Encode.bool model.fares
            , encode "postcodes" Json.Encode.bool model.postcodes
            ]
    in
    pairs


encodeResponseMapInfoFeaturesPublicTransport : ResponseMapInfoFeaturesPublicTransport -> Json.Encode.Value
encodeResponseMapInfoFeaturesPublicTransport =
    encodeObject << encodeResponseMapInfoFeaturesPublicTransportPairs


encodeResponseMapInfoFeaturesPublicTransportWithTag : ( String, String ) -> ResponseMapInfoFeaturesPublicTransport -> Json.Encode.Value
encodeResponseMapInfoFeaturesPublicTransportWithTag (tagField, tag) model =
    encodeObject (encodeResponseMapInfoFeaturesPublicTransportPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseMapInfoFeaturesPublicTransportPairs : ResponseMapInfoFeaturesPublicTransport -> List EncodedField
encodeResponseMapInfoFeaturesPublicTransportPairs model =
    let
        pairs =
            [ encode "date_start" Api.Time.encodeDateTime model.dateStart
            , encode "date_end" Api.Time.encodeDateTime model.dateEnd
            ]
    in
    pairs


encodeResponseMapInfoMap : ResponseMapInfoMap -> Json.Encode.Value
encodeResponseMapInfoMap =
    encodeObject << encodeResponseMapInfoMapPairs


encodeResponseMapInfoMapWithTag : ( String, String ) -> ResponseMapInfoMap -> Json.Encode.Value
encodeResponseMapInfoMapWithTag (tagField, tag) model =
    encodeObject (encodeResponseMapInfoMapPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseMapInfoMapPairs : ResponseMapInfoMap -> List EncodedField
encodeResponseMapInfoMapPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "features" encodeResponseMapInfoFeatures model.features
            ]
    in
    pairs


encodeResponseRoute : ResponseRoute -> Json.Encode.Value
encodeResponseRoute =
    encodeObject << encodeResponseRoutePairs


encodeResponseRouteWithTag : ( String, String ) -> ResponseRoute -> Json.Encode.Value
encodeResponseRouteWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutePairs : ResponseRoute -> List EncodedField
encodeResponseRoutePairs model =
    let
        pairs =
            [ encode "departure_time" Api.Time.encodeDateTime model.departureTime
            , encode "arrival_time" Api.Time.encodeDateTime model.arrivalTime
            , encode "parts" (Json.Encode.list encodeResponseRoutePart) model.parts
            ]
    in
    pairs


encodeResponseRoutePart : ResponseRoutePart -> Json.Encode.Value
encodeResponseRoutePart =
    encodeObject << encodeResponseRoutePartPairs


encodeResponseRoutePartWithTag : ( String, String ) -> ResponseRoutePart -> Json.Encode.Value
encodeResponseRoutePartWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutePartPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutePartPairs : ResponseRoutePart -> List EncodedField
encodeResponseRoutePartPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "type"  model.type_
            , encode "mode" encodeResponseTransportationMode model.mode
            , encode "directions" Json.Encode.string model.directions
            , encode "distance" Json.Encode.int model.distance
            , encode "travel_time" Json.Encode.int model.travelTime
            , encode "coords" (Json.Encode.list encodeCoords) model.coords
            , maybeEncode "direction" Json.Encode.string model.direction
            , maybeEncode "road" Json.Encode.string model.road
            , maybeEncode "turn" Json.Encode.string model.turn
            , maybeEncode "line" Json.Encode.string model.line
            , maybeEncode "departure_station" Json.Encode.string model.departureStation
            , maybeEncode "arrival_station" Json.Encode.string model.arrivalStation
            , maybeEncode "departs_at" Json.Encode.string model.departsAt
            , maybeEncode "arrives_at" Json.Encode.string model.arrivesAt
            , maybeEncode "num_stops" Json.Encode.int model.numStops
            ]
    in
    pairs

stringFromResponseRoutePartType : ResponseRoutePartType -> String
stringFromResponseRoutePartType model =
    case model of
        ResponseRoutePartTypeBasic ->
            "basic"

        ResponseRoutePartTypeStartEnd ->
            "start_end"

        ResponseRoutePartTypeRoad ->
            "road"

        ResponseRoutePartTypePublicTransport ->
            "public_transport"


encodeResponseRoutePartType : ResponseRoutePartType -> Json.Encode.Value
encodeResponseRoutePartType =
    Json.Encode.string << stringFromResponseRoutePartType



encodeResponseRoutes : ResponseRoutes -> Json.Encode.Value
encodeResponseRoutes =
    encodeObject << encodeResponseRoutesPairs


encodeResponseRoutesWithTag : ( String, String ) -> ResponseRoutes -> Json.Encode.Value
encodeResponseRoutesWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutesPairs : ResponseRoutes -> List EncodedField
encodeResponseRoutesPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseRoutesResult) model.results
            ]
    in
    pairs


encodeResponseRoutesLocation : ResponseRoutesLocation -> Json.Encode.Value
encodeResponseRoutesLocation =
    encodeObject << encodeResponseRoutesLocationPairs


encodeResponseRoutesLocationWithTag : ( String, String ) -> ResponseRoutesLocation -> Json.Encode.Value
encodeResponseRoutesLocationWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutesLocationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutesLocationPairs : ResponseRoutesLocation -> List EncodedField
encodeResponseRoutesLocationPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "properties" (Json.Encode.list encodeResponseRoutesProperties) model.properties
            ]
    in
    pairs


encodeResponseRoutesProperties : ResponseRoutesProperties -> Json.Encode.Value
encodeResponseRoutesProperties =
    encodeObject << encodeResponseRoutesPropertiesPairs


encodeResponseRoutesPropertiesWithTag : ( String, String ) -> ResponseRoutesProperties -> Json.Encode.Value
encodeResponseRoutesPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutesPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutesPropertiesPairs : ResponseRoutesProperties -> List EncodedField
encodeResponseRoutesPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time" Json.Encode.int model.travelTime
            , maybeEncode "distance" Json.Encode.int model.distance
            , maybeEncode "fares" encodeResponseFares model.fares
            , maybeEncode "route" encodeResponseRoute model.route
            ]
    in
    pairs


encodeResponseRoutesResult : ResponseRoutesResult -> Json.Encode.Value
encodeResponseRoutesResult =
    encodeObject << encodeResponseRoutesResultPairs


encodeResponseRoutesResultWithTag : ( String, String ) -> ResponseRoutesResult -> Json.Encode.Value
encodeResponseRoutesResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseRoutesResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseRoutesResultPairs : ResponseRoutesResult -> List EncodedField
encodeResponseRoutesResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "locations" (Json.Encode.list encodeResponseRoutesLocation) model.locations
            , encode "unreachable" (Json.Encode.list Json.Encode.string) model.unreachable
            ]
    in
    pairs


encodeResponseSearchId : ResponseSearchId -> Json.Encode.Value
encodeResponseSearchId =
    encodeObject << encodeResponseSearchIdPairs


encodeResponseSearchIdWithTag : ( String, String ) -> ResponseSearchId -> Json.Encode.Value
encodeResponseSearchIdWithTag (tagField, tag) model =
    encodeObject (encodeResponseSearchIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSearchIdPairs : ResponseSearchId -> List EncodedField
encodeResponseSearchIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeResponseShape : ResponseShape -> Json.Encode.Value
encodeResponseShape =
    encodeObject << encodeResponseShapePairs


encodeResponseShapeWithTag : ( String, String ) -> ResponseShape -> Json.Encode.Value
encodeResponseShapeWithTag (tagField, tag) model =
    encodeObject (encodeResponseShapePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseShapePairs : ResponseShape -> List EncodedField
encodeResponseShapePairs model =
    let
        pairs =
            [ encode "shell" (Json.Encode.list encodeCoords) model.shell
            , encode "holes" (Json.Encode.list (Json.Encode.list encodeCoords)) model.holes
            ]
    in
    pairs


encodeResponseSupportedLocation : ResponseSupportedLocation -> Json.Encode.Value
encodeResponseSupportedLocation =
    encodeObject << encodeResponseSupportedLocationPairs


encodeResponseSupportedLocationWithTag : ( String, String ) -> ResponseSupportedLocation -> Json.Encode.Value
encodeResponseSupportedLocationWithTag (tagField, tag) model =
    encodeObject (encodeResponseSupportedLocationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSupportedLocationPairs : ResponseSupportedLocation -> List EncodedField
encodeResponseSupportedLocationPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "map_name" Json.Encode.string model.mapName
            ]
    in
    pairs


encodeResponseSupportedLocations : ResponseSupportedLocations -> Json.Encode.Value
encodeResponseSupportedLocations =
    encodeObject << encodeResponseSupportedLocationsPairs


encodeResponseSupportedLocationsWithTag : ( String, String ) -> ResponseSupportedLocations -> Json.Encode.Value
encodeResponseSupportedLocationsWithTag (tagField, tag) model =
    encodeObject (encodeResponseSupportedLocationsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSupportedLocationsPairs : ResponseSupportedLocations -> List EncodedField
encodeResponseSupportedLocationsPairs model =
    let
        pairs =
            [ encode "locations" (Json.Encode.list encodeResponseSupportedLocation) model.locations
            , encode "unsupported_locations" (Json.Encode.list Json.Encode.string) model.unsupportedLocations
            ]
    in
    pairs


encodeResponseTimeFilter : ResponseTimeFilter -> Json.Encode.Value
encodeResponseTimeFilter =
    encodeObject << encodeResponseTimeFilterPairs


encodeResponseTimeFilterWithTag : ( String, String ) -> ResponseTimeFilter -> Json.Encode.Value
encodeResponseTimeFilterWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPairs : ResponseTimeFilter -> List EncodedField
encodeResponseTimeFilterPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeFilterResult) model.results
            ]
    in
    pairs


encodeResponseTimeFilterFast : ResponseTimeFilterFast -> Json.Encode.Value
encodeResponseTimeFilterFast =
    encodeObject << encodeResponseTimeFilterFastPairs


encodeResponseTimeFilterFastWithTag : ( String, String ) -> ResponseTimeFilterFast -> Json.Encode.Value
encodeResponseTimeFilterFastWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterFastPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterFastPairs : ResponseTimeFilterFast -> List EncodedField
encodeResponseTimeFilterFastPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeFilterFastResult) model.results
            ]
    in
    pairs


encodeResponseTimeFilterFastLocation : ResponseTimeFilterFastLocation -> Json.Encode.Value
encodeResponseTimeFilterFastLocation =
    encodeObject << encodeResponseTimeFilterFastLocationPairs


encodeResponseTimeFilterFastLocationWithTag : ( String, String ) -> ResponseTimeFilterFastLocation -> Json.Encode.Value
encodeResponseTimeFilterFastLocationWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterFastLocationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterFastLocationPairs : ResponseTimeFilterFastLocation -> List EncodedField
encodeResponseTimeFilterFastLocationPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "properties" (Json.Encode.list encodeResponseTimeFilterFastProperties) model.properties
            ]
    in
    pairs


encodeResponseTimeFilterFastProperties : ResponseTimeFilterFastProperties -> Json.Encode.Value
encodeResponseTimeFilterFastProperties =
    encodeObject << encodeResponseTimeFilterFastPropertiesPairs


encodeResponseTimeFilterFastPropertiesWithTag : ( String, String ) -> ResponseTimeFilterFastProperties -> Json.Encode.Value
encodeResponseTimeFilterFastPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterFastPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterFastPropertiesPairs : ResponseTimeFilterFastProperties -> List EncodedField
encodeResponseTimeFilterFastPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time" Json.Encode.int model.travelTime
            , maybeEncode "fares" encodeResponseFaresFast model.fares
            ]
    in
    pairs


encodeResponseTimeFilterFastResult : ResponseTimeFilterFastResult -> Json.Encode.Value
encodeResponseTimeFilterFastResult =
    encodeObject << encodeResponseTimeFilterFastResultPairs


encodeResponseTimeFilterFastResultWithTag : ( String, String ) -> ResponseTimeFilterFastResult -> Json.Encode.Value
encodeResponseTimeFilterFastResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterFastResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterFastResultPairs : ResponseTimeFilterFastResult -> List EncodedField
encodeResponseTimeFilterFastResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "locations" (Json.Encode.list encodeResponseTimeFilterFastLocation) model.locations
            , encode "unreachable" (Json.Encode.list Json.Encode.string) model.unreachable
            ]
    in
    pairs


encodeResponseTimeFilterLocation : ResponseTimeFilterLocation -> Json.Encode.Value
encodeResponseTimeFilterLocation =
    encodeObject << encodeResponseTimeFilterLocationPairs


encodeResponseTimeFilterLocationWithTag : ( String, String ) -> ResponseTimeFilterLocation -> Json.Encode.Value
encodeResponseTimeFilterLocationWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterLocationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterLocationPairs : ResponseTimeFilterLocation -> List EncodedField
encodeResponseTimeFilterLocationPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "properties" (Json.Encode.list encodeResponseTimeFilterProperties) model.properties
            ]
    in
    pairs


encodeResponseTimeFilterPostcode : ResponseTimeFilterPostcode -> Json.Encode.Value
encodeResponseTimeFilterPostcode =
    encodeObject << encodeResponseTimeFilterPostcodePairs


encodeResponseTimeFilterPostcodeWithTag : ( String, String ) -> ResponseTimeFilterPostcode -> Json.Encode.Value
encodeResponseTimeFilterPostcodeWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodePairs : ResponseTimeFilterPostcode -> List EncodedField
encodeResponseTimeFilterPostcodePairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , encode "properties" (Json.Encode.list encodeResponseTimeFilterPostcodesProperties) model.properties
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeDistrict : ResponseTimeFilterPostcodeDistrict -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrict =
    encodeObject << encodeResponseTimeFilterPostcodeDistrictPairs


encodeResponseTimeFilterPostcodeDistrictWithTag : ( String, String ) -> ResponseTimeFilterPostcodeDistrict -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeDistrictPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeDistrictPairs : ResponseTimeFilterPostcodeDistrict -> List EncodedField
encodeResponseTimeFilterPostcodeDistrictPairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , encode "properties" encodeResponseTimeFilterPostcodeDistrictProperties model.properties
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeDistrictProperties : ResponseTimeFilterPostcodeDistrictProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictProperties =
    encodeObject << encodeResponseTimeFilterPostcodeDistrictPropertiesPairs


encodeResponseTimeFilterPostcodeDistrictPropertiesWithTag : ( String, String ) -> ResponseTimeFilterPostcodeDistrictProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeDistrictPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeDistrictPropertiesPairs : ResponseTimeFilterPostcodeDistrictProperties -> List EncodedField
encodeResponseTimeFilterPostcodeDistrictPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time_reachable" encodeResponseTravelTimeStatistics model.travelTimeReachable
            , maybeEncode "travel_time_all" encodeResponseTravelTimeStatistics model.travelTimeAll
            , maybeEncode "coverage" Json.Encode.float model.coverage
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeDistricts : ResponseTimeFilterPostcodeDistricts -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistricts =
    encodeObject << encodeResponseTimeFilterPostcodeDistrictsPairs


encodeResponseTimeFilterPostcodeDistrictsWithTag : ( String, String ) -> ResponseTimeFilterPostcodeDistricts -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictsWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeDistrictsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeDistrictsPairs : ResponseTimeFilterPostcodeDistricts -> List EncodedField
encodeResponseTimeFilterPostcodeDistrictsPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeFilterPostcodeDistrictsResult) model.results
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeDistrictsResult : ResponseTimeFilterPostcodeDistrictsResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictsResult =
    encodeObject << encodeResponseTimeFilterPostcodeDistrictsResultPairs


encodeResponseTimeFilterPostcodeDistrictsResultWithTag : ( String, String ) -> ResponseTimeFilterPostcodeDistrictsResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodeDistrictsResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeDistrictsResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeDistrictsResultPairs : ResponseTimeFilterPostcodeDistrictsResult -> List EncodedField
encodeResponseTimeFilterPostcodeDistrictsResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "districts" (Json.Encode.list encodeResponseTimeFilterPostcodeDistrict) model.districts
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeSector : ResponseTimeFilterPostcodeSector -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSector =
    encodeObject << encodeResponseTimeFilterPostcodeSectorPairs


encodeResponseTimeFilterPostcodeSectorWithTag : ( String, String ) -> ResponseTimeFilterPostcodeSector -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeSectorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeSectorPairs : ResponseTimeFilterPostcodeSector -> List EncodedField
encodeResponseTimeFilterPostcodeSectorPairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , encode "properties" encodeResponseTimeFilterPostcodeSectorProperties model.properties
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeSectorProperties : ResponseTimeFilterPostcodeSectorProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorProperties =
    encodeObject << encodeResponseTimeFilterPostcodeSectorPropertiesPairs


encodeResponseTimeFilterPostcodeSectorPropertiesWithTag : ( String, String ) -> ResponseTimeFilterPostcodeSectorProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeSectorPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeSectorPropertiesPairs : ResponseTimeFilterPostcodeSectorProperties -> List EncodedField
encodeResponseTimeFilterPostcodeSectorPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time_reachable" encodeResponseTravelTimeStatistics model.travelTimeReachable
            , maybeEncode "travel_time_all" encodeResponseTravelTimeStatistics model.travelTimeAll
            , maybeEncode "coverage" Json.Encode.float model.coverage
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeSectors : ResponseTimeFilterPostcodeSectors -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectors =
    encodeObject << encodeResponseTimeFilterPostcodeSectorsPairs


encodeResponseTimeFilterPostcodeSectorsWithTag : ( String, String ) -> ResponseTimeFilterPostcodeSectors -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorsWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeSectorsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeSectorsPairs : ResponseTimeFilterPostcodeSectors -> List EncodedField
encodeResponseTimeFilterPostcodeSectorsPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeFilterPostcodeSectorsResult) model.results
            ]
    in
    pairs


encodeResponseTimeFilterPostcodeSectorsResult : ResponseTimeFilterPostcodeSectorsResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorsResult =
    encodeObject << encodeResponseTimeFilterPostcodeSectorsResultPairs


encodeResponseTimeFilterPostcodeSectorsResultWithTag : ( String, String ) -> ResponseTimeFilterPostcodeSectorsResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodeSectorsResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodeSectorsResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodeSectorsResultPairs : ResponseTimeFilterPostcodeSectorsResult -> List EncodedField
encodeResponseTimeFilterPostcodeSectorsResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "sectors" (Json.Encode.list encodeResponseTimeFilterPostcodeSector) model.sectors
            ]
    in
    pairs


encodeResponseTimeFilterPostcodes : ResponseTimeFilterPostcodes -> Json.Encode.Value
encodeResponseTimeFilterPostcodes =
    encodeObject << encodeResponseTimeFilterPostcodesPairs


encodeResponseTimeFilterPostcodesWithTag : ( String, String ) -> ResponseTimeFilterPostcodes -> Json.Encode.Value
encodeResponseTimeFilterPostcodesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodesPairs : ResponseTimeFilterPostcodes -> List EncodedField
encodeResponseTimeFilterPostcodesPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeFilterPostcodesResult) model.results
            ]
    in
    pairs


encodeResponseTimeFilterPostcodesProperties : ResponseTimeFilterPostcodesProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodesProperties =
    encodeObject << encodeResponseTimeFilterPostcodesPropertiesPairs


encodeResponseTimeFilterPostcodesPropertiesWithTag : ( String, String ) -> ResponseTimeFilterPostcodesProperties -> Json.Encode.Value
encodeResponseTimeFilterPostcodesPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodesPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodesPropertiesPairs : ResponseTimeFilterPostcodesProperties -> List EncodedField
encodeResponseTimeFilterPostcodesPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time" Json.Encode.int model.travelTime
            , maybeEncode "distance" Json.Encode.int model.distance
            ]
    in
    pairs


encodeResponseTimeFilterPostcodesResult : ResponseTimeFilterPostcodesResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodesResult =
    encodeObject << encodeResponseTimeFilterPostcodesResultPairs


encodeResponseTimeFilterPostcodesResultWithTag : ( String, String ) -> ResponseTimeFilterPostcodesResult -> Json.Encode.Value
encodeResponseTimeFilterPostcodesResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPostcodesResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPostcodesResultPairs : ResponseTimeFilterPostcodesResult -> List EncodedField
encodeResponseTimeFilterPostcodesResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "postcodes" (Json.Encode.list encodeResponseTimeFilterPostcode) model.postcodes
            ]
    in
    pairs


encodeResponseTimeFilterProperties : ResponseTimeFilterProperties -> Json.Encode.Value
encodeResponseTimeFilterProperties =
    encodeObject << encodeResponseTimeFilterPropertiesPairs


encodeResponseTimeFilterPropertiesWithTag : ( String, String ) -> ResponseTimeFilterProperties -> Json.Encode.Value
encodeResponseTimeFilterPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterPropertiesPairs : ResponseTimeFilterProperties -> List EncodedField
encodeResponseTimeFilterPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "travel_time" Json.Encode.int model.travelTime
            , maybeEncode "distance" Json.Encode.int model.distance
            , maybeEncode "distance_breakdown" (Json.Encode.list encodeResponseDistanceBreakdownItem) model.distanceBreakdown
            , maybeEncode "fares" encodeResponseFares model.fares
            , maybeEncode "route" encodeResponseRoute model.route
            ]
    in
    pairs


encodeResponseTimeFilterResult : ResponseTimeFilterResult -> Json.Encode.Value
encodeResponseTimeFilterResult =
    encodeObject << encodeResponseTimeFilterResultPairs


encodeResponseTimeFilterResultWithTag : ( String, String ) -> ResponseTimeFilterResult -> Json.Encode.Value
encodeResponseTimeFilterResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeFilterResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeFilterResultPairs : ResponseTimeFilterResult -> List EncodedField
encodeResponseTimeFilterResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "locations" (Json.Encode.list encodeResponseTimeFilterLocation) model.locations
            , encode "unreachable" (Json.Encode.list Json.Encode.string) model.unreachable
            ]
    in
    pairs


encodeResponseTimeMap : ResponseTimeMap -> Json.Encode.Value
encodeResponseTimeMap =
    encodeObject << encodeResponseTimeMapPairs


encodeResponseTimeMapWithTag : ( String, String ) -> ResponseTimeMap -> Json.Encode.Value
encodeResponseTimeMapWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapPairs : ResponseTimeMap -> List EncodedField
encodeResponseTimeMapPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeMapResult) model.results
            ]
    in
    pairs


encodeResponseTimeMapBoundingBoxes : ResponseTimeMapBoundingBoxes -> Json.Encode.Value
encodeResponseTimeMapBoundingBoxes =
    encodeObject << encodeResponseTimeMapBoundingBoxesPairs


encodeResponseTimeMapBoundingBoxesWithTag : ( String, String ) -> ResponseTimeMapBoundingBoxes -> Json.Encode.Value
encodeResponseTimeMapBoundingBoxesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapBoundingBoxesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapBoundingBoxesPairs : ResponseTimeMapBoundingBoxes -> List EncodedField
encodeResponseTimeMapBoundingBoxesPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeMapBoundingBoxesResult) model.results
            ]
    in
    pairs


encodeResponseTimeMapBoundingBoxesResult : ResponseTimeMapBoundingBoxesResult -> Json.Encode.Value
encodeResponseTimeMapBoundingBoxesResult =
    encodeObject << encodeResponseTimeMapBoundingBoxesResultPairs


encodeResponseTimeMapBoundingBoxesResultWithTag : ( String, String ) -> ResponseTimeMapBoundingBoxesResult -> Json.Encode.Value
encodeResponseTimeMapBoundingBoxesResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapBoundingBoxesResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapBoundingBoxesResultPairs : ResponseTimeMapBoundingBoxesResult -> List EncodedField
encodeResponseTimeMapBoundingBoxesResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "bounding_boxes" (Json.Encode.list encodeResponseBoundingBox) model.boundingBoxes
            , encode "properties" encodeResponseTimeMapProperties model.properties
            ]
    in
    pairs


encodeResponseTimeMapProperties : ResponseTimeMapProperties -> Json.Encode.Value
encodeResponseTimeMapProperties =
    encodeObject << encodeResponseTimeMapPropertiesPairs


encodeResponseTimeMapPropertiesWithTag : ( String, String ) -> ResponseTimeMapProperties -> Json.Encode.Value
encodeResponseTimeMapPropertiesWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapPropertiesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapPropertiesPairs : ResponseTimeMapProperties -> List EncodedField
encodeResponseTimeMapPropertiesPairs model =
    let
        pairs =
            [ maybeEncode "is_only_walking" Json.Encode.bool model.isOnlyWalking
            ]
    in
    pairs


encodeResponseTimeMapResult : ResponseTimeMapResult -> Json.Encode.Value
encodeResponseTimeMapResult =
    encodeObject << encodeResponseTimeMapResultPairs


encodeResponseTimeMapResultWithTag : ( String, String ) -> ResponseTimeMapResult -> Json.Encode.Value
encodeResponseTimeMapResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapResultPairs : ResponseTimeMapResult -> List EncodedField
encodeResponseTimeMapResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "shapes" (Json.Encode.list encodeResponseShape) model.shapes
            , encode "properties" encodeResponseTimeMapProperties model.properties
            ]
    in
    pairs


encodeResponseTimeMapWkt : ResponseTimeMapWkt -> Json.Encode.Value
encodeResponseTimeMapWkt =
    encodeObject << encodeResponseTimeMapWktPairs


encodeResponseTimeMapWktWithTag : ( String, String ) -> ResponseTimeMapWkt -> Json.Encode.Value
encodeResponseTimeMapWktWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapWktPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapWktPairs : ResponseTimeMapWkt -> List EncodedField
encodeResponseTimeMapWktPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeResponseTimeMapWktResult) model.results
            ]
    in
    pairs


encodeResponseTimeMapWktResult : ResponseTimeMapWktResult -> Json.Encode.Value
encodeResponseTimeMapWktResult =
    encodeObject << encodeResponseTimeMapWktResultPairs


encodeResponseTimeMapWktResultWithTag : ( String, String ) -> ResponseTimeMapWktResult -> Json.Encode.Value
encodeResponseTimeMapWktResultWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMapWktResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMapWktResultPairs : ResponseTimeMapWktResult -> List EncodedField
encodeResponseTimeMapWktResultPairs model =
    let
        pairs =
            [ encode "search_id" Json.Encode.string model.searchId
            , encode "shape" Json.Encode.string model.shape
            , encode "properties" encodeResponseTimeMapProperties model.properties
            ]
    in
    pairs


stringFromResponseTransportationMode : ResponseTransportationMode -> String
stringFromResponseTransportationMode model =
    case model of
        ResponseTransportationModeCar ->
            "car"

        ResponseTransportationModeParking ->
            "parking"

        ResponseTransportationModeBoarding ->
            "boarding"

        ResponseTransportationModeWalk ->
            "walk"

        ResponseTransportationModeBike ->
            "bike"

        ResponseTransportationModeTrain ->
            "train"

        ResponseTransportationModeRailNational ->
            "rail_national"

        ResponseTransportationModeRailOverground ->
            "rail_overground"

        ResponseTransportationModeRailUnderground ->
            "rail_underground"

        ResponseTransportationModeRailDlr ->
            "rail_dlr"

        ResponseTransportationModeBus ->
            "bus"

        ResponseTransportationModeCableCar ->
            "cable_car"

        ResponseTransportationModePlane ->
            "plane"

        ResponseTransportationModeFerry ->
            "ferry"

        ResponseTransportationModeCoach ->
            "coach"


encodeResponseTransportationMode : ResponseTransportationMode -> Json.Encode.Value
encodeResponseTransportationMode =
    Json.Encode.string << stringFromResponseTransportationMode


encodeResponseTravelTime : ResponseTravelTime -> Json.Encode.Value
encodeResponseTravelTime =
    encodeObject << encodeResponseTravelTimePairs


encodeResponseTravelTimeWithTag : ( String, String ) -> ResponseTravelTime -> Json.Encode.Value
encodeResponseTravelTimeWithTag (tagField, tag) model =
    encodeObject (encodeResponseTravelTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTravelTimePairs : ResponseTravelTime -> List EncodedField
encodeResponseTravelTimePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeResponseTravelTimeStatistics : ResponseTravelTimeStatistics -> Json.Encode.Value
encodeResponseTravelTimeStatistics =
    encodeObject << encodeResponseTravelTimeStatisticsPairs


encodeResponseTravelTimeStatisticsWithTag : ( String, String ) -> ResponseTravelTimeStatistics -> Json.Encode.Value
encodeResponseTravelTimeStatisticsWithTag (tagField, tag) model =
    encodeObject (encodeResponseTravelTimeStatisticsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTravelTimeStatisticsPairs : ResponseTravelTimeStatistics -> List EncodedField
encodeResponseTravelTimeStatisticsPairs model =
    let
        pairs =
            [ encode "min" Json.Encode.int model.min
            , encode "max" Json.Encode.int model.max
            , encode "mean" Json.Encode.int model.mean
            , encode "median" Json.Encode.int model.median
            ]
    in
    pairs


encodeResponseWktShape : ResponseWktShape -> Json.Encode.Value
encodeResponseWktShape =
    encodeObject << encodeResponseWktShapePairs


encodeResponseWktShapeWithTag : ( String, String ) -> ResponseWktShape -> Json.Encode.Value
encodeResponseWktShapeWithTag (tagField, tag) model =
    encodeObject (encodeResponseWktShapePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseWktShapePairs : ResponseWktShape -> List EncodedField
encodeResponseWktShapePairs model =
    let
        pairs =
            ]
    in
    pairs


-- DECODER


coordsDecoder : Json.Decode.Decoder Coords
coordsDecoder =
    Json.Decode.succeed Coords
        |> decode "lat" Json.Decode.float 
        |> decode "lng" Json.Decode.float 


requestArrivalTimePeriodDecoder : Json.Decode.Decoder RequestArrivalTimePeriod
requestArrivalTimePeriodDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "weekday_morning" ->
                        Json.Decode.succeed RequestArrivalTimePeriodWeekdayMorning

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestDepartureArrivalLocationOneDecoder : Json.Decode.Decoder RequestDepartureArrivalLocationOne
requestDepartureArrivalLocationOneDecoder =
    Json.Decode.succeed RequestDepartureArrivalLocationOne


requestDepartureArrivalTimeDecoder : Json.Decode.Decoder RequestDepartureArrivalTime
requestDepartureArrivalTimeDecoder =
    Json.Decode.succeed RequestDepartureArrivalTime


requestLevelOfDetailDecoder : Json.Decode.Decoder RequestLevelOfDetail
requestLevelOfDetailDecoder =
    Json.Decode.succeed RequestLevelOfDetail
        |> decode "scale_type"  
        |> decode "level"  


requestLevelOfDetailScaleTypeDecoder : Json.Decode.Decoder RequestLevelOfDetailScaleType
requestLevelOfDetailScaleTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "simple" ->
                        Json.Decode.succeed RequestLevelOfDetailScaleTypeSimple

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



requestLevelOfDetailLevelDecoder : Json.Decode.Decoder RequestLevelOfDetailLevel
requestLevelOfDetailLevelDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "lowest" ->
                        Json.Decode.succeed RequestLevelOfDetailLevelLowest

                    "low" ->
                        Json.Decode.succeed RequestLevelOfDetailLevelLow

                    "medium" ->
                        Json.Decode.succeed RequestLevelOfDetailLevelMedium

                    "high" ->
                        Json.Decode.succeed RequestLevelOfDetailLevelHigh

                    "highest" ->
                        Json.Decode.succeed RequestLevelOfDetailLevelHighest

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



requestLocationDecoder : Json.Decode.Decoder RequestLocation
requestLocationDecoder =
    Json.Decode.succeed RequestLocation
        |> decode "id" Json.Decode.string 
        |> decode "coords" coordsDecoder 


requestLocationIdDecoder : Json.Decode.Decoder RequestLocationId
requestLocationIdDecoder =
    Json.Decode.succeed RequestLocationId


requestRangeEnabledDecoder : Json.Decode.Decoder RequestRangeEnabled
requestRangeEnabledDecoder =
    Json.Decode.succeed RequestRangeEnabled


requestRangeFullDecoder : Json.Decode.Decoder RequestRangeFull
requestRangeFullDecoder =
    Json.Decode.succeed RequestRangeFull
        |> decode "enabled" Json.Decode.bool 
        |> decode "max_results" Json.Decode.int 
        |> decode "width" Json.Decode.int 


requestRangeNoMaxResultsDecoder : Json.Decode.Decoder RequestRangeNoMaxResults
requestRangeNoMaxResultsDecoder =
    Json.Decode.succeed RequestRangeNoMaxResults
        |> decode "enabled" Json.Decode.bool 
        |> decode "width" Json.Decode.int 


requestRangeWidthDecoder : Json.Decode.Decoder RequestRangeWidth
requestRangeWidthDecoder =
    Json.Decode.succeed RequestRangeWidth


requestRoutesDecoder : Json.Decode.Decoder RequestRoutes
requestRoutesDecoder =
    Json.Decode.succeed RequestRoutes
        |> decode "locations" (Json.Decode.list requestLocationDecoder) 
        |> maybeDecode "departure_searches" (Json.Decode.list requestRoutesDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestRoutesArrivalSearchDecoder) Nothing


requestRoutesArrivalSearchDecoder : Json.Decode.Decoder RequestRoutesArrivalSearch
requestRoutesArrivalSearchDecoder =
    Json.Decode.succeed RequestRoutesArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "departure_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "arrival_location_id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestRoutesPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestRoutesDepartureSearchDecoder : Json.Decode.Decoder RequestRoutesDepartureSearch
requestRoutesDepartureSearchDecoder =
    Json.Decode.succeed RequestRoutesDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "departure_location_id" Json.Decode.string 
        |> decode "arrival_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestRoutesPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestRoutesPropertyDecoder : Json.Decode.Decoder RequestRoutesProperty
requestRoutesPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time" ->
                        Json.Decode.succeed RequestRoutesPropertyTravelTime

                    "distance" ->
                        Json.Decode.succeed RequestRoutesPropertyDistance

                    "fares" ->
                        Json.Decode.succeed RequestRoutesPropertyFares

                    "route" ->
                        Json.Decode.succeed RequestRoutesPropertyRoute

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestSearchIdDecoder : Json.Decode.Decoder RequestSearchId
requestSearchIdDecoder =
    Json.Decode.succeed RequestSearchId


requestSupportedLocationsDecoder : Json.Decode.Decoder RequestSupportedLocations
requestSupportedLocationsDecoder =
    Json.Decode.succeed RequestSupportedLocations
        |> decode "locations" (Json.Decode.list requestLocationDecoder) 


requestTimeFilterDecoder : Json.Decode.Decoder RequestTimeFilter
requestTimeFilterDecoder =
    Json.Decode.succeed RequestTimeFilter
        |> decode "locations" (Json.Decode.list requestLocationDecoder) 
        |> maybeDecode "departure_searches" (Json.Decode.list requestTimeFilterDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestTimeFilterArrivalSearchDecoder) Nothing


requestTimeFilterArrivalSearchDecoder : Json.Decode.Decoder RequestTimeFilterArrivalSearch
requestTimeFilterArrivalSearchDecoder =
    Json.Decode.succeed RequestTimeFilterArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "departure_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "arrival_location_id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterDepartureSearchDecoder : Json.Decode.Decoder RequestTimeFilterDepartureSearch
requestTimeFilterDepartureSearchDecoder =
    Json.Decode.succeed RequestTimeFilterDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "departure_location_id" Json.Decode.string 
        |> decode "arrival_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterFastDecoder : Json.Decode.Decoder RequestTimeFilterFast
requestTimeFilterFastDecoder =
    Json.Decode.succeed RequestTimeFilterFast
        |> decode "locations" (Json.Decode.list requestLocationDecoder) 
        |> decode "arrival_searches" requestTimeFilterFastArrivalSearchesDecoder 


requestTimeFilterFastArrivalManyToOneSearchDecoder : Json.Decode.Decoder RequestTimeFilterFastArrivalManyToOneSearch
requestTimeFilterFastArrivalManyToOneSearchDecoder =
    Json.Decode.succeed RequestTimeFilterFastArrivalManyToOneSearch
        |> decode "id" Json.Decode.string 
        |> decode "arrival_location_id" Json.Decode.string 
        |> decode "departure_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "transportation" requestTransportationFastDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time_period" requestArrivalTimePeriodDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterFastPropertyDecoder) 


requestTimeFilterFastArrivalOneToManySearchDecoder : Json.Decode.Decoder RequestTimeFilterFastArrivalOneToManySearch
requestTimeFilterFastArrivalOneToManySearchDecoder =
    Json.Decode.succeed RequestTimeFilterFastArrivalOneToManySearch
        |> decode "id" Json.Decode.string 
        |> decode "departure_location_id" Json.Decode.string 
        |> decode "arrival_location_ids" (Json.Decode.list Json.Decode.string) 
        |> decode "transportation" requestTransportationFastDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time_period" requestArrivalTimePeriodDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterFastPropertyDecoder) 


requestTimeFilterFastArrivalSearchesDecoder : Json.Decode.Decoder RequestTimeFilterFastArrivalSearches
requestTimeFilterFastArrivalSearchesDecoder =
    Json.Decode.succeed RequestTimeFilterFastArrivalSearches
        |> maybeDecode "many_to_one" (Json.Decode.list requestTimeFilterFastArrivalManyToOneSearchDecoder) Nothing
        |> maybeDecode "one_to_many" (Json.Decode.list requestTimeFilterFastArrivalOneToManySearchDecoder) Nothing


requestTimeFilterFastPropertyDecoder : Json.Decode.Decoder RequestTimeFilterFastProperty
requestTimeFilterFastPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time" ->
                        Json.Decode.succeed RequestTimeFilterFastPropertyTravelTime

                    "fares" ->
                        Json.Decode.succeed RequestTimeFilterFastPropertyFares

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTimeFilterPostcodeDistrictsDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeDistricts
requestTimeFilterPostcodeDistrictsDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeDistricts
        |> maybeDecode "departure_searches" (Json.Decode.list requestTimeFilterPostcodeDistrictsDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestTimeFilterPostcodeDistrictsArrivalSearchDecoder) Nothing


requestTimeFilterPostcodeDistrictsArrivalSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeDistrictsArrivalSearch
requestTimeFilterPostcodeDistrictsArrivalSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeDistrictsArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "reachable_postcodes_threshold" Json.Decode.float 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodeDistrictsPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodeDistrictsDepartureSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeDistrictsDepartureSearch
requestTimeFilterPostcodeDistrictsDepartureSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeDistrictsDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "reachable_postcodes_threshold" Json.Decode.float 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodeDistrictsPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodeDistrictsPropertyDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeDistrictsProperty
requestTimeFilterPostcodeDistrictsPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time_reachable" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeDistrictsPropertyTravelTimeReachable

                    "travel_time_all" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeDistrictsPropertyTravelTimeAll

                    "coverage" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeDistrictsPropertyCoverage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTimeFilterPostcodeDistrictsReachablePostcodesThresholdDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold
requestTimeFilterPostcodeDistrictsReachablePostcodesThresholdDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeDistrictsReachablePostcodesThreshold


requestTimeFilterPostcodeSectorsDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeSectors
requestTimeFilterPostcodeSectorsDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeSectors
        |> maybeDecode "departure_searches" (Json.Decode.list requestTimeFilterPostcodeSectorsDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestTimeFilterPostcodeSectorsArrivalSearchDecoder) Nothing


requestTimeFilterPostcodeSectorsArrivalSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeSectorsArrivalSearch
requestTimeFilterPostcodeSectorsArrivalSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeSectorsArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "reachable_postcodes_threshold" Json.Decode.float 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodeSectorsPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodeSectorsDepartureSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeSectorsDepartureSearch
requestTimeFilterPostcodeSectorsDepartureSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeSectorsDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "reachable_postcodes_threshold" Json.Decode.float 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodeSectorsPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodeSectorsPropertyDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeSectorsProperty
requestTimeFilterPostcodeSectorsPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time_reachable" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeSectorsPropertyTravelTimeReachable

                    "travel_time_all" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeSectorsPropertyTravelTimeAll

                    "coverage" ->
                        Json.Decode.succeed RequestTimeFilterPostcodeSectorsPropertyCoverage

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTimeFilterPostcodeSectorsReachablePostcodesThresholdDecoder : Json.Decode.Decoder RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold
requestTimeFilterPostcodeSectorsReachablePostcodesThresholdDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodeSectorsReachablePostcodesThreshold


requestTimeFilterPostcodesDecoder : Json.Decode.Decoder RequestTimeFilterPostcodes
requestTimeFilterPostcodesDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodes
        |> maybeDecode "departure_searches" (Json.Decode.list requestTimeFilterPostcodesDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestTimeFilterPostcodesArrivalSearchDecoder) Nothing


requestTimeFilterPostcodesArrivalSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodesArrivalSearch
requestTimeFilterPostcodesArrivalSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodesArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodesPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodesDepartureSearchDecoder : Json.Decode.Decoder RequestTimeFilterPostcodesDepartureSearch
requestTimeFilterPostcodesDepartureSearchDecoder =
    Json.Decode.succeed RequestTimeFilterPostcodesDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "properties" (Json.Decode.list requestTimeFilterPostcodesPropertyDecoder) 
        |> maybeDecode "range" requestRangeFullDecoder Nothing


requestTimeFilterPostcodesPropertyDecoder : Json.Decode.Decoder RequestTimeFilterPostcodesProperty
requestTimeFilterPostcodesPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time" ->
                        Json.Decode.succeed RequestTimeFilterPostcodesPropertyTravelTime

                    "distance" ->
                        Json.Decode.succeed RequestTimeFilterPostcodesPropertyDistance

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTimeFilterPropertyDecoder : Json.Decode.Decoder RequestTimeFilterProperty
requestTimeFilterPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "travel_time" ->
                        Json.Decode.succeed RequestTimeFilterPropertyTravelTime

                    "distance" ->
                        Json.Decode.succeed RequestTimeFilterPropertyDistance

                    "distance_breakdown" ->
                        Json.Decode.succeed RequestTimeFilterPropertyDistanceBreakdown

                    "fares" ->
                        Json.Decode.succeed RequestTimeFilterPropertyFares

                    "route" ->
                        Json.Decode.succeed RequestTimeFilterPropertyRoute

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTimeMapDecoder : Json.Decode.Decoder RequestTimeMap
requestTimeMapDecoder =
    Json.Decode.succeed RequestTimeMap
        |> maybeDecode "departure_searches" (Json.Decode.list requestTimeMapDepartureSearchDecoder) Nothing
        |> maybeDecode "arrival_searches" (Json.Decode.list requestTimeMapArrivalSearchDecoder) Nothing
        |> maybeDecode "unions" (Json.Decode.list requestUnionOnIntersectionDecoder) Nothing
        |> maybeDecode "intersections" (Json.Decode.list requestUnionOnIntersectionDecoder) Nothing


requestTimeMapArrivalSearchDecoder : Json.Decode.Decoder RequestTimeMapArrivalSearch
requestTimeMapArrivalSearchDecoder =
    Json.Decode.succeed RequestTimeMapArrivalSearch
        |> decode "id" Json.Decode.string 
        |> decode "coords" coordsDecoder 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> maybeDecode "properties" (Json.Decode.list requestTimeMapPropertyDecoder) Nothing
        |> maybeDecode "range" requestRangeNoMaxResultsDecoder Nothing
        |> maybeDecode "level_of_detail" requestLevelOfDetailDecoder Nothing


requestTimeMapDepartureSearchDecoder : Json.Decode.Decoder RequestTimeMapDepartureSearch
requestTimeMapDepartureSearchDecoder =
    Json.Decode.succeed RequestTimeMapDepartureSearch
        |> decode "id" Json.Decode.string 
        |> decode "coords" coordsDecoder 
        |> decode "transportation" requestTransportationDecoder 
        |> decode "travel_time" Json.Decode.int 
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> maybeDecode "properties" (Json.Decode.list requestTimeMapPropertyDecoder) Nothing
        |> maybeDecode "range" requestRangeNoMaxResultsDecoder Nothing
        |> maybeDecode "level_of_detail" requestLevelOfDetailDecoder Nothing


requestTimeMapPropertyDecoder : Json.Decode.Decoder RequestTimeMapProperty
requestTimeMapPropertyDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "is_only_walking" ->
                        Json.Decode.succeed RequestTimeMapPropertyIsOnlyWalking

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestTransportationDecoder : Json.Decode.Decoder RequestTransportation
requestTransportationDecoder =
    Json.Decode.succeed RequestTransportation
        |> decode "type"  
        |> maybeDecode "disable_border_crossing" Json.Decode.bool Nothing
        |> maybeDecode "pt_change_delay" Json.Decode.int Nothing
        |> maybeDecode "walking_time" Json.Decode.int Nothing
        |> maybeDecode "driving_time_to_station" Json.Decode.int Nothing
        |> maybeDecode "cycling_time_to_station" Json.Decode.int Nothing
        |> maybeDecode "parking_time" Json.Decode.int Nothing
        |> maybeDecode "boarding_time" Json.Decode.int Nothing


requestTransportationTypeDecoder : Json.Decode.Decoder RequestTransportationType
requestTransportationTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "cycling" ->
                        Json.Decode.succeed RequestTransportationTypeCycling

                    "driving" ->
                        Json.Decode.succeed RequestTransportationTypeDriving

                    "driving+train" ->
                        Json.Decode.succeed RequestTransportationTypeDriving+train

                    "public_transport" ->
                        Json.Decode.succeed RequestTransportationTypePublicTransport

                    "walking" ->
                        Json.Decode.succeed RequestTransportationTypeWalking

                    "coach" ->
                        Json.Decode.succeed RequestTransportationTypeCoach

                    "bus" ->
                        Json.Decode.succeed RequestTransportationTypeBus

                    "train" ->
                        Json.Decode.succeed RequestTransportationTypeTrain

                    "ferry" ->
                        Json.Decode.succeed RequestTransportationTypeFerry

                    "driving+ferry" ->
                        Json.Decode.succeed RequestTransportationTypeDriving+ferry

                    "cycling+ferry" ->
                        Json.Decode.succeed RequestTransportationTypeCycling+ferry

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



requestTransportationFastDecoder : Json.Decode.Decoder RequestTransportationFast
requestTransportationFastDecoder =
    Json.Decode.succeed RequestTransportationFast
        |> decode "type"  


requestTransportationFastTypeDecoder : Json.Decode.Decoder RequestTransportationFastType
requestTransportationFastTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "public_transport" ->
                        Json.Decode.succeed RequestTransportationFastTypePublicTransport

                    "driving" ->
                        Json.Decode.succeed RequestTransportationFastTypeDriving

                    "driving+public_transport" ->
                        Json.Decode.succeed RequestTransportationFastTypeDriving+publicTransport

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



requestTravelTimeDecoder : Json.Decode.Decoder RequestTravelTime
requestTravelTimeDecoder =
    Json.Decode.succeed RequestTravelTime


requestUnionOnIntersectionDecoder : Json.Decode.Decoder RequestUnionOnIntersection
requestUnionOnIntersectionDecoder =
    Json.Decode.succeed RequestUnionOnIntersection
        |> decode "id" Json.Decode.string 
        |> decode "search_ids" (Json.Decode.list Json.Decode.string) 


responseBoundingBoxDecoder : Json.Decode.Decoder ResponseBoundingBox
responseBoundingBoxDecoder =
    Json.Decode.succeed ResponseBoundingBox
        |> decode "envelope" responseBoxDecoder 
        |> decode "boxes" (Json.Decode.list responseBoxDecoder) 


responseBoxDecoder : Json.Decode.Decoder ResponseBox
responseBoxDecoder =
    Json.Decode.succeed ResponseBox
        |> decode "min_lat" Json.Decode.float 
        |> decode "max_lat" Json.Decode.float 
        |> decode "min_lng" Json.Decode.float 
        |> decode "max_lng" Json.Decode.float 


responseDistanceDecoder : Json.Decode.Decoder ResponseDistance
responseDistanceDecoder =
    Json.Decode.succeed ResponseDistance


responseDistanceBreakdownItemDecoder : Json.Decode.Decoder ResponseDistanceBreakdownItem
responseDistanceBreakdownItemDecoder =
    Json.Decode.succeed ResponseDistanceBreakdownItem
        |> decode "mode" responseTransportationModeDecoder 
        |> decode "distance" Json.Decode.int 


responseErrorDecoder : Json.Decode.Decoder ResponseError
responseErrorDecoder =
    Json.Decode.succeed ResponseError
        |> maybeDecode "http_status" Json.Decode.int Nothing
        |> maybeDecode "error_code" Json.Decode.int Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "documentation_link" Json.Decode.string Nothing
        |> maybeDecode "additional_info" (Json.Decode.dict (Json.Decode.list Json.Decode.string)stringDecoder) Nothing


responseFareTicketDecoder : Json.Decode.Decoder ResponseFareTicket
responseFareTicketDecoder =
    Json.Decode.succeed ResponseFareTicket
        |> decode "type"  
        |> decode "price" Json.Decode.float 
        |> decode "currency" Json.Decode.string 


responseFareTicketTypeDecoder : Json.Decode.Decoder ResponseFareTicketType
responseFareTicketTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "single" ->
                        Json.Decode.succeed ResponseFareTicketTypeSingle

                    "week" ->
                        Json.Decode.succeed ResponseFareTicketTypeWeek

                    "month" ->
                        Json.Decode.succeed ResponseFareTicketTypeMonth

                    "year" ->
                        Json.Decode.succeed ResponseFareTicketTypeYear

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



responseFaresDecoder : Json.Decode.Decoder ResponseFares
responseFaresDecoder =
    Json.Decode.succeed ResponseFares
        |> decode "breakdown" (Json.Decode.list responseFaresBreakdownItemDecoder) 
        |> decode "tickets_total" (Json.Decode.list responseFareTicketDecoder) 


responseFaresBreakdownItemDecoder : Json.Decode.Decoder ResponseFaresBreakdownItem
responseFaresBreakdownItemDecoder =
    Json.Decode.succeed ResponseFaresBreakdownItem
        |> decode "modes" (Json.Decode.list responseTransportationModeDecoder) 
        |> decode "route_part_ids" (Json.Decode.list Json.Decode.int) 
        |> decode "tickets" (Json.Decode.list responseFareTicketDecoder) 


responseFaresFastDecoder : Json.Decode.Decoder ResponseFaresFast
responseFaresFastDecoder =
    Json.Decode.succeed ResponseFaresFast
        |> decode "tickets_total" (Json.Decode.list responseFareTicketDecoder) 


responseGeocodingDecoder : Json.Decode.Decoder ResponseGeocoding
responseGeocodingDecoder =
    Json.Decode.succeed ResponseGeocoding
        |> decode "type" Json.Decode.string 
        |> decode "features" (Json.Decode.list responseGeocodingGeoJsonFeatureDecoder) 


responseGeocodingGeoJsonFeatureDecoder : Json.Decode.Decoder ResponseGeocodingGeoJsonFeature
responseGeocodingGeoJsonFeatureDecoder =
    Json.Decode.succeed ResponseGeocodingGeoJsonFeature
        |> decode "type" Json.Decode.string 
        |> decode "geometry" responseGeocodingGeometryDecoder 
        |> decode "properties" responseGeocodingPropertiesDecoder 


responseGeocodingGeometryDecoder : Json.Decode.Decoder ResponseGeocodingGeometry
responseGeocodingGeometryDecoder =
    Json.Decode.succeed ResponseGeocodingGeometry
        |> decode "type" Json.Decode.string 
        |> decode "coordinates" (Json.Decode.list Json.Decode.float) 


responseGeocodingPropertiesDecoder : Json.Decode.Decoder ResponseGeocodingProperties
responseGeocodingPropertiesDecoder =
    Json.Decode.succeed ResponseGeocodingProperties
        |> decode "name" Json.Decode.string 
        |> decode "label" Json.Decode.string 
        |> maybeDecode "score" Json.Decode.float Nothing
        |> maybeDecode "house_number" Json.Decode.string Nothing
        |> maybeDecode "street" Json.Decode.string Nothing
        |> maybeDecode "region" Json.Decode.string Nothing
        |> maybeDecode "region_code" Json.Decode.string Nothing
        |> maybeDecode "neighbourhood" Json.Decode.string Nothing
        |> maybeDecode "county" Json.Decode.string Nothing
        |> maybeDecode "macroregion" Json.Decode.string Nothing
        |> maybeDecode "city" Json.Decode.string Nothing
        |> maybeDecode "country" Json.Decode.string Nothing
        |> maybeDecode "country_code" Json.Decode.string Nothing
        |> maybeDecode "continent" Json.Decode.string Nothing
        |> maybeDecode "postcode" Json.Decode.string Nothing
        |> maybeDecode "features" responseMapInfoFeaturesDecoder Nothing


responseLocalTimeDecoder : Json.Decode.Decoder ResponseLocalTime
responseLocalTimeDecoder =
    Json.Decode.succeed ResponseLocalTime


responseLocationIdDecoder : Json.Decode.Decoder ResponseLocationId
responseLocationIdDecoder =
    Json.Decode.succeed ResponseLocationId


responseMapInfoDecoder : Json.Decode.Decoder ResponseMapInfo
responseMapInfoDecoder =
    Json.Decode.succeed ResponseMapInfo
        |> decode "maps" (Json.Decode.list responseMapInfoMapDecoder) 


responseMapInfoFeaturesDecoder : Json.Decode.Decoder ResponseMapInfoFeatures
responseMapInfoFeaturesDecoder =
    Json.Decode.succeed ResponseMapInfoFeatures
        |> maybeDecode "public_transport" responseMapInfoFeaturesPublicTransportDecoder Nothing
        |> decode "fares" Json.Decode.bool 
        |> decode "postcodes" Json.Decode.bool 


responseMapInfoFeaturesPublicTransportDecoder : Json.Decode.Decoder ResponseMapInfoFeaturesPublicTransport
responseMapInfoFeaturesPublicTransportDecoder =
    Json.Decode.succeed ResponseMapInfoFeaturesPublicTransport
        |> decode "date_start" Api.Time.dateTimeDecoder 
        |> decode "date_end" Api.Time.dateTimeDecoder 


responseMapInfoMapDecoder : Json.Decode.Decoder ResponseMapInfoMap
responseMapInfoMapDecoder =
    Json.Decode.succeed ResponseMapInfoMap
        |> decode "name" Json.Decode.string 
        |> decode "features" responseMapInfoFeaturesDecoder 


responseRouteDecoder : Json.Decode.Decoder ResponseRoute
responseRouteDecoder =
    Json.Decode.succeed ResponseRoute
        |> decode "departure_time" Api.Time.dateTimeDecoder 
        |> decode "arrival_time" Api.Time.dateTimeDecoder 
        |> decode "parts" (Json.Decode.list responseRoutePartDecoder) 


responseRoutePartDecoder : Json.Decode.Decoder ResponseRoutePart
responseRoutePartDecoder =
    Json.Decode.succeed ResponseRoutePart
        |> decode "id" Json.Decode.string 
        |> decode "type"  
        |> decode "mode" responseTransportationModeDecoder 
        |> decode "directions" Json.Decode.string 
        |> decode "distance" Json.Decode.int 
        |> decode "travel_time" Json.Decode.int 
        |> decode "coords" (Json.Decode.list coordsDecoder) 
        |> maybeDecode "direction" Json.Decode.string Nothing
        |> maybeDecode "road" Json.Decode.string Nothing
        |> maybeDecode "turn" Json.Decode.string Nothing
        |> maybeDecode "line" Json.Decode.string Nothing
        |> maybeDecode "departure_station" Json.Decode.string Nothing
        |> maybeDecode "arrival_station" Json.Decode.string Nothing
        |> maybeDecode "departs_at" Json.Decode.string Nothing
        |> maybeDecode "arrives_at" Json.Decode.string Nothing
        |> maybeDecode "num_stops" Json.Decode.int Nothing


responseRoutePartTypeDecoder : Json.Decode.Decoder ResponseRoutePartType
responseRoutePartTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "basic" ->
                        Json.Decode.succeed ResponseRoutePartTypeBasic

                    "start_end" ->
                        Json.Decode.succeed ResponseRoutePartTypeStartEnd

                    "road" ->
                        Json.Decode.succeed ResponseRoutePartTypeRoad

                    "public_transport" ->
                        Json.Decode.succeed ResponseRoutePartTypePublicTransport

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



responseRoutesDecoder : Json.Decode.Decoder ResponseRoutes
responseRoutesDecoder =
    Json.Decode.succeed ResponseRoutes
        |> decode "results" (Json.Decode.list responseRoutesResultDecoder) 


responseRoutesLocationDecoder : Json.Decode.Decoder ResponseRoutesLocation
responseRoutesLocationDecoder =
    Json.Decode.succeed ResponseRoutesLocation
        |> decode "id" Json.Decode.string 
        |> decode "properties" (Json.Decode.list responseRoutesPropertiesDecoder) 


responseRoutesPropertiesDecoder : Json.Decode.Decoder ResponseRoutesProperties
responseRoutesPropertiesDecoder =
    Json.Decode.succeed ResponseRoutesProperties
        |> maybeDecode "travel_time" Json.Decode.int Nothing
        |> maybeDecode "distance" Json.Decode.int Nothing
        |> maybeDecode "fares" responseFaresDecoder Nothing
        |> maybeDecode "route" responseRouteDecoder Nothing


responseRoutesResultDecoder : Json.Decode.Decoder ResponseRoutesResult
responseRoutesResultDecoder =
    Json.Decode.succeed ResponseRoutesResult
        |> decode "search_id" Json.Decode.string 
        |> decode "locations" (Json.Decode.list responseRoutesLocationDecoder) 
        |> decode "unreachable" (Json.Decode.list Json.Decode.string) 


responseSearchIdDecoder : Json.Decode.Decoder ResponseSearchId
responseSearchIdDecoder =
    Json.Decode.succeed ResponseSearchId


responseShapeDecoder : Json.Decode.Decoder ResponseShape
responseShapeDecoder =
    Json.Decode.succeed ResponseShape
        |> decode "shell" (Json.Decode.list coordsDecoder) 
        |> decode "holes" (Json.Decode.list (Json.Decode.list coordsDecoder)) 


responseSupportedLocationDecoder : Json.Decode.Decoder ResponseSupportedLocation
responseSupportedLocationDecoder =
    Json.Decode.succeed ResponseSupportedLocation
        |> decode "id" Json.Decode.string 
        |> decode "map_name" Json.Decode.string 


responseSupportedLocationsDecoder : Json.Decode.Decoder ResponseSupportedLocations
responseSupportedLocationsDecoder =
    Json.Decode.succeed ResponseSupportedLocations
        |> decode "locations" (Json.Decode.list responseSupportedLocationDecoder) 
        |> decode "unsupported_locations" (Json.Decode.list Json.Decode.string) 


responseTimeFilterDecoder : Json.Decode.Decoder ResponseTimeFilter
responseTimeFilterDecoder =
    Json.Decode.succeed ResponseTimeFilter
        |> decode "results" (Json.Decode.list responseTimeFilterResultDecoder) 


responseTimeFilterFastDecoder : Json.Decode.Decoder ResponseTimeFilterFast
responseTimeFilterFastDecoder =
    Json.Decode.succeed ResponseTimeFilterFast
        |> decode "results" (Json.Decode.list responseTimeFilterFastResultDecoder) 


responseTimeFilterFastLocationDecoder : Json.Decode.Decoder ResponseTimeFilterFastLocation
responseTimeFilterFastLocationDecoder =
    Json.Decode.succeed ResponseTimeFilterFastLocation
        |> decode "id" Json.Decode.string 
        |> decode "properties" (Json.Decode.list responseTimeFilterFastPropertiesDecoder) 


responseTimeFilterFastPropertiesDecoder : Json.Decode.Decoder ResponseTimeFilterFastProperties
responseTimeFilterFastPropertiesDecoder =
    Json.Decode.succeed ResponseTimeFilterFastProperties
        |> maybeDecode "travel_time" Json.Decode.int Nothing
        |> maybeDecode "fares" responseFaresFastDecoder Nothing


responseTimeFilterFastResultDecoder : Json.Decode.Decoder ResponseTimeFilterFastResult
responseTimeFilterFastResultDecoder =
    Json.Decode.succeed ResponseTimeFilterFastResult
        |> decode "search_id" Json.Decode.string 
        |> decode "locations" (Json.Decode.list responseTimeFilterFastLocationDecoder) 
        |> decode "unreachable" (Json.Decode.list Json.Decode.string) 


responseTimeFilterLocationDecoder : Json.Decode.Decoder ResponseTimeFilterLocation
responseTimeFilterLocationDecoder =
    Json.Decode.succeed ResponseTimeFilterLocation
        |> decode "id" Json.Decode.string 
        |> decode "properties" (Json.Decode.list responseTimeFilterPropertiesDecoder) 


responseTimeFilterPostcodeDecoder : Json.Decode.Decoder ResponseTimeFilterPostcode
responseTimeFilterPostcodeDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcode
        |> decode "code" Json.Decode.string 
        |> decode "properties" (Json.Decode.list responseTimeFilterPostcodesPropertiesDecoder) 


responseTimeFilterPostcodeDistrictDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeDistrict
responseTimeFilterPostcodeDistrictDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeDistrict
        |> decode "code" Json.Decode.string 
        |> decode "properties" responseTimeFilterPostcodeDistrictPropertiesDecoder 


responseTimeFilterPostcodeDistrictPropertiesDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeDistrictProperties
responseTimeFilterPostcodeDistrictPropertiesDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeDistrictProperties
        |> maybeDecode "travel_time_reachable" responseTravelTimeStatisticsDecoder Nothing
        |> maybeDecode "travel_time_all" responseTravelTimeStatisticsDecoder Nothing
        |> maybeDecode "coverage" Json.Decode.float Nothing


responseTimeFilterPostcodeDistrictsDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeDistricts
responseTimeFilterPostcodeDistrictsDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeDistricts
        |> decode "results" (Json.Decode.list responseTimeFilterPostcodeDistrictsResultDecoder) 


responseTimeFilterPostcodeDistrictsResultDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeDistrictsResult
responseTimeFilterPostcodeDistrictsResultDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeDistrictsResult
        |> decode "search_id" Json.Decode.string 
        |> decode "districts" (Json.Decode.list responseTimeFilterPostcodeDistrictDecoder) 


responseTimeFilterPostcodeSectorDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeSector
responseTimeFilterPostcodeSectorDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeSector
        |> decode "code" Json.Decode.string 
        |> decode "properties" responseTimeFilterPostcodeSectorPropertiesDecoder 


responseTimeFilterPostcodeSectorPropertiesDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeSectorProperties
responseTimeFilterPostcodeSectorPropertiesDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeSectorProperties
        |> maybeDecode "travel_time_reachable" responseTravelTimeStatisticsDecoder Nothing
        |> maybeDecode "travel_time_all" responseTravelTimeStatisticsDecoder Nothing
        |> maybeDecode "coverage" Json.Decode.float Nothing


responseTimeFilterPostcodeSectorsDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeSectors
responseTimeFilterPostcodeSectorsDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeSectors
        |> decode "results" (Json.Decode.list responseTimeFilterPostcodeSectorsResultDecoder) 


responseTimeFilterPostcodeSectorsResultDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodeSectorsResult
responseTimeFilterPostcodeSectorsResultDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodeSectorsResult
        |> decode "search_id" Json.Decode.string 
        |> decode "sectors" (Json.Decode.list responseTimeFilterPostcodeSectorDecoder) 


responseTimeFilterPostcodesDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodes
responseTimeFilterPostcodesDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodes
        |> decode "results" (Json.Decode.list responseTimeFilterPostcodesResultDecoder) 


responseTimeFilterPostcodesPropertiesDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodesProperties
responseTimeFilterPostcodesPropertiesDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodesProperties
        |> maybeDecode "travel_time" Json.Decode.int Nothing
        |> maybeDecode "distance" Json.Decode.int Nothing


responseTimeFilterPostcodesResultDecoder : Json.Decode.Decoder ResponseTimeFilterPostcodesResult
responseTimeFilterPostcodesResultDecoder =
    Json.Decode.succeed ResponseTimeFilterPostcodesResult
        |> decode "search_id" Json.Decode.string 
        |> decode "postcodes" (Json.Decode.list responseTimeFilterPostcodeDecoder) 


responseTimeFilterPropertiesDecoder : Json.Decode.Decoder ResponseTimeFilterProperties
responseTimeFilterPropertiesDecoder =
    Json.Decode.succeed ResponseTimeFilterProperties
        |> maybeDecode "travel_time" Json.Decode.int Nothing
        |> maybeDecode "distance" Json.Decode.int Nothing
        |> maybeDecode "distance_breakdown" (Json.Decode.list responseDistanceBreakdownItemDecoder) Nothing
        |> maybeDecode "fares" responseFaresDecoder Nothing
        |> maybeDecode "route" responseRouteDecoder Nothing


responseTimeFilterResultDecoder : Json.Decode.Decoder ResponseTimeFilterResult
responseTimeFilterResultDecoder =
    Json.Decode.succeed ResponseTimeFilterResult
        |> decode "search_id" Json.Decode.string 
        |> decode "locations" (Json.Decode.list responseTimeFilterLocationDecoder) 
        |> decode "unreachable" (Json.Decode.list Json.Decode.string) 


responseTimeMapDecoder : Json.Decode.Decoder ResponseTimeMap
responseTimeMapDecoder =
    Json.Decode.succeed ResponseTimeMap
        |> decode "results" (Json.Decode.list responseTimeMapResultDecoder) 


responseTimeMapBoundingBoxesDecoder : Json.Decode.Decoder ResponseTimeMapBoundingBoxes
responseTimeMapBoundingBoxesDecoder =
    Json.Decode.succeed ResponseTimeMapBoundingBoxes
        |> decode "results" (Json.Decode.list responseTimeMapBoundingBoxesResultDecoder) 


responseTimeMapBoundingBoxesResultDecoder : Json.Decode.Decoder ResponseTimeMapBoundingBoxesResult
responseTimeMapBoundingBoxesResultDecoder =
    Json.Decode.succeed ResponseTimeMapBoundingBoxesResult
        |> decode "search_id" Json.Decode.string 
        |> decode "bounding_boxes" (Json.Decode.list responseBoundingBoxDecoder) 
        |> decode "properties" responseTimeMapPropertiesDecoder 


responseTimeMapPropertiesDecoder : Json.Decode.Decoder ResponseTimeMapProperties
responseTimeMapPropertiesDecoder =
    Json.Decode.succeed ResponseTimeMapProperties
        |> maybeDecode "is_only_walking" Json.Decode.bool Nothing


responseTimeMapResultDecoder : Json.Decode.Decoder ResponseTimeMapResult
responseTimeMapResultDecoder =
    Json.Decode.succeed ResponseTimeMapResult
        |> decode "search_id" Json.Decode.string 
        |> decode "shapes" (Json.Decode.list responseShapeDecoder) 
        |> decode "properties" responseTimeMapPropertiesDecoder 


responseTimeMapWktDecoder : Json.Decode.Decoder ResponseTimeMapWkt
responseTimeMapWktDecoder =
    Json.Decode.succeed ResponseTimeMapWkt
        |> decode "results" (Json.Decode.list responseTimeMapWktResultDecoder) 


responseTimeMapWktResultDecoder : Json.Decode.Decoder ResponseTimeMapWktResult
responseTimeMapWktResultDecoder =
    Json.Decode.succeed ResponseTimeMapWktResult
        |> decode "search_id" Json.Decode.string 
        |> decode "shape" Json.Decode.string 
        |> decode "properties" responseTimeMapPropertiesDecoder 


responseTransportationModeDecoder : Json.Decode.Decoder ResponseTransportationMode
responseTransportationModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "car" ->
                        Json.Decode.succeed ResponseTransportationModeCar

                    "parking" ->
                        Json.Decode.succeed ResponseTransportationModeParking

                    "boarding" ->
                        Json.Decode.succeed ResponseTransportationModeBoarding

                    "walk" ->
                        Json.Decode.succeed ResponseTransportationModeWalk

                    "bike" ->
                        Json.Decode.succeed ResponseTransportationModeBike

                    "train" ->
                        Json.Decode.succeed ResponseTransportationModeTrain

                    "rail_national" ->
                        Json.Decode.succeed ResponseTransportationModeRailNational

                    "rail_overground" ->
                        Json.Decode.succeed ResponseTransportationModeRailOverground

                    "rail_underground" ->
                        Json.Decode.succeed ResponseTransportationModeRailUnderground

                    "rail_dlr" ->
                        Json.Decode.succeed ResponseTransportationModeRailDlr

                    "bus" ->
                        Json.Decode.succeed ResponseTransportationModeBus

                    "cable_car" ->
                        Json.Decode.succeed ResponseTransportationModeCableCar

                    "plane" ->
                        Json.Decode.succeed ResponseTransportationModePlane

                    "ferry" ->
                        Json.Decode.succeed ResponseTransportationModeFerry

                    "coach" ->
                        Json.Decode.succeed ResponseTransportationModeCoach

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


responseTravelTimeDecoder : Json.Decode.Decoder ResponseTravelTime
responseTravelTimeDecoder =
    Json.Decode.succeed ResponseTravelTime


responseTravelTimeStatisticsDecoder : Json.Decode.Decoder ResponseTravelTimeStatistics
responseTravelTimeStatisticsDecoder =
    Json.Decode.succeed ResponseTravelTimeStatistics
        |> decode "min" Json.Decode.int 
        |> decode "max" Json.Decode.int 
        |> decode "mean" Json.Decode.int 
        |> decode "median" Json.Decode.int 


responseWktShapeDecoder : Json.Decode.Decoder ResponseWktShape
responseWktShapeDecoder =
    Json.Decode.succeed ResponseWktShape




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f