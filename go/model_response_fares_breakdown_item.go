/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.2
 * Contact: support@igeolise.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseFaresBreakdownItem struct for ResponseFaresBreakdownItem
type ResponseFaresBreakdownItem struct {
	Modes []ResponseTransportationMode `json:"modes"`
	RoutePartIds []int32 `json:"route_part_ids"`
	Tickets []ResponseFareTicket `json:"tickets"`
}

// NewResponseFaresBreakdownItem instantiates a new ResponseFaresBreakdownItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseFaresBreakdownItem(modes []ResponseTransportationMode, routePartIds []int32, tickets []ResponseFareTicket) *ResponseFaresBreakdownItem {
	this := ResponseFaresBreakdownItem{}
	this.Modes = modes
	this.RoutePartIds = routePartIds
	this.Tickets = tickets
	return &this
}

// NewResponseFaresBreakdownItemWithDefaults instantiates a new ResponseFaresBreakdownItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseFaresBreakdownItemWithDefaults() *ResponseFaresBreakdownItem {
	this := ResponseFaresBreakdownItem{}
	return &this
}

// GetModes returns the Modes field value
func (o *ResponseFaresBreakdownItem) GetModes() []ResponseTransportationMode {
	if o == nil {
		var ret []ResponseTransportationMode
		return ret
	}

	return o.Modes
}

// GetModesOk returns a tuple with the Modes field value
// and a boolean to check if the value has been set.
func (o *ResponseFaresBreakdownItem) GetModesOk() (*[]ResponseTransportationMode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Modes, true
}

// SetModes sets field value
func (o *ResponseFaresBreakdownItem) SetModes(v []ResponseTransportationMode) {
	o.Modes = v
}

// GetRoutePartIds returns the RoutePartIds field value
func (o *ResponseFaresBreakdownItem) GetRoutePartIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RoutePartIds
}

// GetRoutePartIdsOk returns a tuple with the RoutePartIds field value
// and a boolean to check if the value has been set.
func (o *ResponseFaresBreakdownItem) GetRoutePartIdsOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RoutePartIds, true
}

// SetRoutePartIds sets field value
func (o *ResponseFaresBreakdownItem) SetRoutePartIds(v []int32) {
	o.RoutePartIds = v
}

// GetTickets returns the Tickets field value
func (o *ResponseFaresBreakdownItem) GetTickets() []ResponseFareTicket {
	if o == nil {
		var ret []ResponseFareTicket
		return ret
	}

	return o.Tickets
}

// GetTicketsOk returns a tuple with the Tickets field value
// and a boolean to check if the value has been set.
func (o *ResponseFaresBreakdownItem) GetTicketsOk() (*[]ResponseFareTicket, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tickets, true
}

// SetTickets sets field value
func (o *ResponseFaresBreakdownItem) SetTickets(v []ResponseFareTicket) {
	o.Tickets = v
}

func (o ResponseFaresBreakdownItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["modes"] = o.Modes
	}
	if true {
		toSerialize["route_part_ids"] = o.RoutePartIds
	}
	if true {
		toSerialize["tickets"] = o.Tickets
	}
	return json.Marshal(toSerialize)
}

type NullableResponseFaresBreakdownItem struct {
	value *ResponseFaresBreakdownItem
	isSet bool
}

func (v NullableResponseFaresBreakdownItem) Get() *ResponseFaresBreakdownItem {
	return v.value
}

func (v *NullableResponseFaresBreakdownItem) Set(val *ResponseFaresBreakdownItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseFaresBreakdownItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseFaresBreakdownItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseFaresBreakdownItem(val *ResponseFaresBreakdownItem) *NullableResponseFaresBreakdownItem {
	return &NullableResponseFaresBreakdownItem{value: val, isSet: true}
}

func (v NullableResponseFaresBreakdownItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseFaresBreakdownItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


