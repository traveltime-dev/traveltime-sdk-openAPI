/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.3
 * Contact: support@igeolise.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseGeocoding struct for ResponseGeocoding
type ResponseGeocoding struct {
	Type string `json:"type"`
	Features []ResponseGeocodingGeoJsonFeature `json:"features"`
}

// NewResponseGeocoding instantiates a new ResponseGeocoding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseGeocoding(type_ string, features []ResponseGeocodingGeoJsonFeature) *ResponseGeocoding {
	this := ResponseGeocoding{}
	this.Type = type_
	this.Features = features
	return &this
}

// NewResponseGeocodingWithDefaults instantiates a new ResponseGeocoding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseGeocodingWithDefaults() *ResponseGeocoding {
	this := ResponseGeocoding{}
	return &this
}

// GetType returns the Type field value
func (o *ResponseGeocoding) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponseGeocoding) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponseGeocoding) SetType(v string) {
	o.Type = v
}

// GetFeatures returns the Features field value
func (o *ResponseGeocoding) GetFeatures() []ResponseGeocodingGeoJsonFeature {
	if o == nil {
		var ret []ResponseGeocodingGeoJsonFeature
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *ResponseGeocoding) GetFeaturesOk() (*[]ResponseGeocodingGeoJsonFeature, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Features, true
}

// SetFeatures sets field value
func (o *ResponseGeocoding) SetFeatures(v []ResponseGeocodingGeoJsonFeature) {
	o.Features = v
}

func (o ResponseGeocoding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["features"] = o.Features
	}
	return json.Marshal(toSerialize)
}

type NullableResponseGeocoding struct {
	value *ResponseGeocoding
	isSet bool
}

func (v NullableResponseGeocoding) Get() *ResponseGeocoding {
	return v.value
}

func (v *NullableResponseGeocoding) Set(val *ResponseGeocoding) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGeocoding) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGeocoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGeocoding(val *ResponseGeocoding) *NullableResponseGeocoding {
	return &NullableResponseGeocoding{value: val, isSet: true}
}

func (v NullableResponseGeocoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGeocoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


