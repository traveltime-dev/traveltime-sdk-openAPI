/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.3
 * Contact: support@igeolise.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseTimeFilterPostcodeDistrict struct for ResponseTimeFilterPostcodeDistrict
type ResponseTimeFilterPostcodeDistrict struct {
	Code string `json:"code"`
	Properties ResponseTimeFilterPostcodeDistrictProperties `json:"properties"`
}

// NewResponseTimeFilterPostcodeDistrict instantiates a new ResponseTimeFilterPostcodeDistrict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTimeFilterPostcodeDistrict(code string, properties ResponseTimeFilterPostcodeDistrictProperties) *ResponseTimeFilterPostcodeDistrict {
	this := ResponseTimeFilterPostcodeDistrict{}
	this.Code = code
	this.Properties = properties
	return &this
}

// NewResponseTimeFilterPostcodeDistrictWithDefaults instantiates a new ResponseTimeFilterPostcodeDistrict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTimeFilterPostcodeDistrictWithDefaults() *ResponseTimeFilterPostcodeDistrict {
	this := ResponseTimeFilterPostcodeDistrict{}
	return &this
}

// GetCode returns the Code field value
func (o *ResponseTimeFilterPostcodeDistrict) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeFilterPostcodeDistrict) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ResponseTimeFilterPostcodeDistrict) SetCode(v string) {
	o.Code = v
}

// GetProperties returns the Properties field value
func (o *ResponseTimeFilterPostcodeDistrict) GetProperties() ResponseTimeFilterPostcodeDistrictProperties {
	if o == nil {
		var ret ResponseTimeFilterPostcodeDistrictProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeFilterPostcodeDistrict) GetPropertiesOk() (*ResponseTimeFilterPostcodeDistrictProperties, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ResponseTimeFilterPostcodeDistrict) SetProperties(v ResponseTimeFilterPostcodeDistrictProperties) {
	o.Properties = v
}

func (o ResponseTimeFilterPostcodeDistrict) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableResponseTimeFilterPostcodeDistrict struct {
	value *ResponseTimeFilterPostcodeDistrict
	isSet bool
}

func (v NullableResponseTimeFilterPostcodeDistrict) Get() *ResponseTimeFilterPostcodeDistrict {
	return v.value
}

func (v *NullableResponseTimeFilterPostcodeDistrict) Set(val *ResponseTimeFilterPostcodeDistrict) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTimeFilterPostcodeDistrict) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTimeFilterPostcodeDistrict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTimeFilterPostcodeDistrict(val *ResponseTimeFilterPostcodeDistrict) *NullableResponseTimeFilterPostcodeDistrict {
	return &NullableResponseTimeFilterPostcodeDistrict{value: val, isSet: true}
}

func (v NullableResponseTimeFilterPostcodeDistrict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTimeFilterPostcodeDistrict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


