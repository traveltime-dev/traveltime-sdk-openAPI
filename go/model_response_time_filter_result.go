/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.2
 * Contact: support@igeolise.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseTimeFilterResult struct for ResponseTimeFilterResult
type ResponseTimeFilterResult struct {
	SearchId string `json:"search_id"`
	Locations []ResponseTimeFilterLocation `json:"locations"`
	Unreachable []string `json:"unreachable"`
}

// NewResponseTimeFilterResult instantiates a new ResponseTimeFilterResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTimeFilterResult(searchId string, locations []ResponseTimeFilterLocation, unreachable []string) *ResponseTimeFilterResult {
	this := ResponseTimeFilterResult{}
	this.SearchId = searchId
	this.Locations = locations
	this.Unreachable = unreachable
	return &this
}

// NewResponseTimeFilterResultWithDefaults instantiates a new ResponseTimeFilterResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTimeFilterResultWithDefaults() *ResponseTimeFilterResult {
	this := ResponseTimeFilterResult{}
	return &this
}

// GetSearchId returns the SearchId field value
func (o *ResponseTimeFilterResult) GetSearchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchId
}

// GetSearchIdOk returns a tuple with the SearchId field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeFilterResult) GetSearchIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SearchId, true
}

// SetSearchId sets field value
func (o *ResponseTimeFilterResult) SetSearchId(v string) {
	o.SearchId = v
}

// GetLocations returns the Locations field value
func (o *ResponseTimeFilterResult) GetLocations() []ResponseTimeFilterLocation {
	if o == nil {
		var ret []ResponseTimeFilterLocation
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeFilterResult) GetLocationsOk() (*[]ResponseTimeFilterLocation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locations, true
}

// SetLocations sets field value
func (o *ResponseTimeFilterResult) SetLocations(v []ResponseTimeFilterLocation) {
	o.Locations = v
}

// GetUnreachable returns the Unreachable field value
func (o *ResponseTimeFilterResult) GetUnreachable() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Unreachable
}

// GetUnreachableOk returns a tuple with the Unreachable field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeFilterResult) GetUnreachableOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Unreachable, true
}

// SetUnreachable sets field value
func (o *ResponseTimeFilterResult) SetUnreachable(v []string) {
	o.Unreachable = v
}

func (o ResponseTimeFilterResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["search_id"] = o.SearchId
	}
	if true {
		toSerialize["locations"] = o.Locations
	}
	if true {
		toSerialize["unreachable"] = o.Unreachable
	}
	return json.Marshal(toSerialize)
}

type NullableResponseTimeFilterResult struct {
	value *ResponseTimeFilterResult
	isSet bool
}

func (v NullableResponseTimeFilterResult) Get() *ResponseTimeFilterResult {
	return v.value
}

func (v *NullableResponseTimeFilterResult) Set(val *ResponseTimeFilterResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTimeFilterResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTimeFilterResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTimeFilterResult(val *ResponseTimeFilterResult) *NullableResponseTimeFilterResult {
	return &NullableResponseTimeFilterResult{value: val, isSet: true}
}

func (v NullableResponseTimeFilterResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTimeFilterResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


