/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.2
 * Contact: support@igeolise.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ResponseTransportationMode the model 'ResponseTransportationMode'
type ResponseTransportationMode string

// List of ResponseTransportationMode
const (
	CAR ResponseTransportationMode = "car"
	PARKING ResponseTransportationMode = "parking"
	BOARDING ResponseTransportationMode = "boarding"
	WALK ResponseTransportationMode = "walk"
	BIKE ResponseTransportationMode = "bike"
	TRAIN ResponseTransportationMode = "train"
	RAIL_NATIONAL ResponseTransportationMode = "rail_national"
	RAIL_OVERGROUND ResponseTransportationMode = "rail_overground"
	RAIL_UNDERGROUND ResponseTransportationMode = "rail_underground"
	RAIL_DLR ResponseTransportationMode = "rail_dlr"
	BUS ResponseTransportationMode = "bus"
	CABLE_CAR ResponseTransportationMode = "cable_car"
	PLANE ResponseTransportationMode = "plane"
	FERRY ResponseTransportationMode = "ferry"
	COACH ResponseTransportationMode = "coach"
)

var allowedResponseTransportationModeEnumValues = []ResponseTransportationMode{
	"car",
	"parking",
	"boarding",
	"walk",
	"bike",
	"train",
	"rail_national",
	"rail_overground",
	"rail_underground",
	"rail_dlr",
	"bus",
	"cable_car",
	"plane",
	"ferry",
	"coach",
}

func (v *ResponseTransportationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResponseTransportationMode(value)
	for _, existing := range allowedResponseTransportationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResponseTransportationMode", value)
}

// NewResponseTransportationModeFromValue returns a pointer to a valid ResponseTransportationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResponseTransportationModeFromValue(v string) (*ResponseTransportationMode, error) {
	ev := ResponseTransportationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResponseTransportationMode: valid values are %v", v, allowedResponseTransportationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResponseTransportationMode) IsValid() bool {
	for _, existing := range allowedResponseTransportationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResponseTransportationMode value
func (v ResponseTransportationMode) Ptr() *ResponseTransportationMode {
	return &v
}

type NullableResponseTransportationMode struct {
	value *ResponseTransportationMode
	isSet bool
}

func (v NullableResponseTransportationMode) Get() *ResponseTransportationMode {
	return v.value
}

func (v *NullableResponseTransportationMode) Set(val *ResponseTransportationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTransportationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTransportationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTransportationMode(val *ResponseTransportationMode) *NullableResponseTransportationMode {
	return &NullableResponseTransportationMode{value: val, isSet: true}
}

func (v NullableResponseTransportationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTransportationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

