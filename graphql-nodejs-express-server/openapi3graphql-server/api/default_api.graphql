# 
# TravelTime API
# 
# 
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# 
# Version: 1.2.3
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# default_api



input RoutesInput {
    
    requestRoutes: RequestRoutesInput
}

input SupportedLocationsInput {
    
    requestSupportedLocations: RequestSupportedLocationsInput
}

input TimeFilterInput {
    
    requestTimeFilter: RequestTimeFilterInput
}

input TimeFilterFastInput {
    
    requestTimeFilterFast: RequestTimeFilterFastInput
}

input TimeFilterPostcodeDistrictsInput {
    
    requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistrictsInput
}

input TimeFilterPostcodeSectorsInput {
    
    requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectorsInput
}

input TimeFilterPostcodesInput {
    
    requestTimeFilterPostcodes: RequestTimeFilterPostcodesInput
}

input TimeMapInput {
    
    requestTimeMap: RequestTimeMapInput
}

type Mutation {
  # @param RequestRoutes requestRoutes 
  # @return [ResponseRoutes]
  Routes(input: RoutesInput!): ResponseRoutes
  # @param RequestSupportedLocations requestSupportedLocations 
  # @return [ResponseSupportedLocations]
  SupportedLocations(input: SupportedLocationsInput!): ResponseSupportedLocations
  # @param RequestTimeFilter requestTimeFilter 
  # @return [ResponseTimeFilter]
  TimeFilter(input: TimeFilterInput!): ResponseTimeFilter
  # @param RequestTimeFilterFast requestTimeFilterFast 
  # @return [ResponseTimeFilterFast]
  TimeFilterFast(input: TimeFilterFastInput!): ResponseTimeFilterFast
  # @param RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts 
  # @return [ResponseTimeFilterPostcodeDistricts]
  TimeFilterPostcodeDistricts(input: TimeFilterPostcodeDistrictsInput!): ResponseTimeFilterPostcodeDistricts
  # @param RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors 
  # @return [ResponseTimeFilterPostcodeSectors]
  TimeFilterPostcodeSectors(input: TimeFilterPostcodeSectorsInput!): ResponseTimeFilterPostcodeSectors
  # @param RequestTimeFilterPostcodes requestTimeFilterPostcodes 
  # @return [ResponseTimeFilterPostcodes]
  TimeFilterPostcodes(input: TimeFilterPostcodesInput!): ResponseTimeFilterPostcodes
  # @param RequestTimeMap requestTimeMap 
  # @return [ResponseTimeMap]
  TimeMap(input: TimeMapInput!): ResponseTimeMap
}

type Query {
  # @param Float! lat 
  # @param Float! lng 
  # @param String! withinCountry 
  # @return [ResponseGeocoding]
  GeocodingReverseSearch(lat: Float!, lng: Float!, withinCountry: String!): ResponseGeocoding
  # @param String! Query_ 
  # @param Float! focusLat 
  # @param Float! focusLng 
  # @param String! withinCountry 
  # @return [ResponseGeocoding]
  GeocodingSearch(Query_: String!, focusLat: Float!, focusLng: Float!, withinCountry: String!): ResponseGeocoding
  # @return [ResponseMapInfo]
  MapInfo: ResponseMapInfo
}

