{-
   TravelTime API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.3
   TravelTime API API version: 1.2.2
   Contact: support@igeolise.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : TravelTime.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TravelTime.API.ApiDefault where

import TravelTime.Core
import TravelTime.MimeTypes
import TravelTime.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** geocodingReverseSearch

-- | @GET \/v4\/geocoding\/reverse@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
geocodingReverseSearch 
  :: Lat -- ^ "lat"
  -> Lng -- ^ "lng"
  -> TravelTimeRequest GeocodingReverseSearch MimeNoContent ResponseGeocoding MimeJSON
geocodingReverseSearch (Lat lat) (Lng lng) =
  _mkRequest "GET" ["/v4/geocoding/reverse"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `addQuery` toQuery ("lat", Just lat)
    `addQuery` toQuery ("lng", Just lng)

data GeocodingReverseSearch  
instance HasOptionalParam GeocodingReverseSearch WithinCountry where
  applyOptionalParam req (WithinCountry xs) =
    req `addQuery` toQuery ("within.country", Just xs)
-- | @application/json@
instance Produces GeocodingReverseSearch MimeJSON


-- *** geocodingSearch

-- | @GET \/v4\/geocoding\/search@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
geocodingSearch 
  :: Query -- ^ "query"
  -> TravelTimeRequest GeocodingSearch MimeNoContent ResponseGeocoding MimeJSON
geocodingSearch (Query query) =
  _mkRequest "GET" ["/v4/geocoding/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `addQuery` toQuery ("query", Just query)

data GeocodingSearch  
instance HasOptionalParam GeocodingSearch FocusLat where
  applyOptionalParam req (FocusLat xs) =
    req `addQuery` toQuery ("focus.lat", Just xs)
instance HasOptionalParam GeocodingSearch FocusLng where
  applyOptionalParam req (FocusLng xs) =
    req `addQuery` toQuery ("focus.lng", Just xs)
instance HasOptionalParam GeocodingSearch WithinCountry where
  applyOptionalParam req (WithinCountry xs) =
    req `addQuery` toQuery ("within.country", Just xs)
-- | @application/json@
instance Produces GeocodingSearch MimeJSON


-- *** mapInfo

-- | @GET \/v4\/map-info@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
mapInfo 
  :: TravelTimeRequest MapInfo MimeNoContent ResponseMapInfo MimeJSON
mapInfo =
  _mkRequest "GET" ["/v4/map-info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)

data MapInfo  
-- | @application/json@
instance Produces MapInfo MimeJSON


-- *** routes

-- | @POST \/v4\/routes@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
routes 
  :: (Consumes Routes MimeJSON, MimeRender MimeJSON RequestRoutes)
  => RequestRoutes -- ^ "requestRoutes"
  -> TravelTimeRequest Routes MimeJSON ResponseRoutes MimeJSON
routes requestRoutes =
  _mkRequest "POST" ["/v4/routes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestRoutes

data Routes 
instance HasBodyParam Routes RequestRoutes 

-- | @application/json@
instance Consumes Routes MimeJSON

-- | @application/json@
instance Produces Routes MimeJSON


-- *** supportedLocations

-- | @POST \/v4\/supported-locations@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
supportedLocations 
  :: (Consumes SupportedLocations MimeJSON, MimeRender MimeJSON RequestSupportedLocations)
  => RequestSupportedLocations -- ^ "requestSupportedLocations"
  -> TravelTimeRequest SupportedLocations MimeJSON ResponseSupportedLocations MimeJSON
supportedLocations requestSupportedLocations =
  _mkRequest "POST" ["/v4/supported-locations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestSupportedLocations

data SupportedLocations 
instance HasBodyParam SupportedLocations RequestSupportedLocations 

-- | @application/json@
instance Consumes SupportedLocations MimeJSON

-- | @application/json@
instance Produces SupportedLocations MimeJSON


-- *** timeFilter

-- | @POST \/v4\/time-filter@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeFilter 
  :: (Consumes TimeFilter MimeJSON, MimeRender MimeJSON RequestTimeFilter)
  => RequestTimeFilter -- ^ "requestTimeFilter"
  -> TravelTimeRequest TimeFilter MimeJSON ResponseTimeFilter MimeJSON
timeFilter requestTimeFilter =
  _mkRequest "POST" ["/v4/time-filter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeFilter

data TimeFilter 
instance HasBodyParam TimeFilter RequestTimeFilter 

-- | @application/json@
instance Consumes TimeFilter MimeJSON

-- | @application/json@
instance Produces TimeFilter MimeJSON


-- *** timeFilterFast

-- | @POST \/v4\/time-filter\/fast@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeFilterFast 
  :: (Consumes TimeFilterFast MimeJSON, MimeRender MimeJSON RequestTimeFilterFast)
  => RequestTimeFilterFast -- ^ "requestTimeFilterFast"
  -> TravelTimeRequest TimeFilterFast MimeJSON ResponseTimeFilterFast MimeJSON
timeFilterFast requestTimeFilterFast =
  _mkRequest "POST" ["/v4/time-filter/fast"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeFilterFast

data TimeFilterFast 
instance HasBodyParam TimeFilterFast RequestTimeFilterFast 

-- | @application/json@
instance Consumes TimeFilterFast MimeJSON

-- | @application/json@
instance Produces TimeFilterFast MimeJSON


-- *** timeFilterPostcodeDistricts

-- | @POST \/v4\/time-filter\/postcode-districts@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeFilterPostcodeDistricts 
  :: (Consumes TimeFilterPostcodeDistricts MimeJSON, MimeRender MimeJSON RequestTimeFilterPostcodeDistricts)
  => RequestTimeFilterPostcodeDistricts -- ^ "requestTimeFilterPostcodeDistricts"
  -> TravelTimeRequest TimeFilterPostcodeDistricts MimeJSON ResponseTimeFilterPostcodeDistricts MimeJSON
timeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts =
  _mkRequest "POST" ["/v4/time-filter/postcode-districts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeFilterPostcodeDistricts

data TimeFilterPostcodeDistricts 
instance HasBodyParam TimeFilterPostcodeDistricts RequestTimeFilterPostcodeDistricts 

-- | @application/json@
instance Consumes TimeFilterPostcodeDistricts MimeJSON

-- | @application/json@
instance Produces TimeFilterPostcodeDistricts MimeJSON


-- *** timeFilterPostcodeSectors

-- | @POST \/v4\/time-filter\/postcode-sectors@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeFilterPostcodeSectors 
  :: (Consumes TimeFilterPostcodeSectors MimeJSON, MimeRender MimeJSON RequestTimeFilterPostcodeSectors)
  => RequestTimeFilterPostcodeSectors -- ^ "requestTimeFilterPostcodeSectors"
  -> TravelTimeRequest TimeFilterPostcodeSectors MimeJSON ResponseTimeFilterPostcodeSectors MimeJSON
timeFilterPostcodeSectors requestTimeFilterPostcodeSectors =
  _mkRequest "POST" ["/v4/time-filter/postcode-sectors"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeFilterPostcodeSectors

data TimeFilterPostcodeSectors 
instance HasBodyParam TimeFilterPostcodeSectors RequestTimeFilterPostcodeSectors 

-- | @application/json@
instance Consumes TimeFilterPostcodeSectors MimeJSON

-- | @application/json@
instance Produces TimeFilterPostcodeSectors MimeJSON


-- *** timeFilterPostcodes

-- | @POST \/v4\/time-filter\/postcodes@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeFilterPostcodes 
  :: (Consumes TimeFilterPostcodes MimeJSON, MimeRender MimeJSON RequestTimeFilterPostcodes)
  => RequestTimeFilterPostcodes -- ^ "requestTimeFilterPostcodes"
  -> TravelTimeRequest TimeFilterPostcodes MimeJSON ResponseTimeFilterPostcodes MimeJSON
timeFilterPostcodes requestTimeFilterPostcodes =
  _mkRequest "POST" ["/v4/time-filter/postcodes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeFilterPostcodes

data TimeFilterPostcodes 
instance HasBodyParam TimeFilterPostcodes RequestTimeFilterPostcodes 

-- | @application/json@
instance Consumes TimeFilterPostcodes MimeJSON

-- | @application/json@
instance Produces TimeFilterPostcodes MimeJSON


-- *** timeMap

-- | @POST \/v4\/time-map@
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApplicationId'
-- 
timeMap 
  :: (Consumes TimeMap MimeJSON, MimeRender MimeJSON RequestTimeMap)
  => Accept accept -- ^ request accept ('MimeType')
  -> RequestTimeMap -- ^ "requestTimeMap"
  -> TravelTimeRequest TimeMap MimeJSON ResponseTimeMap accept
timeMap  _ requestTimeMap =
  _mkRequest "POST" ["/v4/time-map"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApplicationId)
    `setBodyParam` requestTimeMap

data TimeMap 
instance HasBodyParam TimeMap RequestTimeMap 

-- | @application/json@
instance Consumes TimeMap MimeJSON

-- | @application/vnd.wkt+json@
instance Produces TimeMap MimeVndWktjson
-- | @application/json@
instance Produces TimeMap MimeJSON
-- | @application/vnd.bounding-boxes+json@
instance Produces TimeMap MimeVndBoundingBoxesjson
-- | @application/vnd.wkt-no-holes+json@
instance Produces TimeMap MimeVndWktNoHolesjson

