/*
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestRoutes;
import org.openapitools.client.model.RequestSupportedLocations;
import org.openapitools.client.model.RequestTimeFilter;
import org.openapitools.client.model.RequestTimeFilterFast;
import org.openapitools.client.model.RequestTimeFilterPostcodeDistricts;
import org.openapitools.client.model.RequestTimeFilterPostcodeSectors;
import org.openapitools.client.model.RequestTimeFilterPostcodes;
import org.openapitools.client.model.RequestTimeMap;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseGeocoding;
import org.openapitools.client.model.ResponseMapInfo;
import org.openapitools.client.model.ResponseRoutes;
import org.openapitools.client.model.ResponseSupportedLocations;
import org.openapitools.client.model.ResponseTimeFilter;
import org.openapitools.client.model.ResponseTimeFilterFast;
import org.openapitools.client.model.ResponseTimeFilterPostcodeDistricts;
import org.openapitools.client.model.ResponseTimeFilterPostcodeSectors;
import org.openapitools.client.model.ResponseTimeFilterPostcodes;
import org.openapitools.client.model.ResponseTimeMap;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for geocodingReverseSearch
     * @param lat  (required)
     * @param lng  (required)
     * @param withinCountry  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-reverse"> Documentation</a>
     */
    public okhttp3.Call geocodingReverseSearchCall(Double lat, Double lng, String withinCountry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/geocoding/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (withinCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within.country", withinCountry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geocodingReverseSearchValidateBeforeCall(Double lat, Double lng, String withinCountry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling geocodingReverseSearch(Async)");
        }
        
        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling geocodingReverseSearch(Async)");
        }
        

        okhttp3.Call localVarCall = geocodingReverseSearchCall(lat, lng, withinCountry, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param lat  (required)
     * @param lng  (required)
     * @param withinCountry  (optional)
     * @return ResponseGeocoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-reverse"> Documentation</a>
     */
    public ResponseGeocoding geocodingReverseSearch(Double lat, Double lng, String withinCountry) throws ApiException {
        ApiResponse<ResponseGeocoding> localVarResp = geocodingReverseSearchWithHttpInfo(lat, lng, withinCountry);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param lat  (required)
     * @param lng  (required)
     * @param withinCountry  (optional)
     * @return ApiResponse&lt;ResponseGeocoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-reverse"> Documentation</a>
     */
    public ApiResponse<ResponseGeocoding> geocodingReverseSearchWithHttpInfo(Double lat, Double lng, String withinCountry) throws ApiException {
        okhttp3.Call localVarCall = geocodingReverseSearchValidateBeforeCall(lat, lng, withinCountry, null);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  (required)
     * @param lng  (required)
     * @param withinCountry  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-reverse"> Documentation</a>
     */
    public okhttp3.Call geocodingReverseSearchAsync(Double lat, Double lng, String withinCountry, final ApiCallback<ResponseGeocoding> _callback) throws ApiException {

        okhttp3.Call localVarCall = geocodingReverseSearchValidateBeforeCall(lat, lng, withinCountry, _callback);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geocodingSearch
     * @param query  (required)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param withinCountry  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-search"> Documentation</a>
     */
    public okhttp3.Call geocodingSearchCall(String query, Double focusLat, Double focusLng, String withinCountry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/geocoding/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (focusLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focus.lat", focusLat));
        }

        if (focusLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focus.lng", focusLng));
        }

        if (withinCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("within.country", withinCountry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geocodingSearchValidateBeforeCall(String query, Double focusLat, Double focusLng, String withinCountry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling geocodingSearch(Async)");
        }
        

        okhttp3.Call localVarCall = geocodingSearchCall(query, focusLat, focusLng, withinCountry, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param query  (required)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param withinCountry  (optional)
     * @return ResponseGeocoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-search"> Documentation</a>
     */
    public ResponseGeocoding geocodingSearch(String query, Double focusLat, Double focusLng, String withinCountry) throws ApiException {
        ApiResponse<ResponseGeocoding> localVarResp = geocodingSearchWithHttpInfo(query, focusLat, focusLng, withinCountry);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (required)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param withinCountry  (optional)
     * @return ApiResponse&lt;ResponseGeocoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-search"> Documentation</a>
     */
    public ApiResponse<ResponseGeocoding> geocodingSearchWithHttpInfo(String query, Double focusLat, Double focusLng, String withinCountry) throws ApiException {
        okhttp3.Call localVarCall = geocodingSearchValidateBeforeCall(query, focusLat, focusLng, withinCountry, null);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (required)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param withinCountry  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/geocoding-search"> Documentation</a>
     */
    public okhttp3.Call geocodingSearchAsync(String query, Double focusLat, Double focusLng, String withinCountry, final ApiCallback<ResponseGeocoding> _callback) throws ApiException {

        okhttp3.Call localVarCall = geocodingSearchValidateBeforeCall(query, focusLat, focusLng, withinCountry, _callback);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/map-info"> Documentation</a>
     */
    public okhttp3.Call mapInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/map-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = mapInfoCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return ResponseMapInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/map-info"> Documentation</a>
     */
    public ResponseMapInfo mapInfo() throws ApiException {
        ApiResponse<ResponseMapInfo> localVarResp = mapInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ResponseMapInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/map-info"> Documentation</a>
     */
    public ApiResponse<ResponseMapInfo> mapInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mapInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseMapInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/map-info"> Documentation</a>
     */
    public okhttp3.Call mapInfoAsync(final ApiCallback<ResponseMapInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseMapInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for routes
     * @param requestRoutes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/routes"> Documentation</a>
     */
    public okhttp3.Call routesCall(RequestRoutes requestRoutes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestRoutes;

        // create path and map variables
        String localVarPath = "/v4/routes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routesValidateBeforeCall(RequestRoutes requestRoutes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestRoutes' is set
        if (requestRoutes == null) {
            throw new ApiException("Missing the required parameter 'requestRoutes' when calling routes(Async)");
        }
        

        okhttp3.Call localVarCall = routesCall(requestRoutes, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestRoutes  (required)
     * @return ResponseRoutes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/routes"> Documentation</a>
     */
    public ResponseRoutes routes(RequestRoutes requestRoutes) throws ApiException {
        ApiResponse<ResponseRoutes> localVarResp = routesWithHttpInfo(requestRoutes);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestRoutes  (required)
     * @return ApiResponse&lt;ResponseRoutes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/routes"> Documentation</a>
     */
    public ApiResponse<ResponseRoutes> routesWithHttpInfo(RequestRoutes requestRoutes) throws ApiException {
        okhttp3.Call localVarCall = routesValidateBeforeCall(requestRoutes, null);
        Type localVarReturnType = new TypeToken<ResponseRoutes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestRoutes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/routes"> Documentation</a>
     */
    public okhttp3.Call routesAsync(RequestRoutes requestRoutes, final ApiCallback<ResponseRoutes> _callback) throws ApiException {

        okhttp3.Call localVarCall = routesValidateBeforeCall(requestRoutes, _callback);
        Type localVarReturnType = new TypeToken<ResponseRoutes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportedLocations
     * @param requestSupportedLocations  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/supported-locations"> Documentation</a>
     */
    public okhttp3.Call supportedLocationsCall(RequestSupportedLocations requestSupportedLocations, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestSupportedLocations;

        // create path and map variables
        String localVarPath = "/v4/supported-locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportedLocationsValidateBeforeCall(RequestSupportedLocations requestSupportedLocations, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestSupportedLocations' is set
        if (requestSupportedLocations == null) {
            throw new ApiException("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations(Async)");
        }
        

        okhttp3.Call localVarCall = supportedLocationsCall(requestSupportedLocations, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestSupportedLocations  (required)
     * @return ResponseSupportedLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/supported-locations"> Documentation</a>
     */
    public ResponseSupportedLocations supportedLocations(RequestSupportedLocations requestSupportedLocations) throws ApiException {
        ApiResponse<ResponseSupportedLocations> localVarResp = supportedLocationsWithHttpInfo(requestSupportedLocations);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestSupportedLocations  (required)
     * @return ApiResponse&lt;ResponseSupportedLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/supported-locations"> Documentation</a>
     */
    public ApiResponse<ResponseSupportedLocations> supportedLocationsWithHttpInfo(RequestSupportedLocations requestSupportedLocations) throws ApiException {
        okhttp3.Call localVarCall = supportedLocationsValidateBeforeCall(requestSupportedLocations, null);
        Type localVarReturnType = new TypeToken<ResponseSupportedLocations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestSupportedLocations  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/supported-locations"> Documentation</a>
     */
    public okhttp3.Call supportedLocationsAsync(RequestSupportedLocations requestSupportedLocations, final ApiCallback<ResponseSupportedLocations> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportedLocationsValidateBeforeCall(requestSupportedLocations, _callback);
        Type localVarReturnType = new TypeToken<ResponseSupportedLocations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeFilter
     * @param requestTimeFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter"> Documentation</a>
     */
    public okhttp3.Call timeFilterCall(RequestTimeFilter requestTimeFilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeFilter;

        // create path and map variables
        String localVarPath = "/v4/time-filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeFilterValidateBeforeCall(RequestTimeFilter requestTimeFilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeFilter' is set
        if (requestTimeFilter == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilter' when calling timeFilter(Async)");
        }
        

        okhttp3.Call localVarCall = timeFilterCall(requestTimeFilter, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeFilter  (required)
     * @return ResponseTimeFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter"> Documentation</a>
     */
    public ResponseTimeFilter timeFilter(RequestTimeFilter requestTimeFilter) throws ApiException {
        ApiResponse<ResponseTimeFilter> localVarResp = timeFilterWithHttpInfo(requestTimeFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilter  (required)
     * @return ApiResponse&lt;ResponseTimeFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilter> timeFilterWithHttpInfo(RequestTimeFilter requestTimeFilter) throws ApiException {
        okhttp3.Call localVarCall = timeFilterValidateBeforeCall(requestTimeFilter, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter"> Documentation</a>
     */
    public okhttp3.Call timeFilterAsync(RequestTimeFilter requestTimeFilter, final ApiCallback<ResponseTimeFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeFilterValidateBeforeCall(requestTimeFilter, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeFilterFast
     * @param requestTimeFilterFast  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter-fast"> Documentation</a>
     */
    public okhttp3.Call timeFilterFastCall(RequestTimeFilterFast requestTimeFilterFast, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeFilterFast;

        // create path and map variables
        String localVarPath = "/v4/time-filter/fast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeFilterFastValidateBeforeCall(RequestTimeFilterFast requestTimeFilterFast, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterFast' is set
        if (requestTimeFilterFast == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast(Async)");
        }
        

        okhttp3.Call localVarCall = timeFilterFastCall(requestTimeFilterFast, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeFilterFast  (required)
     * @return ResponseTimeFilterFast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter-fast"> Documentation</a>
     */
    public ResponseTimeFilterFast timeFilterFast(RequestTimeFilterFast requestTimeFilterFast) throws ApiException {
        ApiResponse<ResponseTimeFilterFast> localVarResp = timeFilterFastWithHttpInfo(requestTimeFilterFast);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterFast  (required)
     * @return ApiResponse&lt;ResponseTimeFilterFast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter-fast"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterFast> timeFilterFastWithHttpInfo(RequestTimeFilterFast requestTimeFilterFast) throws ApiException {
        okhttp3.Call localVarCall = timeFilterFastValidateBeforeCall(requestTimeFilterFast, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterFast>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterFast  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-filter-fast"> Documentation</a>
     */
    public okhttp3.Call timeFilterFastAsync(RequestTimeFilterFast requestTimeFilterFast, final ApiCallback<ResponseTimeFilterFast> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeFilterFastValidateBeforeCall(requestTimeFilterFast, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterFast>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeFilterPostcodeDistricts
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodeDistrictsCall(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodeDistricts;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcode-districts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeFilterPostcodeDistrictsValidateBeforeCall(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
        if (requestTimeFilterPostcodeDistricts == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts(Async)");
        }
        

        okhttp3.Call localVarCall = timeFilterPostcodeDistrictsCall(requestTimeFilterPostcodeDistricts, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @return ResponseTimeFilterPostcodeDistricts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public ResponseTimeFilterPostcodeDistricts timeFilterPostcodeDistricts(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResp = timeFilterPostcodeDistrictsWithHttpInfo(requestTimeFilterPostcodeDistricts);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodeDistricts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodeDistricts> timeFilterPostcodeDistrictsWithHttpInfo(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts) throws ApiException {
        okhttp3.Call localVarCall = timeFilterPostcodeDistrictsValidateBeforeCall(requestTimeFilterPostcodeDistricts, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeDistricts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodeDistrictsAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ApiCallback<ResponseTimeFilterPostcodeDistricts> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeFilterPostcodeDistrictsValidateBeforeCall(requestTimeFilterPostcodeDistricts, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeDistricts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeFilterPostcodeSectors
     * @param requestTimeFilterPostcodeSectors  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodeSectorsCall(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodeSectors;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcode-sectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeFilterPostcodeSectorsValidateBeforeCall(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
        if (requestTimeFilterPostcodeSectors == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors(Async)");
        }
        

        okhttp3.Call localVarCall = timeFilterPostcodeSectorsCall(requestTimeFilterPostcodeSectors, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @return ResponseTimeFilterPostcodeSectors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public ResponseTimeFilterPostcodeSectors timeFilterPostcodeSectors(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResp = timeFilterPostcodeSectorsWithHttpInfo(requestTimeFilterPostcodeSectors);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodeSectors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodeSectors> timeFilterPostcodeSectorsWithHttpInfo(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors) throws ApiException {
        okhttp3.Call localVarCall = timeFilterPostcodeSectorsValidateBeforeCall(requestTimeFilterPostcodeSectors, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeSectors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodeSectorsAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ApiCallback<ResponseTimeFilterPostcodeSectors> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeFilterPostcodeSectorsValidateBeforeCall(requestTimeFilterPostcodeSectors, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeSectors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeFilterPostcodes
     * @param requestTimeFilterPostcodes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodesCall(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodes;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeFilterPostcodesValidateBeforeCall(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodes' is set
        if (requestTimeFilterPostcodes == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes(Async)");
        }
        

        okhttp3.Call localVarCall = timeFilterPostcodesCall(requestTimeFilterPostcodes, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @return ResponseTimeFilterPostcodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public ResponseTimeFilterPostcodes timeFilterPostcodes(RequestTimeFilterPostcodes requestTimeFilterPostcodes) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodes> localVarResp = timeFilterPostcodesWithHttpInfo(requestTimeFilterPostcodes);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodes> timeFilterPostcodesWithHttpInfo(RequestTimeFilterPostcodes requestTimeFilterPostcodes) throws ApiException {
        okhttp3.Call localVarCall = timeFilterPostcodesValidateBeforeCall(requestTimeFilterPostcodes, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/postcode-search"> Documentation</a>
     */
    public okhttp3.Call timeFilterPostcodesAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ApiCallback<ResponseTimeFilterPostcodes> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeFilterPostcodesValidateBeforeCall(requestTimeFilterPostcodes, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeMap
     * @param requestTimeMap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-map"> Documentation</a>
     */
    public okhttp3.Call timeMapCall(RequestTimeMap requestTimeMap, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestTimeMap;

        // create path and map variables
        String localVarPath = "/v4/time-map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/vnd.wkt+json", "application/vnd.wkt-no-holes+json", "application/vnd.bounding-boxes+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeMapValidateBeforeCall(RequestTimeMap requestTimeMap, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestTimeMap' is set
        if (requestTimeMap == null) {
            throw new ApiException("Missing the required parameter 'requestTimeMap' when calling timeMap(Async)");
        }
        

        okhttp3.Call localVarCall = timeMapCall(requestTimeMap, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestTimeMap  (required)
     * @return ResponseTimeMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-map"> Documentation</a>
     */
    public ResponseTimeMap timeMap(RequestTimeMap requestTimeMap) throws ApiException {
        ApiResponse<ResponseTimeMap> localVarResp = timeMapWithHttpInfo(requestTimeMap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeMap  (required)
     * @return ApiResponse&lt;ResponseTimeMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-map"> Documentation</a>
     */
    public ApiResponse<ResponseTimeMap> timeMapWithHttpInfo(RequestTimeMap requestTimeMap) throws ApiException {
        okhttp3.Call localVarCall = timeMapValidateBeforeCall(requestTimeMap, null);
        Type localVarReturnType = new TypeToken<ResponseTimeMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeMap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response) </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://docs.traveltime.com/reference/time-map"> Documentation</a>
     */
    public okhttp3.Call timeMapAsync(RequestTimeMap requestTimeMap, final ApiCallback<ResponseTimeMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeMapValidateBeforeCall(requestTimeMap, _callback);
        Type localVarReturnType = new TypeToken<ResponseTimeMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
