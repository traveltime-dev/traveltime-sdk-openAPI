/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import RequestRoutes from '../model/RequestRoutes';
import RequestSupportedLocations from '../model/RequestSupportedLocations';
import RequestTimeFilter from '../model/RequestTimeFilter';
import RequestTimeFilterFast from '../model/RequestTimeFilterFast';
import RequestTimeFilterPostcodeDistricts from '../model/RequestTimeFilterPostcodeDistricts';
import RequestTimeFilterPostcodeSectors from '../model/RequestTimeFilterPostcodeSectors';
import RequestTimeFilterPostcodes from '../model/RequestTimeFilterPostcodes';
import RequestTimeMap from '../model/RequestTimeMap';
import ResponseError from '../model/ResponseError';
import ResponseGeocoding from '../model/ResponseGeocoding';
import ResponseMapInfo from '../model/ResponseMapInfo';
import ResponseRoutes from '../model/ResponseRoutes';
import ResponseSupportedLocations from '../model/ResponseSupportedLocations';
import ResponseTimeFilter from '../model/ResponseTimeFilter';
import ResponseTimeFilterFast from '../model/ResponseTimeFilterFast';
import ResponseTimeFilterPostcodeDistricts from '../model/ResponseTimeFilterPostcodeDistricts';
import ResponseTimeFilterPostcodeSectors from '../model/ResponseTimeFilterPostcodeSectors';
import ResponseTimeFilterPostcodes from '../model/ResponseTimeFilterPostcodes';
import ResponseTimeMap from '../model/ResponseTimeMap';

/**
* Default service.
* @module api/DefaultApi
* @version 1.2.2
*/
export default class DefaultApi extends ApiClient {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * @param {Number} lat 
     * @param {Number} lng 
     * @param {Object} opts Optional parameters
     * @param {String} opts.withinCountry 
     * @return {Promise<ResponseGeocoding>}
     */
    async geocodingReverseSearch(lat, lng, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling geocodingReverseSearch");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling geocodingReverseSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'within.country': opts['withinCountry']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseGeocoding;

      return this.callApi(
        '/v4/geocoding/reverse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.focusLat 
     * @param {Number} opts.focusLng 
     * @param {String} opts.withinCountry 
     * @return {Promise<ResponseGeocoding>}
     */
    async geocodingSearch(query, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling geocodingSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'focus.lat': opts['focusLat'],
        'focus.lng': opts['focusLng'],
        'within.country': opts['withinCountry']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseGeocoding;

      return this.callApi(
        '/v4/geocoding/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise<ResponseMapInfo>}
     */
    async mapInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseMapInfo;

      return this.callApi(
        '/v4/map-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestRoutes} requestRoutes 
     * @return {Promise<ResponseRoutes>}
     */
    async routes(requestRoutes) {
      let postBody = requestRoutes;
      // verify the required parameter 'requestRoutes' is set
      if (requestRoutes === undefined || requestRoutes === null) {
        throw new Error("Missing the required parameter 'requestRoutes' when calling routes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseRoutes;

      return this.callApi(
        '/v4/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestSupportedLocations} requestSupportedLocations 
     * @return {Promise<ResponseSupportedLocations>}
     */
    async supportedLocations(requestSupportedLocations) {
      let postBody = requestSupportedLocations;
      // verify the required parameter 'requestSupportedLocations' is set
      if (requestSupportedLocations === undefined || requestSupportedLocations === null) {
        throw new Error("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSupportedLocations;

      return this.callApi(
        '/v4/supported-locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeFilter} requestTimeFilter 
     * @return {Promise<ResponseTimeFilter>}
     */
    async timeFilter(requestTimeFilter) {
      let postBody = requestTimeFilter;
      // verify the required parameter 'requestTimeFilter' is set
      if (requestTimeFilter === undefined || requestTimeFilter === null) {
        throw new Error("Missing the required parameter 'requestTimeFilter' when calling timeFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseTimeFilter;

      return this.callApi(
        '/v4/time-filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeFilterFast} requestTimeFilterFast 
     * @return {Promise<ResponseTimeFilterFast>}
     */
    async timeFilterFast(requestTimeFilterFast) {
      let postBody = requestTimeFilterFast;
      // verify the required parameter 'requestTimeFilterFast' is set
      if (requestTimeFilterFast === undefined || requestTimeFilterFast === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseTimeFilterFast;

      return this.callApi(
        '/v4/time-filter/fast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
     * @return {Promise<ResponseTimeFilterPostcodeDistricts>}
     */
    async timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts) {
      let postBody = requestTimeFilterPostcodeDistricts;
      // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
      if (requestTimeFilterPostcodeDistricts === undefined || requestTimeFilterPostcodeDistricts === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseTimeFilterPostcodeDistricts;

      return this.callApi(
        '/v4/time-filter/postcode-districts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
     * @return {Promise<ResponseTimeFilterPostcodeSectors>}
     */
    async timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors) {
      let postBody = requestTimeFilterPostcodeSectors;
      // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
      if (requestTimeFilterPostcodeSectors === undefined || requestTimeFilterPostcodeSectors === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseTimeFilterPostcodeSectors;

      return this.callApi(
        '/v4/time-filter/postcode-sectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
     * @return {Promise<ResponseTimeFilterPostcodes>}
     */
    async timeFilterPostcodes(requestTimeFilterPostcodes) {
      let postBody = requestTimeFilterPostcodes;
      // verify the required parameter 'requestTimeFilterPostcodes' is set
      if (requestTimeFilterPostcodes === undefined || requestTimeFilterPostcodes === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseTimeFilterPostcodes;

      return this.callApi(
        '/v4/time-filter/postcodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {RequestTimeMap} requestTimeMap 
     * @return {Promise<ResponseTimeMap>}
     */
    async timeMap(requestTimeMap) {
      let postBody = requestTimeMap;
      // verify the required parameter 'requestTimeMap' is set
      if (requestTimeMap === undefined || requestTimeMap === null) {
        throw new Error("Missing the required parameter 'requestTimeMap' when calling timeMap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.2.2/Javascript',
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'ApplicationId'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/vnd.wkt+json', 'application/vnd.wkt-no-holes+json', 'application/vnd.bounding-boxes+json'];
      let returnType = ResponseTimeMap;

      return this.callApi(
        '/v4/time-map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
