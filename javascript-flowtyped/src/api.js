// @flow
/* eslint-disable no-use-before-define */
/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.traveltimeapp.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Coords = {
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    lat: number;
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    lng: number;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestArrivalTimePeriod = 'weekday_morning';


            export type RequestLevelOfDetailScaleTypeEnum = 'simple';

            export type RequestLevelOfDetailLevelEnum = 'lowest' | 'low' | 'medium' | 'high' | 'highest';
/**
 * 
 * @export
 */
export type RequestLevelOfDetail = {
    /**
     * 
     * @type {string}
     * @memberof RequestLevelOfDetail
     */
    scale_type: RequestLevelOfDetailScaleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestLevelOfDetail
     */
    level: RequestLevelOfDetailLevelEnum;
}


/**
 * 
 * @export
 */
export type RequestLocation = {
    /**
     * 
     * @type {string}
     * @memberof RequestLocation
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestLocation
     */
    coords: Coords;
}


/**
 * 
 * @export
 */
export type RequestRangeFull = {
    /**
     * 
     * @type {boolean}
     * @memberof RequestRangeFull
     */
    enabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeFull
     */
    max_results: number;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeFull
     */
    width: number;
}


/**
 * 
 * @export
 */
export type RequestRangeNoMaxResults = {
    /**
     * 
     * @type {boolean}
     * @memberof RequestRangeNoMaxResults
     */
    enabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeNoMaxResults
     */
    width: number;
}


/**
 * 
 * @export
 */
export type RequestRoutes = {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestRoutes
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {Array<RequestRoutesDepartureSearch>}
     * @memberof RequestRoutes
     */
    departure_searches?: Array<RequestRoutesDepartureSearch>;
    /**
     * 
     * @type {Array<RequestRoutesArrivalSearch>}
     * @memberof RequestRoutes
     */
    arrival_searches?: Array<RequestRoutesArrivalSearch>;
}


/**
 * 
 * @export
 */
export type RequestRoutesArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestRoutesArrivalSearch
     */
    departure_location_ids: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesArrivalSearch
     */
    arrival_location_id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestRoutesArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {Date}
     * @memberof RequestRoutesArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {Array<RequestRoutesProperty>}
     * @memberof RequestRoutesArrivalSearch
     */
    properties: Array<RequestRoutesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestRoutesArrivalSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestRoutesDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesDepartureSearch
     */
    departure_location_id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestRoutesDepartureSearch
     */
    arrival_location_ids: Array<string>;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestRoutesDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {Date}
     * @memberof RequestRoutesDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {Array<RequestRoutesProperty>}
     * @memberof RequestRoutesDepartureSearch
     */
    properties: Array<RequestRoutesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestRoutesDepartureSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestRoutesProperty = 'travel_time' | 'distance' | 'fares' | 'route';

/**
 * 
 * @export
 */
export type RequestSupportedLocations = {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestSupportedLocations
     */
    locations: Array<RequestLocation>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilter = {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestTimeFilter
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {Array<RequestTimeFilterDepartureSearch>}
     * @memberof RequestTimeFilter
     */
    departure_searches?: Array<RequestTimeFilterDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterArrivalSearch>}
     * @memberof RequestTimeFilter
     */
    arrival_searches?: Array<RequestTimeFilterArrivalSearch>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterArrivalSearch
     */
    departure_location_ids: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterArrivalSearch
     */
    arrival_location_id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterArrivalSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterProperty>}
     * @memberof RequestTimeFilterArrivalSearch
     */
    properties: Array<RequestTimeFilterProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterArrivalSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterDepartureSearch
     */
    departure_location_id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterDepartureSearch
     */
    arrival_location_ids: Array<string>;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterDepartureSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterProperty>}
     * @memberof RequestTimeFilterDepartureSearch
     */
    properties: Array<RequestTimeFilterProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterDepartureSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterFast = {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestTimeFilterFast
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {RequestTimeFilterFastArrivalSearches}
     * @memberof RequestTimeFilterFast
     */
    arrival_searches: RequestTimeFilterFastArrivalSearches;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterFastArrivalManyToOneSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    arrival_location_id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    departure_location_ids: Array<string>;
    /**
     * 
     * @type {RequestTransportationFast}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    transportation: RequestTransportationFast;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    travel_time: number;
    /**
     * 
     * @type {RequestArrivalTimePeriod}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    arrival_time_period: RequestArrivalTimePeriod;
    /**
     * 
     * @type {Array<RequestTimeFilterFastProperty>}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    properties: Array<RequestTimeFilterFastProperty>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterFastArrivalOneToManySearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    departure_location_id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    arrival_location_ids: Array<string>;
    /**
     * 
     * @type {RequestTransportationFast}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    transportation: RequestTransportationFast;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    travel_time: number;
    /**
     * 
     * @type {RequestArrivalTimePeriod}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    arrival_time_period: RequestArrivalTimePeriod;
    /**
     * 
     * @type {Array<RequestTimeFilterFastProperty>}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    properties: Array<RequestTimeFilterFastProperty>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterFastArrivalSearches = {
    /**
     * 
     * @type {Array<RequestTimeFilterFastArrivalManyToOneSearch>}
     * @memberof RequestTimeFilterFastArrivalSearches
     */
    many_to_one?: Array<RequestTimeFilterFastArrivalManyToOneSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterFastArrivalOneToManySearch>}
     * @memberof RequestTimeFilterFastArrivalSearches
     */
    one_to_many?: Array<RequestTimeFilterFastArrivalOneToManySearch>;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeFilterFastProperty = 'travel_time' | 'fares';

/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeDistricts = {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>}
     * @memberof RequestTimeFilterPostcodeDistricts
     */
    departure_searches?: Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>}
     * @memberof RequestTimeFilterPostcodeDistricts
     */
    arrival_searches?: Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeDistrictsArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    reachable_postcodes_threshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsProperty>}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeDistrictsDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    reachable_postcodes_threshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsProperty>}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeFilterPostcodeDistrictsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';

/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeSectors = {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsDepartureSearch>}
     * @memberof RequestTimeFilterPostcodeSectors
     */
    departure_searches?: Array<RequestTimeFilterPostcodeSectorsDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsArrivalSearch>}
     * @memberof RequestTimeFilterPostcodeSectors
     */
    arrival_searches?: Array<RequestTimeFilterPostcodeSectorsArrivalSearch>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeSectorsArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    reachable_postcodes_threshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsProperty>}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodeSectorsDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    reachable_postcodes_threshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsProperty>}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeFilterPostcodeSectorsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';

/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodes = {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesDepartureSearch>}
     * @memberof RequestTimeFilterPostcodes
     */
    departure_searches?: Array<RequestTimeFilterPostcodesDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesArrivalSearch>}
     * @memberof RequestTimeFilterPostcodes
     */
    arrival_searches?: Array<RequestTimeFilterPostcodesArrivalSearch>;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodesArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesProperty>}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 */
export type RequestTimeFilterPostcodesDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesProperty>}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    range?: RequestRangeFull;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeFilterPostcodesProperty = 'travel_time' | 'distance';

/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeFilterProperty = 'travel_time' | 'distance' | 'distance_breakdown' | 'fares' | 'route';

/**
 * 
 * @export
 */
export type RequestTimeMap = {
    /**
     * 
     * @type {Array<RequestTimeMapDepartureSearch>}
     * @memberof RequestTimeMap
     */
    departure_searches?: Array<RequestTimeMapDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeMapArrivalSearch>}
     * @memberof RequestTimeMap
     */
    arrival_searches?: Array<RequestTimeMapArrivalSearch>;
    /**
     * 
     * @type {Array<RequestUnionOnIntersection>}
     * @memberof RequestTimeMap
     */
    unions?: Array<RequestUnionOnIntersection>;
    /**
     * 
     * @type {Array<RequestUnionOnIntersection>}
     * @memberof RequestTimeMap
     */
    intersections?: Array<RequestUnionOnIntersection>;
}


/**
 * 
 * @export
 */
export type RequestTimeMapArrivalSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeMapArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestTimeMapArrivalSearch
     */
    coords: Coords;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeMapArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeMapArrivalSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeMapArrivalSearch
     */
    arrival_time: Date;
    /**
     * 
     * @type {Array<RequestTimeMapProperty>}
     * @memberof RequestTimeMapArrivalSearch
     */
    properties?: Array<RequestTimeMapProperty>;
    /**
     * 
     * @type {RequestRangeNoMaxResults}
     * @memberof RequestTimeMapArrivalSearch
     */
    range?: RequestRangeNoMaxResults;
    /**
     * 
     * @type {RequestLevelOfDetail}
     * @memberof RequestTimeMapArrivalSearch
     */
    level_of_detail?: RequestLevelOfDetail;
}


/**
 * 
 * @export
 */
export type RequestTimeMapDepartureSearch = {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeMapDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestTimeMapDepartureSearch
     */
    coords: Coords;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeMapDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeMapDepartureSearch
     */
    travel_time: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeMapDepartureSearch
     */
    departure_time: Date;
    /**
     * 
     * @type {Array<RequestTimeMapProperty>}
     * @memberof RequestTimeMapDepartureSearch
     */
    properties?: Array<RequestTimeMapProperty>;
    /**
     * 
     * @type {RequestRangeNoMaxResults}
     * @memberof RequestTimeMapDepartureSearch
     */
    range?: RequestRangeNoMaxResults;
    /**
     * 
     * @type {RequestLevelOfDetail}
     * @memberof RequestTimeMapDepartureSearch
     */
    level_of_detail?: RequestLevelOfDetail;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type RequestTimeMapProperty = 'is_only_walking';


            export type RequestTransportationTypeEnum = 'cycling' | 'driving' | 'driving+train' | 'public_transport' | 'walking' | 'coach' | 'bus' | 'train' | 'ferry' | 'driving+ferry' | 'cycling+ferry';
/**
 * 
 * @export
 */
export type RequestTransportation = {
    /**
     * 
     * @type {string}
     * @memberof RequestTransportation
     */
    type: RequestTransportationTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RequestTransportation
     */
    disable_border_crossing?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    pt_change_delay?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    walking_time?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    driving_time_to_station?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    cycling_time_to_station?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    parking_time?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    boarding_time?: number;
}



            export type RequestTransportationFastTypeEnum = 'public_transport' | 'driving' | 'driving+public_transport';
/**
 * 
 * @export
 */
export type RequestTransportationFast = {
    /**
     * 
     * @type {string}
     * @memberof RequestTransportationFast
     */
    type: RequestTransportationFastTypeEnum;
}


/**
 * 
 * @export
 */
export type RequestUnionOnIntersection = {
    /**
     * 
     * @type {string}
     * @memberof RequestUnionOnIntersection
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestUnionOnIntersection
     */
    search_ids: Array<string>;
}


/**
 * 
 * @export
 */
export type ResponseBoundingBox = {
    /**
     * 
     * @type {ResponseBox}
     * @memberof ResponseBoundingBox
     */
    envelope: ResponseBox;
    /**
     * 
     * @type {Array<ResponseBox>}
     * @memberof ResponseBoundingBox
     */
    boxes: Array<ResponseBox>;
}


/**
 * 
 * @export
 */
export type ResponseBox = {
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    min_lat: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    max_lat: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    min_lng: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    max_lng: number;
}


/**
 * 
 * @export
 */
export type ResponseDistanceBreakdownItem = {
    /**
     * 
     * @type {ResponseTransportationMode}
     * @memberof ResponseDistanceBreakdownItem
     */
    mode: ResponseTransportationMode;
    /**
     * 
     * @type {number}
     * @memberof ResponseDistanceBreakdownItem
     */
    distance: number;
}


/**
 * 
 * @export
 */
export type ResponseError = {
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    http_status?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    error_code?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    documentation_link?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ResponseError
     */
    additional_info?: { [key: string]: Array<string>; };
}



            export type ResponseFareTicketTypeEnum = 'single' | 'week' | 'month' | 'year';
/**
 * 
 * @export
 */
export type ResponseFareTicket = {
    /**
     * 
     * @type {string}
     * @memberof ResponseFareTicket
     */
    type: ResponseFareTicketTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ResponseFareTicket
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseFareTicket
     */
    currency: string;
}


/**
 * 
 * @export
 */
export type ResponseFares = {
    /**
     * 
     * @type {Array<ResponseFaresBreakdownItem>}
     * @memberof ResponseFares
     */
    breakdown: Array<ResponseFaresBreakdownItem>;
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFares
     */
    tickets_total: Array<ResponseFareTicket>;
}


/**
 * 
 * @export
 */
export type ResponseFaresBreakdownItem = {
    /**
     * 
     * @type {Array<ResponseTransportationMode>}
     * @memberof ResponseFaresBreakdownItem
     */
    modes: Array<ResponseTransportationMode>;
    /**
     * 
     * @type {Array<number>}
     * @memberof ResponseFaresBreakdownItem
     */
    route_part_ids: Array<number>;
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFaresBreakdownItem
     */
    tickets: Array<ResponseFareTicket>;
}


/**
 * 
 * @export
 */
export type ResponseFaresFast = {
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFaresFast
     */
    tickets_total: Array<ResponseFareTicket>;
}


/**
 * 
 * @export
 */
export type ResponseGeocoding = {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocoding
     */
    type: string;
    /**
     * 
     * @type {Array<ResponseGeocodingGeoJsonFeature>}
     * @memberof ResponseGeocoding
     */
    features: Array<ResponseGeocodingGeoJsonFeature>;
}


/**
 * 
 * @export
 */
export type ResponseGeocodingGeoJsonFeature = {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    type: string;
    /**
     * 
     * @type {ResponseGeocodingGeometry}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    geometry: ResponseGeocodingGeometry;
    /**
     * 
     * @type {ResponseGeocodingProperties}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    properties: ResponseGeocodingProperties;
}


/**
 * 
 * @export
 */
export type ResponseGeocodingGeometry = {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingGeometry
     */
    type: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ResponseGeocodingGeometry
     */
    coordinates: Array<number>;
}


/**
 * 
 * @export
 */
export type ResponseGeocodingProperties = {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseGeocodingProperties
     */
    score?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    house_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    region_code?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    neighbourhood?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    macroregion?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    country_code?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    continent?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    postcode?: string;
    /**
     * 
     * @type {ResponseMapInfoFeatures}
     * @memberof ResponseGeocodingProperties
     */
    features?: ResponseMapInfoFeatures;
}


/**
 * 
 * @export
 */
export type ResponseMapInfo = {
    /**
     * 
     * @type {Array<ResponseMapInfoMap>}
     * @memberof ResponseMapInfo
     */
    maps: Array<ResponseMapInfoMap>;
}


/**
 * 
 * @export
 */
export type ResponseMapInfoFeatures = {
    /**
     * 
     * @type {ResponseMapInfoFeaturesPublicTransport}
     * @memberof ResponseMapInfoFeatures
     */
    public_transport?: ResponseMapInfoFeaturesPublicTransport;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseMapInfoFeatures
     */
    fares: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseMapInfoFeatures
     */
    postcodes: boolean;
}


/**
 * 
 * @export
 */
export type ResponseMapInfoFeaturesPublicTransport = {
    /**
     * 
     * @type {Date}
     * @memberof ResponseMapInfoFeaturesPublicTransport
     */
    date_start: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseMapInfoFeaturesPublicTransport
     */
    date_end: Date;
}


/**
 * 
 * @export
 */
export type ResponseMapInfoMap = {
    /**
     * 
     * @type {string}
     * @memberof ResponseMapInfoMap
     */
    name: string;
    /**
     * 
     * @type {ResponseMapInfoFeatures}
     * @memberof ResponseMapInfoMap
     */
    features: ResponseMapInfoFeatures;
}


/**
 * 
 * @export
 */
export type ResponseRoute = {
    /**
     * 
     * @type {Date}
     * @memberof ResponseRoute
     */
    departure_time: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseRoute
     */
    arrival_time: Date;
    /**
     * 
     * @type {Array<ResponseRoutePart>}
     * @memberof ResponseRoute
     */
    parts: Array<ResponseRoutePart>;
}



            export type ResponseRoutePartTypeEnum = 'basic' | 'start_end' | 'road' | 'public_transport';
/**
 * 
 * @export
 */
export type ResponseRoutePart = {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    type: ResponseRoutePartTypeEnum;
    /**
     * 
     * @type {ResponseTransportationMode}
     * @memberof ResponseRoutePart
     */
    mode: ResponseTransportationMode;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    directions: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    travel_time: number;
    /**
     * 
     * @type {Array<Coords>}
     * @memberof ResponseRoutePart
     */
    coords: Array<Coords>;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    direction?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    road?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    turn?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    line?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    departure_station?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    arrival_station?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    departs_at?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    arrives_at?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    num_stops?: number;
}


/**
 * 
 * @export
 */
export type ResponseRoutes = {
    /**
     * 
     * @type {Array<ResponseRoutesResult>}
     * @memberof ResponseRoutes
     */
    results: Array<ResponseRoutesResult>;
}


/**
 * 
 * @export
 */
export type ResponseRoutesLocation = {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutesLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseRoutesProperties>}
     * @memberof ResponseRoutesLocation
     */
    properties: Array<ResponseRoutesProperties>;
}


/**
 * 
 * @export
 */
export type ResponseRoutesProperties = {
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutesProperties
     */
    travel_time?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutesProperties
     */
    distance?: number;
    /**
     * 
     * @type {ResponseFares}
     * @memberof ResponseRoutesProperties
     */
    fares?: ResponseFares;
    /**
     * 
     * @type {ResponseRoute}
     * @memberof ResponseRoutesProperties
     */
    route?: ResponseRoute;
}


/**
 * 
 * @export
 */
export type ResponseRoutesResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutesResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseRoutesLocation>}
     * @memberof ResponseRoutesResult
     */
    locations: Array<ResponseRoutesLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseRoutesResult
     */
    unreachable: Array<string>;
}


/**
 * 
 * @export
 */
export type ResponseShape = {
    /**
     * 
     * @type {Array<Coords>}
     * @memberof ResponseShape
     */
    shell: Array<Coords>;
    /**
     * 
     * @type {Array<Array<Coords>>}
     * @memberof ResponseShape
     */
    holes: Array<Array<Coords>>;
}


/**
 * 
 * @export
 */
export type ResponseSupportedLocation = {
    /**
     * 
     * @type {string}
     * @memberof ResponseSupportedLocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseSupportedLocation
     */
    map_name: string;
}


/**
 * 
 * @export
 */
export type ResponseSupportedLocations = {
    /**
     * 
     * @type {Array<ResponseSupportedLocation>}
     * @memberof ResponseSupportedLocations
     */
    locations: Array<ResponseSupportedLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseSupportedLocations
     */
    unsupported_locations: Array<string>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilter = {
    /**
     * 
     * @type {Array<ResponseTimeFilterResult>}
     * @memberof ResponseTimeFilter
     */
    results: Array<ResponseTimeFilterResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterFast = {
    /**
     * 
     * @type {Array<ResponseTimeFilterFastResult>}
     * @memberof ResponseTimeFilterFast
     */
    results: Array<ResponseTimeFilterFastResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterFastLocation = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterFastLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterFastProperties>}
     * @memberof ResponseTimeFilterFastLocation
     */
    properties: Array<ResponseTimeFilterFastProperties>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterFastProperties = {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterFastProperties
     */
    travel_time?: number;
    /**
     * 
     * @type {ResponseFaresFast}
     * @memberof ResponseTimeFilterFastProperties
     */
    fares?: ResponseFaresFast;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterFastResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterFastResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterFastLocation>}
     * @memberof ResponseTimeFilterFastResult
     */
    locations: Array<ResponseTimeFilterFastLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseTimeFilterFastResult
     */
    unreachable: Array<string>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterLocation = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterProperties>}
     * @memberof ResponseTimeFilterLocation
     */
    properties: Array<ResponseTimeFilterProperties>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcode = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcode
     */
    code: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodesProperties>}
     * @memberof ResponseTimeFilterPostcode
     */
    properties: Array<ResponseTimeFilterPostcodesProperties>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeDistrict = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeDistrict
     */
    code: string;
    /**
     * 
     * @type {ResponseTimeFilterPostcodeDistrictProperties}
     * @memberof ResponseTimeFilterPostcodeDistrict
     */
    properties: ResponseTimeFilterPostcodeDistrictProperties;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeDistrictProperties = {
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    travel_time_reachable?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    travel_time_all?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    coverage?: number;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeDistricts = {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeDistrictsResult>}
     * @memberof ResponseTimeFilterPostcodeDistricts
     */
    results: Array<ResponseTimeFilterPostcodeDistrictsResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeDistrictsResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeDistrictsResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeDistrict>}
     * @memberof ResponseTimeFilterPostcodeDistrictsResult
     */
    districts: Array<ResponseTimeFilterPostcodeDistrict>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeSector = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeSector
     */
    code: string;
    /**
     * 
     * @type {ResponseTimeFilterPostcodeSectorProperties}
     * @memberof ResponseTimeFilterPostcodeSector
     */
    properties: ResponseTimeFilterPostcodeSectorProperties;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeSectorProperties = {
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    travel_time_reachable?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    travel_time_all?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    coverage?: number;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeSectors = {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeSectorsResult>}
     * @memberof ResponseTimeFilterPostcodeSectors
     */
    results: Array<ResponseTimeFilterPostcodeSectorsResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodeSectorsResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeSectorsResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeSector>}
     * @memberof ResponseTimeFilterPostcodeSectorsResult
     */
    sectors: Array<ResponseTimeFilterPostcodeSector>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodes = {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodesResult>}
     * @memberof ResponseTimeFilterPostcodes
     */
    results: Array<ResponseTimeFilterPostcodesResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodesProperties = {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodesProperties
     */
    travel_time?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodesProperties
     */
    distance?: number;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterPostcodesResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodesResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcode>}
     * @memberof ResponseTimeFilterPostcodesResult
     */
    postcodes: Array<ResponseTimeFilterPostcode>;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterProperties = {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterProperties
     */
    travel_time?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterProperties
     */
    distance?: number;
    /**
     * 
     * @type {Array<ResponseDistanceBreakdownItem>}
     * @memberof ResponseTimeFilterProperties
     */
    distance_breakdown?: Array<ResponseDistanceBreakdownItem>;
    /**
     * 
     * @type {ResponseFares}
     * @memberof ResponseTimeFilterProperties
     */
    fares?: ResponseFares;
    /**
     * 
     * @type {ResponseRoute}
     * @memberof ResponseTimeFilterProperties
     */
    route?: ResponseRoute;
}


/**
 * 
 * @export
 */
export type ResponseTimeFilterResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterLocation>}
     * @memberof ResponseTimeFilterResult
     */
    locations: Array<ResponseTimeFilterLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseTimeFilterResult
     */
    unreachable: Array<string>;
}


/**
 * 
 * @export
 */
export type ResponseTimeMap = {
    /**
     * 
     * @type {Array<ResponseTimeMapResult>}
     * @memberof ResponseTimeMap
     */
    results: Array<ResponseTimeMapResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapBoundingBoxes = {
    /**
     * 
     * @type {Array<ResponseTimeMapBoundingBoxesResult>}
     * @memberof ResponseTimeMapBoundingBoxes
     */
    results: Array<ResponseTimeMapBoundingBoxesResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapBoundingBoxesResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseBoundingBox>}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    bounding_boxes: Array<ResponseBoundingBox>;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    properties: ResponseTimeMapProperties;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapProperties = {
    /**
     * 
     * @type {boolean}
     * @memberof ResponseTimeMapProperties
     */
    is_only_walking?: boolean;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapResult
     */
    search_id: string;
    /**
     * 
     * @type {Array<ResponseShape>}
     * @memberof ResponseTimeMapResult
     */
    shapes: Array<ResponseShape>;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapResult
     */
    properties: ResponseTimeMapProperties;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapWkt = {
    /**
     * 
     * @type {Array<ResponseTimeMapWktResult>}
     * @memberof ResponseTimeMapWkt
     */
    results: Array<ResponseTimeMapWktResult>;
}


/**
 * 
 * @export
 */
export type ResponseTimeMapWktResult = {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapWktResult
     */
    search_id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapWktResult
     */
    shape: string;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapWktResult
     */
    properties: ResponseTimeMapProperties;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type ResponseTransportationMode = 'car' | 'parking' | 'boarding' | 'walk' | 'bike' | 'train' | 'rail_national' | 'rail_overground' | 'rail_underground' | 'rail_dlr' | 'bus' | 'cable_car' | 'plane' | 'ferry' | 'coach';

/**
 * 
 * @export
 */
export type ResponseTravelTimeStatistics = {
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    min: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    max: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    mean: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    median: number;
}




/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'lat' is not null or undefined
            if (lat === null || lat === undefined) {
                throw new RequiredError('lat','Required parameter lat was null or undefined when calling geocodingReverseSearch.');
            }
            // verify required parameter 'lng' is not null or undefined
            if (lng === null || lng === undefined) {
                throw new RequiredError('lng','Required parameter lng was null or undefined when calling geocodingReverseSearch.');
            }
            const localVarPath = `/v4/geocoding/reverse`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = ((lat:any):string);
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = ((lng:any):string);
            }

            if (withinCountry !== undefined) {
                localVarQueryParameter['within.country'] = ((withinCountry:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling geocodingSearch.');
            }
            const localVarPath = `/v4/geocoding/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = ((query:any):string);
            }

            if (focusLat !== undefined) {
                localVarQueryParameter['focus.lat'] = ((focusLat:any):string);
            }

            if (focusLng !== undefined) {
                localVarQueryParameter['focus.lng'] = ((focusLng:any):string);
            }

            if (withinCountry !== undefined) {
                localVarQueryParameter['within.country'] = ((withinCountry:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        mapInfo(options: RequestOptions): FetchArgs {
            const localVarPath = `/v4/map-info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        routes(requestRoutes: RequestRoutes, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestRoutes' is not null or undefined
            if (requestRoutes === null || requestRoutes === undefined) {
                throw new RequiredError('requestRoutes','Required parameter requestRoutes was null or undefined when calling routes.');
            }
            const localVarPath = `/v4/routes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestRoutes !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestRoutes != null ? requestRoutes : {}) : (((requestRoutes:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        supportedLocations(requestSupportedLocations: RequestSupportedLocations, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestSupportedLocations' is not null or undefined
            if (requestSupportedLocations === null || requestSupportedLocations === undefined) {
                throw new RequiredError('requestSupportedLocations','Required parameter requestSupportedLocations was null or undefined when calling supportedLocations.');
            }
            const localVarPath = `/v4/supported-locations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestSupportedLocations !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestSupportedLocations != null ? requestSupportedLocations : {}) : (((requestSupportedLocations:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilter(requestTimeFilter: RequestTimeFilter, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeFilter' is not null or undefined
            if (requestTimeFilter === null || requestTimeFilter === undefined) {
                throw new RequiredError('requestTimeFilter','Required parameter requestTimeFilter was null or undefined when calling timeFilter.');
            }
            const localVarPath = `/v4/time-filter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeFilter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeFilter != null ? requestTimeFilter : {}) : (((requestTimeFilter:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeFilterFast' is not null or undefined
            if (requestTimeFilterFast === null || requestTimeFilterFast === undefined) {
                throw new RequiredError('requestTimeFilterFast','Required parameter requestTimeFilterFast was null or undefined when calling timeFilterFast.');
            }
            const localVarPath = `/v4/time-filter/fast`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeFilterFast !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeFilterFast != null ? requestTimeFilterFast : {}) : (((requestTimeFilterFast:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeFilterPostcodeDistricts' is not null or undefined
            if (requestTimeFilterPostcodeDistricts === null || requestTimeFilterPostcodeDistricts === undefined) {
                throw new RequiredError('requestTimeFilterPostcodeDistricts','Required parameter requestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
            }
            const localVarPath = `/v4/time-filter/postcode-districts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeFilterPostcodeDistricts !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodeDistricts != null ? requestTimeFilterPostcodeDistricts : {}) : (((requestTimeFilterPostcodeDistricts:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeFilterPostcodeSectors' is not null or undefined
            if (requestTimeFilterPostcodeSectors === null || requestTimeFilterPostcodeSectors === undefined) {
                throw new RequiredError('requestTimeFilterPostcodeSectors','Required parameter requestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
            }
            const localVarPath = `/v4/time-filter/postcode-sectors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeFilterPostcodeSectors !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodeSectors != null ? requestTimeFilterPostcodeSectors : {}) : (((requestTimeFilterPostcodeSectors:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeFilterPostcodes' is not null or undefined
            if (requestTimeFilterPostcodes === null || requestTimeFilterPostcodes === undefined) {
                throw new RequiredError('requestTimeFilterPostcodes','Required parameter requestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
            }
            const localVarPath = `/v4/time-filter/postcodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeFilterPostcodes !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodes != null ? requestTimeFilterPostcodes : {}) : (((requestTimeFilterPostcodes:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeMap(requestTimeMap: RequestTimeMap, options: RequestOptions): FetchArgs {
            // verify required parameter 'requestTimeMap' is not null or undefined
            if (requestTimeMap === null || requestTimeMap === undefined) {
                throw new RequiredError('requestTimeMap','Required parameter requestTimeMap was null or undefined when calling timeMap.');
            }
            const localVarPath = `/v4/time-map`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Api-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-Application-Id")
                    : configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof requestTimeMap !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requestTimeMap != null ? requestTimeMap : {}) : (((requestTimeMap:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, options?: RequestOptions): Promise<ResponseGeocoding>,

    geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, options?: RequestOptions): Promise<ResponseGeocoding>,

    mapInfo(options?: RequestOptions): Promise<ResponseMapInfo>,

    routes(requestRoutes: RequestRoutes, options?: RequestOptions): Promise<ResponseRoutes>,

    supportedLocations(requestSupportedLocations: RequestSupportedLocations, options?: RequestOptions): Promise<ResponseSupportedLocations>,

    timeFilter(requestTimeFilter: RequestTimeFilter, options?: RequestOptions): Promise<ResponseTimeFilter>,

    timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options?: RequestOptions): Promise<ResponseTimeFilterFast>,

    timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options?: RequestOptions): Promise<ResponseTimeFilterPostcodeDistricts>,

    timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options?: RequestOptions): Promise<ResponseTimeFilterPostcodeSectors>,

    timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options?: RequestOptions): Promise<ResponseTimeFilterPostcodes>,

    timeMap(requestTimeMap: RequestTimeMap, options?: RequestOptions): Promise<ResponseTimeMap>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, options?: RequestOptions = {}): Promise<ResponseGeocoding> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).geocodingReverseSearch(lat, lng, withinCountry, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, options?: RequestOptions = {}): Promise<ResponseGeocoding> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).geocodingSearch(query, focusLat, focusLng, withinCountry, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        mapInfo(options?: RequestOptions = {}): Promise<ResponseMapInfo> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mapInfo(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        routes(requestRoutes: RequestRoutes, options?: RequestOptions = {}): Promise<ResponseRoutes> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).routes(requestRoutes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        supportedLocations(requestSupportedLocations: RequestSupportedLocations, options?: RequestOptions = {}): Promise<ResponseSupportedLocations> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).supportedLocations(requestSupportedLocations, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilter(requestTimeFilter: RequestTimeFilter, options?: RequestOptions = {}): Promise<ResponseTimeFilter> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeFilter(requestTimeFilter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options?: RequestOptions = {}): Promise<ResponseTimeFilterFast> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeFilterFast(requestTimeFilterFast, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options?: RequestOptions = {}): Promise<ResponseTimeFilterPostcodeDistricts> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options?: RequestOptions = {}): Promise<ResponseTimeFilterPostcodeSectors> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options?: RequestOptions = {}): Promise<ResponseTimeFilterPostcodes> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeFilterPostcodes(requestTimeFilterPostcodes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        timeMap(requestTimeMap: RequestTimeMap, options?: RequestOptions = {}): Promise<ResponseTimeMap> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).timeMap(requestTimeMap, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }
