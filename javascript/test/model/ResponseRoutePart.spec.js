/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TravelTimeApi);
  }
}(this, function(expect, TravelTimeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TravelTimeApi.ResponseRoutePart();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ResponseRoutePart', function() {
    it('should create an instance of ResponseRoutePart', function() {
      // uncomment below and update the code to test ResponseRoutePart
      //var instane = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be.a(TravelTimeApi.ResponseRoutePart);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property directions (base name: "directions")', function() {
      // uncomment below and update the code to test the property directions
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property distance (base name: "distance")', function() {
      // uncomment below and update the code to test the property distance
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property travelTime (base name: "travel_time")', function() {
      // uncomment below and update the code to test the property travelTime
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property coords (base name: "coords")', function() {
      // uncomment below and update the code to test the property coords
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property road (base name: "road")', function() {
      // uncomment below and update the code to test the property road
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property turn (base name: "turn")', function() {
      // uncomment below and update the code to test the property turn
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property line (base name: "line")', function() {
      // uncomment below and update the code to test the property line
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property departureStation (base name: "departure_station")', function() {
      // uncomment below and update the code to test the property departureStation
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property arrivalStation (base name: "arrival_station")', function() {
      // uncomment below and update the code to test the property arrivalStation
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property departsAt (base name: "departs_at")', function() {
      // uncomment below and update the code to test the property departsAt
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property arrivesAt (base name: "arrives_at")', function() {
      // uncomment below and update the code to test the property arrivesAt
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

    it('should have the property numStops (base name: "num_stops")', function() {
      // uncomment below and update the code to test the property numStops
      //var instance = new TravelTimeApi.ResponseRoutePart();
      //expect(instance).to.be();
    });

  });

}));
