/*
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.2.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.traveltimeapp.com";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/v4/time-filter", () => {
        let url = BASE_URL + `/v4/time-filter`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"locations": [{"id": "string", "coords": "coords"}], "departureSearches": [{"id": "string", "departureLocationId": "string", "arrivalLocationIds": "list", "transportation": "requesttransportation", "travelTime": "integer", "departureTime": "date", "properties": "list", "range": "requestrangefull"}], "arrivalSearches": [{"id": "string", "departureLocationIds": "list", "arrivalLocationId": "string", "transportation": "requesttransportation", "travelTime": "integer", "arrivalTime": "date", "properties": "list", "range": "requestrangefull"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/time-filter/postcodes", () => {
        let url = BASE_URL + `/v4/time-filter/postcodes`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"departureSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "departureTime": "date", "properties": "list", "range": "requestrangefull"}], "arrivalSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "arrivalTime": "date", "properties": "list", "range": "requestrangefull"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/time-filter/postcode-districts", () => {
        let url = BASE_URL + `/v4/time-filter/postcode-districts`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"departureSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "departureTime": "date", "reachablePostcodesThreshold": "double", "properties": "list", "range": "requestrangefull"}], "arrivalSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "arrivalTime": "date", "reachablePostcodesThreshold": "double", "properties": "list", "range": "requestrangefull"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/time-filter/postcode-sectors", () => {
        let url = BASE_URL + `/v4/time-filter/postcode-sectors`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"departureSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "departureTime": "date", "reachablePostcodesThreshold": "double", "properties": "list", "range": "requestrangefull"}], "arrivalSearches": [{"id": "string", "transportation": "requesttransportation", "travelTime": "integer", "arrivalTime": "date", "reachablePostcodesThreshold": "double", "properties": "list", "range": "requestrangefull"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/time-filter/fast", () => {
        let url = BASE_URL + `/v4/time-filter/fast`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"locations": [{"id": "string", "coords": "coords"}], "arrivalSearches": {"manyToOne": "list", "oneToMany": "list"}};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/time-map", () => {
        let url = BASE_URL + `/v4/time-map`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"departureSearches": [{"id": "string", "coords": "coords", "transportation": "requesttransportation", "travelTime": "integer", "departureTime": "date", "properties": "list", "range": "requestrangenomaxresults"}], "arrivalSearches": [{"id": "string", "coords": "coords", "transportation": "requesttransportation", "travelTime": "integer", "arrivalTime": "date", "properties": "list", "range": "requestrangenomaxresults"}], "unions": [{"id": "string", "searchIds": "list"}], "intersections": [{"id": "string", "searchIds": "list"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/routes", () => {
        let url = BASE_URL + `/v4/routes`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"locations": [{"id": "string", "coords": "coords"}], "departureSearches": [{"id": "string", "departureLocationId": "string", "arrivalLocationIds": "list", "transportation": "requesttransportation", "departureTime": "date", "properties": "list", "range": "requestrangefull"}], "arrivalSearches": [{"id": "string", "departureLocationIds": "list", "arrivalLocationId": "string", "transportation": "requesttransportation", "arrivalTime": "date", "properties": "list", "range": "requestrangefull"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/geocoding/search", () => {
        let withinCountry = "TODO_EDIT_THE_WITHIN.COUNTRY";
        let focusLat = "TODO_EDIT_THE_FOCUS.LAT";
        let query = "TODO_EDIT_THE_QUERY";
        let focusLng = "TODO_EDIT_THE_FOCUS.LNG";
        let url = BASE_URL + `/v4/geocoding/search?query=${query}&focus.lat=${focus.lat}&focus.lng=${focus.lng}&within.country=${within.country}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/geocoding/reverse", () => {
        let lng = "TODO_EDIT_THE_LNG";
        let withinCountry = "TODO_EDIT_THE_WITHIN.COUNTRY";
        let lat = "TODO_EDIT_THE_LAT";
        let url = BASE_URL + `/v4/geocoding/reverse?lat=${lat}&lng=${lng}&within.country=${within.country}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/map-info", () => {
        let url = BASE_URL + `/v4/map-info`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/v4/supported-locations", () => {
        let url = BASE_URL + `/v4/supported-locations`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"locations": [{"id": "string", "coords": "coords"}]};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/)": (r) => r.status === 200
        });
        check(request, {
            "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
}
