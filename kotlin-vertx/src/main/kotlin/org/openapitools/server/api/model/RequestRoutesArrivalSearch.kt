/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.3
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.RequestRangeFull
import org.openapitools.server.api.model.RequestRoutesProperty
import org.openapitools.server.api.model.RequestTransportation

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param id 
 * @param departureLocationIds 
 * @param arrivalLocationId 
 * @param transportation 
 * @param arrivalTime 
 * @param properties 
 * @param range 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class RequestRoutesArrivalSearch (
    @SerializedName("id") private val _id: kotlin.String?,
    @SerializedName("departureLocationIds") private val _departureLocationIds: kotlin.Array<kotlin.String>?,
    @SerializedName("arrivalLocationId") private val _arrivalLocationId: kotlin.String?,
    @SerializedName("transportation") private val _transportation: RequestTransportation?,
    @SerializedName("arrivalTime") private val _arrivalTime: java.time.OffsetDateTime?,
    @SerializedName("properties") private val _properties: kotlin.Array<RequestRoutesProperty>?,
    val range: RequestRangeFull? = null
) {

        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val departureLocationIds get() = _departureLocationIds ?: throw IllegalArgumentException("departureLocationIds is required")
                    
        val arrivalLocationId get() = _arrivalLocationId ?: throw IllegalArgumentException("arrivalLocationId is required")
                    
        val transportation get() = _transportation ?: throw IllegalArgumentException("transportation is required")
                    
        val arrivalTime get() = _arrivalTime ?: throw IllegalArgumentException("arrivalTime is required")
                    
        val properties get() = _properties ?: throw IllegalArgumentException("properties is required")
                    
}

