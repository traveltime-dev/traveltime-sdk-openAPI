=begin comment

TravelTime API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.2.3
Contact: support@igeolise.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# geocoding_reverse_search
#
# 
# 
# @param double $lat  (required)
# @param double $lng  (required)
# @param string $within/country  (optional)
{
    my $params = {
    'lat' => {
        data_type => 'double',
        description => '',
        required => '1',
    },
    'lng' => {
        data_type => 'double',
        description => '',
        required => '1',
    },
    'within/country' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'geocoding_reverse_search' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseGeocoding',
        };
}
# @return ResponseGeocoding
#
sub geocoding_reverse_search {
    my ($self, %args) = @_;

    # verify the required parameter 'lat' is set
    unless (exists $args{'lat'}) {
      croak("Missing the required parameter 'lat' when calling geocoding_reverse_search");
    }

    # verify the required parameter 'lng' is set
    unless (exists $args{'lng'}) {
      croak("Missing the required parameter 'lng' when calling geocoding_reverse_search");
    }

    # parse inputs
    my $_resource_path = '/v4/geocoding/reverse';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'lat'}) {
        $query_params->{'lat'} = $self->{api_client}->to_query_value($args{'lat'});
    }

    # query params
    if ( exists $args{'lng'}) {
        $query_params->{'lng'} = $self->{api_client}->to_query_value($args{'lng'});
    }

    # query params
    if ( exists $args{'within/country'}) {
        $query_params->{'within.country'} = $self->{api_client}->to_query_value($args{'within/country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseGeocoding', $response);
    return $_response_object;
}

#
# geocoding_search
#
# 
# 
# @param string $query  (required)
# @param double $focus/lat  (optional)
# @param double $focus/lng  (optional)
# @param string $within/country  (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'focus/lat' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    'focus/lng' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    'within/country' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'geocoding_search' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseGeocoding',
        };
}
# @return ResponseGeocoding
#
sub geocoding_search {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling geocoding_search");
    }

    # parse inputs
    my $_resource_path = '/v4/geocoding/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'focus/lat'}) {
        $query_params->{'focus.lat'} = $self->{api_client}->to_query_value($args{'focus/lat'});
    }

    # query params
    if ( exists $args{'focus/lng'}) {
        $query_params->{'focus.lng'} = $self->{api_client}->to_query_value($args{'focus/lng'});
    }

    # query params
    if ( exists $args{'within/country'}) {
        $query_params->{'within.country'} = $self->{api_client}->to_query_value($args{'within/country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseGeocoding', $response);
    return $_response_object;
}

#
# map_info
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'map_info' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseMapInfo',
        };
}
# @return ResponseMapInfo
#
sub map_info {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v4/map-info';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseMapInfo', $response);
    return $_response_object;
}

#
# routes
#
# 
# 
# @param RequestRoutes $request_routes  (required)
{
    my $params = {
    'request_routes' => {
        data_type => 'RequestRoutes',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'routes' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseRoutes',
        };
}
# @return ResponseRoutes
#
sub routes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_routes' is set
    unless (exists $args{'request_routes'}) {
      croak("Missing the required parameter 'request_routes' when calling routes");
    }

    # parse inputs
    my $_resource_path = '/v4/routes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_routes'}) {
        $_body_data = $args{'request_routes'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseRoutes', $response);
    return $_response_object;
}

#
# supported_locations
#
# 
# 
# @param RequestSupportedLocations $request_supported_locations  (required)
{
    my $params = {
    'request_supported_locations' => {
        data_type => 'RequestSupportedLocations',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'supported_locations' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseSupportedLocations',
        };
}
# @return ResponseSupportedLocations
#
sub supported_locations {
    my ($self, %args) = @_;

    # verify the required parameter 'request_supported_locations' is set
    unless (exists $args{'request_supported_locations'}) {
      croak("Missing the required parameter 'request_supported_locations' when calling supported_locations");
    }

    # parse inputs
    my $_resource_path = '/v4/supported-locations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_supported_locations'}) {
        $_body_data = $args{'request_supported_locations'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseSupportedLocations', $response);
    return $_response_object;
}

#
# time_filter
#
# 
# 
# @param RequestTimeFilter $request_time_filter  (required)
{
    my $params = {
    'request_time_filter' => {
        data_type => 'RequestTimeFilter',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_filter' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeFilter',
        };
}
# @return ResponseTimeFilter
#
sub time_filter {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_filter' is set
    unless (exists $args{'request_time_filter'}) {
      croak("Missing the required parameter 'request_time_filter' when calling time_filter");
    }

    # parse inputs
    my $_resource_path = '/v4/time-filter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_filter'}) {
        $_body_data = $args{'request_time_filter'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeFilter', $response);
    return $_response_object;
}

#
# time_filter_fast
#
# 
# 
# @param RequestTimeFilterFast $request_time_filter_fast  (required)
{
    my $params = {
    'request_time_filter_fast' => {
        data_type => 'RequestTimeFilterFast',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_filter_fast' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeFilterFast',
        };
}
# @return ResponseTimeFilterFast
#
sub time_filter_fast {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_filter_fast' is set
    unless (exists $args{'request_time_filter_fast'}) {
      croak("Missing the required parameter 'request_time_filter_fast' when calling time_filter_fast");
    }

    # parse inputs
    my $_resource_path = '/v4/time-filter/fast';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_filter_fast'}) {
        $_body_data = $args{'request_time_filter_fast'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeFilterFast', $response);
    return $_response_object;
}

#
# time_filter_postcode_districts
#
# 
# 
# @param RequestTimeFilterPostcodeDistricts $request_time_filter_postcode_districts  (required)
{
    my $params = {
    'request_time_filter_postcode_districts' => {
        data_type => 'RequestTimeFilterPostcodeDistricts',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_filter_postcode_districts' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeFilterPostcodeDistricts',
        };
}
# @return ResponseTimeFilterPostcodeDistricts
#
sub time_filter_postcode_districts {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_filter_postcode_districts' is set
    unless (exists $args{'request_time_filter_postcode_districts'}) {
      croak("Missing the required parameter 'request_time_filter_postcode_districts' when calling time_filter_postcode_districts");
    }

    # parse inputs
    my $_resource_path = '/v4/time-filter/postcode-districts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_filter_postcode_districts'}) {
        $_body_data = $args{'request_time_filter_postcode_districts'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeFilterPostcodeDistricts', $response);
    return $_response_object;
}

#
# time_filter_postcode_sectors
#
# 
# 
# @param RequestTimeFilterPostcodeSectors $request_time_filter_postcode_sectors  (required)
{
    my $params = {
    'request_time_filter_postcode_sectors' => {
        data_type => 'RequestTimeFilterPostcodeSectors',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_filter_postcode_sectors' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeFilterPostcodeSectors',
        };
}
# @return ResponseTimeFilterPostcodeSectors
#
sub time_filter_postcode_sectors {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_filter_postcode_sectors' is set
    unless (exists $args{'request_time_filter_postcode_sectors'}) {
      croak("Missing the required parameter 'request_time_filter_postcode_sectors' when calling time_filter_postcode_sectors");
    }

    # parse inputs
    my $_resource_path = '/v4/time-filter/postcode-sectors';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_filter_postcode_sectors'}) {
        $_body_data = $args{'request_time_filter_postcode_sectors'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeFilterPostcodeSectors', $response);
    return $_response_object;
}

#
# time_filter_postcodes
#
# 
# 
# @param RequestTimeFilterPostcodes $request_time_filter_postcodes  (required)
{
    my $params = {
    'request_time_filter_postcodes' => {
        data_type => 'RequestTimeFilterPostcodes',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_filter_postcodes' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeFilterPostcodes',
        };
}
# @return ResponseTimeFilterPostcodes
#
sub time_filter_postcodes {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_filter_postcodes' is set
    unless (exists $args{'request_time_filter_postcodes'}) {
      croak("Missing the required parameter 'request_time_filter_postcodes' when calling time_filter_postcodes");
    }

    # parse inputs
    my $_resource_path = '/v4/time-filter/postcodes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_filter_postcodes'}) {
        $_body_data = $args{'request_time_filter_postcodes'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeFilterPostcodes', $response);
    return $_response_object;
}

#
# time_map
#
# 
# 
# @param RequestTimeMap $request_time_map  (required)
{
    my $params = {
    'request_time_map' => {
        data_type => 'RequestTimeMap',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'time_map' } = { 
        summary => '',
        params => $params,
        returns => 'ResponseTimeMap',
        };
}
# @return ResponseTimeMap
#
sub time_map {
    my ($self, %args) = @_;

    # verify the required parameter 'request_time_map' is set
    unless (exists $args{'request_time_map'}) {
      croak("Missing the required parameter 'request_time_map' when calling time_map");
    }

    # parse inputs
    my $_resource_path = '/v4/time-map';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/vnd.wkt+json', 'application/vnd.wkt-no-holes+json', 'application/vnd.bounding-boxes+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_time_map'}) {
        $_body_data = $args{'request_time_map'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKey ApplicationId )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResponseTimeMap', $response);
    return $_response_object;
}

1;
