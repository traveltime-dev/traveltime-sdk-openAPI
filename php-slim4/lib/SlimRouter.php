<?php

/**
 * TravelTime API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
use Slim\Exception\HttpNotImplementedException;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
use OpenAPIServer\Mock\OpenApiDataMockerRouteMiddleware;
use Slim\Psr7\Factory\ResponseFactory;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/v4/geocoding/reverse',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'geocodingReverseSearch',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseGeocoding"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/v4/geocoding/search',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'geocodingSearch',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Match a query string to geographic coordinates. [Docs link](http://docs.traveltime.com/reference/geocoding-search/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseGeocoding"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/v4/map-info',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'mapInfo',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns information about currently supported countries. [Docs link](http://docs.traveltime.com/reference/map-info/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseMapInfo"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/routes',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'routes',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns routing information between source and destinations. [Docs link](http://docs.traveltime.com/reference/routes/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseRoutes"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/supported-locations',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'supportedLocations',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Find out what points are supported by our api. [Docs link](http://docs.traveltime.com/reference/supported-locations/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseSupportedLocations"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-filter',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeFilter',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltime.com/reference/time-filter)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeFilter"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-filter/fast',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeFilterFast',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "A very fast version of Time Filter. [Docs link](http://docs.traveltime.com/reference/time-filter-fast/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeFilterFast"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-filter/postcode-districts',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeFilterPostcodeDistricts',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltime.com/reference/postcode-district-filter/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeFilterPostcodeDistricts"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-filter/postcode-sectors',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeFilterPostcodeSectors',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltime.com/reference/postcode-sector-filter/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeFilterPostcodeSectors"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-filter/postcodes',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeFilterPostcodes',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltime.com/reference/postcode-search/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeFilterPostcodes"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/v4/time-map',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'timeMap',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltime.com/reference/time-map/)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeMap"
      }
    },
    "application/vnd.wkt+json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeMapWkt"
      }
    },
    "application/vnd.wkt-no-holes+json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeMapWkt"
      }
    },
    "application/vnd.bounding-boxes+json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseTimeMapBoundingBoxes"
      }
    }
  }
}',
                ],
                'default' => [
                    'jsonSchema' => '{
  "description" : "The json body returned upon error. [Docs link](http://docs.traveltime.com/reference/error-response)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ResponseError"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'ApiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Api-Key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
                // apiKey security schema named 'ApplicationId'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'X-Application-Id',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     * @throws Exception when not supported authorization schema type provided
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };

        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
        $responseFactory = new ResponseFactory();
        $getMockStatusCodeCallback = $mockerOptions['getMockStatusCodeCallback'] ?? null;
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

            if (is_callable($getMockStatusCodeCallback)) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = new OpenApiDataMockerRouteMiddleware($dataMocker, $mockSchemaResponses, $responseFactory, $getMockStatusCodeCallback, $mockAfterCallback);
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
