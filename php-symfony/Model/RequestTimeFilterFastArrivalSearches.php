<?php
/**
 * RequestTimeFilterFastArrivalSearches
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RequestTimeFilterFastArrivalSearches model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class RequestTimeFilterFastArrivalSearches 
{
        /**
     * @var OpenAPI\Server\Model\RequestTimeFilterFastArrivalManyToOneSearch[]|null
     * @SerializedName("many_to_one")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\RequestTimeFilterFastArrivalManyToOneSearch")
     * })
     * @Type("array<OpenAPI\Server\Model\RequestTimeFilterFastArrivalManyToOneSearch>")
     * @Assert\Count(
     *   max = 10
     * )
     */
    protected $manyToOne;

    /**
     * @var OpenAPI\Server\Model\RequestTimeFilterFastArrivalOneToManySearch[]|null
     * @SerializedName("one_to_many")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\RequestTimeFilterFastArrivalOneToManySearch")
     * })
     * @Type("array<OpenAPI\Server\Model\RequestTimeFilterFastArrivalOneToManySearch>")
     * @Assert\Count(
     *   max = 10
     * )
     */
    protected $oneToMany;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->manyToOne = isset($data['manyToOne']) ? $data['manyToOne'] : null;
        $this->oneToMany = isset($data['oneToMany']) ? $data['oneToMany'] : null;
    }

    /**
     * Gets manyToOne.
     *
     * @return OpenAPI\Server\Model\RequestTimeFilterFastArrivalManyToOneSearch[]|null
     */
    public function getManyToOne(): ?array
    {
        return $this->manyToOne;
    }

    /**
     * Sets manyToOne.
     *
     * @param OpenAPI\Server\Model\RequestTimeFilterFastArrivalManyToOneSearch[]|null $manyToOne
     *
     * @return $this
     */
    public function setManyToOne(array $manyToOne = null)
    {
        $this->manyToOne = $manyToOne;

        return $this;
    }

    /**
     * Gets oneToMany.
     *
     * @return OpenAPI\Server\Model\RequestTimeFilterFastArrivalOneToManySearch[]|null
     */
    public function getOneToMany(): ?array
    {
        return $this->oneToMany;
    }

    /**
     * Sets oneToMany.
     *
     * @param OpenAPI\Server\Model\RequestTimeFilterFastArrivalOneToManySearch[]|null $oneToMany
     *
     * @return $this
     */
    public function setOneToMany(array $oneToMany = null)
    {
        $this->oneToMany = $oneToMany;

        return $this;
    }
}


