<?php
/**
 * DefaultApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * DefaultApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class DefaultApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for geocodingReverseSearch
     *
     * .
     *
     */
    public function testGeocodingReverseSearch()
    {
        $client = static::createClient();

        $path = '/v4/geocoding/reverse';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for geocodingSearch
     *
     * .
     *
     */
    public function testGeocodingSearch()
    {
        $client = static::createClient();

        $path = '/v4/geocoding/search';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for mapInfo
     *
     * .
     *
     */
    public function testMapInfo()
    {
        $client = static::createClient();

        $path = '/v4/map-info';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for routes
     *
     * .
     *
     */
    public function testRoutes()
    {
        $client = static::createClient();

        $path = '/v4/routes';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for supportedLocations
     *
     * .
     *
     */
    public function testSupportedLocations()
    {
        $client = static::createClient();

        $path = '/v4/supported-locations';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeFilter
     *
     * .
     *
     */
    public function testTimeFilter()
    {
        $client = static::createClient();

        $path = '/v4/time-filter';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeFilterFast
     *
     * .
     *
     */
    public function testTimeFilterFast()
    {
        $client = static::createClient();

        $path = '/v4/time-filter/fast';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeFilterPostcodeDistricts
     *
     * .
     *
     */
    public function testTimeFilterPostcodeDistricts()
    {
        $client = static::createClient();

        $path = '/v4/time-filter/postcode-districts';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeFilterPostcodeSectors
     *
     * .
     *
     */
    public function testTimeFilterPostcodeSectors()
    {
        $client = static::createClient();

        $path = '/v4/time-filter/postcode-sectors';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeFilterPostcodes
     *
     * .
     *
     */
    public function testTimeFilterPostcodes()
    {
        $client = static::createClient();

        $path = '/v4/time-filter/postcodes';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for timeMap
     *
     * .
     *
     */
    public function testTimeMap()
    {
        $client = static::createClient();

        $path = '/v4/time-map';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
