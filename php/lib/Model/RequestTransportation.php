<?php
/**
 * RequestTransportation
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RequestTransportation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RequestTransportation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RequestTransportation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'pt_change_delay' => 'int',
        'walking_time' => 'int',
        'driving_time_to_station' => 'int',
        'parking_time' => 'int',
        'boarding_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'pt_change_delay' => null,
        'walking_time' => null,
        'driving_time_to_station' => null,
        'parking_time' => null,
        'boarding_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'pt_change_delay' => 'pt_change_delay',
        'walking_time' => 'walking_time',
        'driving_time_to_station' => 'driving_time_to_station',
        'parking_time' => 'parking_time',
        'boarding_time' => 'boarding_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'pt_change_delay' => 'setPtChangeDelay',
        'walking_time' => 'setWalkingTime',
        'driving_time_to_station' => 'setDrivingTimeToStation',
        'parking_time' => 'setParkingTime',
        'boarding_time' => 'setBoardingTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'pt_change_delay' => 'getPtChangeDelay',
        'walking_time' => 'getWalkingTime',
        'driving_time_to_station' => 'getDrivingTimeToStation',
        'parking_time' => 'getParkingTime',
        'boarding_time' => 'getBoardingTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CYCLING = 'cycling';
    const TYPE_DRIVING = 'driving';
    const TYPE_DRIVINGTRAIN = 'driving+train';
    const TYPE_PUBLIC_TRANSPORT = 'public_transport';
    const TYPE_WALKING = 'walking';
    const TYPE_COACH = 'coach';
    const TYPE_BUS = 'bus';
    const TYPE_TRAIN = 'train';
    const TYPE_FERRY = 'ferry';
    const TYPE_DRIVINGFERRY = 'driving+ferry';
    const TYPE_CYCLINGFERRY = 'cycling+ferry';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CYCLING,
            self::TYPE_DRIVING,
            self::TYPE_DRIVINGTRAIN,
            self::TYPE_PUBLIC_TRANSPORT,
            self::TYPE_WALKING,
            self::TYPE_COACH,
            self::TYPE_BUS,
            self::TYPE_TRAIN,
            self::TYPE_FERRY,
            self::TYPE_DRIVINGFERRY,
            self::TYPE_CYCLINGFERRY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['pt_change_delay'] = $data['pt_change_delay'] ?? null;
        $this->container['walking_time'] = $data['walking_time'] ?? null;
        $this->container['driving_time_to_station'] = $data['driving_time_to_station'] ?? null;
        $this->container['parking_time'] = $data['parking_time'] ?? null;
        $this->container['boarding_time'] = $data['boarding_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pt_change_delay
     *
     * @return int|null
     */
    public function getPtChangeDelay()
    {
        return $this->container['pt_change_delay'];
    }

    /**
     * Sets pt_change_delay
     *
     * @param int|null $pt_change_delay pt_change_delay
     *
     * @return self
     */
    public function setPtChangeDelay($pt_change_delay)
    {
        $this->container['pt_change_delay'] = $pt_change_delay;

        return $this;
    }

    /**
     * Gets walking_time
     *
     * @return int|null
     */
    public function getWalkingTime()
    {
        return $this->container['walking_time'];
    }

    /**
     * Sets walking_time
     *
     * @param int|null $walking_time walking_time
     *
     * @return self
     */
    public function setWalkingTime($walking_time)
    {
        $this->container['walking_time'] = $walking_time;

        return $this;
    }

    /**
     * Gets driving_time_to_station
     *
     * @return int|null
     */
    public function getDrivingTimeToStation()
    {
        return $this->container['driving_time_to_station'];
    }

    /**
     * Sets driving_time_to_station
     *
     * @param int|null $driving_time_to_station driving_time_to_station
     *
     * @return self
     */
    public function setDrivingTimeToStation($driving_time_to_station)
    {
        $this->container['driving_time_to_station'] = $driving_time_to_station;

        return $this;
    }

    /**
     * Gets parking_time
     *
     * @return int|null
     */
    public function getParkingTime()
    {
        return $this->container['parking_time'];
    }

    /**
     * Sets parking_time
     *
     * @param int|null $parking_time parking_time
     *
     * @return self
     */
    public function setParkingTime($parking_time)
    {
        $this->container['parking_time'] = $parking_time;

        return $this;
    }

    /**
     * Gets boarding_time
     *
     * @return int|null
     */
    public function getBoardingTime()
    {
        return $this->container['boarding_time'];
    }

    /**
     * Sets boarding_time
     *
     * @param int|null $boarding_time boarding_time
     *
     * @return self
     */
    public function setBoardingTime($boarding_time)
    {
        $this->container['boarding_time'] = $boarding_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


