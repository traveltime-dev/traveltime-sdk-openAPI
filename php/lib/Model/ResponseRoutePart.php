<?php
/**
 * ResponseRoutePart
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResponseRoutePart Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ResponseRoutePart implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResponseRoutePart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'mode' => '\OpenAPI\Client\Model\ResponseTransportationMode',
        'directions' => 'string',
        'distance' => 'int',
        'travel_time' => 'int',
        'coords' => '\OpenAPI\Client\Model\Coords[]',
        'direction' => 'string',
        'road' => 'string',
        'turn' => 'string',
        'line' => 'string',
        'departure_station' => 'string',
        'arrival_station' => 'string',
        'departs_at' => 'string',
        'arrives_at' => 'string',
        'num_stops' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'mode' => null,
        'directions' => null,
        'distance' => null,
        'travel_time' => null,
        'coords' => null,
        'direction' => null,
        'road' => null,
        'turn' => null,
        'line' => null,
        'departure_station' => null,
        'arrival_station' => null,
        'departs_at' => null,
        'arrives_at' => null,
        'num_stops' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'mode' => 'mode',
        'directions' => 'directions',
        'distance' => 'distance',
        'travel_time' => 'travel_time',
        'coords' => 'coords',
        'direction' => 'direction',
        'road' => 'road',
        'turn' => 'turn',
        'line' => 'line',
        'departure_station' => 'departure_station',
        'arrival_station' => 'arrival_station',
        'departs_at' => 'departs_at',
        'arrives_at' => 'arrives_at',
        'num_stops' => 'num_stops'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'mode' => 'setMode',
        'directions' => 'setDirections',
        'distance' => 'setDistance',
        'travel_time' => 'setTravelTime',
        'coords' => 'setCoords',
        'direction' => 'setDirection',
        'road' => 'setRoad',
        'turn' => 'setTurn',
        'line' => 'setLine',
        'departure_station' => 'setDepartureStation',
        'arrival_station' => 'setArrivalStation',
        'departs_at' => 'setDepartsAt',
        'arrives_at' => 'setArrivesAt',
        'num_stops' => 'setNumStops'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'mode' => 'getMode',
        'directions' => 'getDirections',
        'distance' => 'getDistance',
        'travel_time' => 'getTravelTime',
        'coords' => 'getCoords',
        'direction' => 'getDirection',
        'road' => 'getRoad',
        'turn' => 'getTurn',
        'line' => 'getLine',
        'departure_station' => 'getDepartureStation',
        'arrival_station' => 'getArrivalStation',
        'departs_at' => 'getDepartsAt',
        'arrives_at' => 'getArrivesAt',
        'num_stops' => 'getNumStops'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_BASIC = 'basic';
    const TYPE_START_END = 'start_end';
    const TYPE_ROAD = 'road';
    const TYPE_PUBLIC_TRANSPORT = 'public_transport';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASIC,
            self::TYPE_START_END,
            self::TYPE_ROAD,
            self::TYPE_PUBLIC_TRANSPORT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['directions'] = $data['directions'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['travel_time'] = $data['travel_time'] ?? null;
        $this->container['coords'] = $data['coords'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['road'] = $data['road'] ?? null;
        $this->container['turn'] = $data['turn'] ?? null;
        $this->container['line'] = $data['line'] ?? null;
        $this->container['departure_station'] = $data['departure_station'] ?? null;
        $this->container['arrival_station'] = $data['arrival_station'] ?? null;
        $this->container['departs_at'] = $data['departs_at'] ?? null;
        $this->container['arrives_at'] = $data['arrives_at'] ?? null;
        $this->container['num_stops'] = $data['num_stops'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['directions'] === null) {
            $invalidProperties[] = "'directions' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['travel_time'] === null) {
            $invalidProperties[] = "'travel_time' can't be null";
        }
        if ($this->container['coords'] === null) {
            $invalidProperties[] = "'coords' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \OpenAPI\Client\Model\ResponseTransportationMode
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \OpenAPI\Client\Model\ResponseTransportationMode $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets directions
     *
     * @return string
     */
    public function getDirections()
    {
        return $this->container['directions'];
    }

    /**
     * Sets directions
     *
     * @param string $directions directions
     *
     * @return self
     */
    public function setDirections($directions)
    {
        $this->container['directions'] = $directions;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets travel_time
     *
     * @return int
     */
    public function getTravelTime()
    {
        return $this->container['travel_time'];
    }

    /**
     * Sets travel_time
     *
     * @param int $travel_time travel_time
     *
     * @return self
     */
    public function setTravelTime($travel_time)
    {
        $this->container['travel_time'] = $travel_time;

        return $this;
    }

    /**
     * Gets coords
     *
     * @return \OpenAPI\Client\Model\Coords[]
     */
    public function getCoords()
    {
        return $this->container['coords'];
    }

    /**
     * Sets coords
     *
     * @param \OpenAPI\Client\Model\Coords[] $coords coords
     *
     * @return self
     */
    public function setCoords($coords)
    {
        $this->container['coords'] = $coords;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets road
     *
     * @return string|null
     */
    public function getRoad()
    {
        return $this->container['road'];
    }

    /**
     * Sets road
     *
     * @param string|null $road road
     *
     * @return self
     */
    public function setRoad($road)
    {
        $this->container['road'] = $road;

        return $this;
    }

    /**
     * Gets turn
     *
     * @return string|null
     */
    public function getTurn()
    {
        return $this->container['turn'];
    }

    /**
     * Sets turn
     *
     * @param string|null $turn turn
     *
     * @return self
     */
    public function setTurn($turn)
    {
        $this->container['turn'] = $turn;

        return $this;
    }

    /**
     * Gets line
     *
     * @return string|null
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param string|null $line line
     *
     * @return self
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets departure_station
     *
     * @return string|null
     */
    public function getDepartureStation()
    {
        return $this->container['departure_station'];
    }

    /**
     * Sets departure_station
     *
     * @param string|null $departure_station departure_station
     *
     * @return self
     */
    public function setDepartureStation($departure_station)
    {
        $this->container['departure_station'] = $departure_station;

        return $this;
    }

    /**
     * Gets arrival_station
     *
     * @return string|null
     */
    public function getArrivalStation()
    {
        return $this->container['arrival_station'];
    }

    /**
     * Sets arrival_station
     *
     * @param string|null $arrival_station arrival_station
     *
     * @return self
     */
    public function setArrivalStation($arrival_station)
    {
        $this->container['arrival_station'] = $arrival_station;

        return $this;
    }

    /**
     * Gets departs_at
     *
     * @return string|null
     */
    public function getDepartsAt()
    {
        return $this->container['departs_at'];
    }

    /**
     * Sets departs_at
     *
     * @param string|null $departs_at departs_at
     *
     * @return self
     */
    public function setDepartsAt($departs_at)
    {
        $this->container['departs_at'] = $departs_at;

        return $this;
    }

    /**
     * Gets arrives_at
     *
     * @return string|null
     */
    public function getArrivesAt()
    {
        return $this->container['arrives_at'];
    }

    /**
     * Sets arrives_at
     *
     * @param string|null $arrives_at arrives_at
     *
     * @return self
     */
    public function setArrivesAt($arrives_at)
    {
        $this->container['arrives_at'] = $arrives_at;

        return $this;
    }

    /**
     * Gets num_stops
     *
     * @return int|null
     */
    public function getNumStops()
    {
        return $this->container['num_stops'];
    }

    /**
     * Sets num_stops
     *
     * @param int|null $num_stops num_stops
     *
     * @return self
     */
    public function setNumStops($num_stops)
    {
        $this->container['num_stops'] = $num_stops;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


