#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.3
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER ArrivalLocationId
No description available.
.PARAMETER DepartureLocationIds
No description available.
.PARAMETER Transportation
No description available.
.PARAMETER TravelTime
No description available.
.PARAMETER ArrivalTimePeriod
No description available.
.PARAMETER Properties
No description available.
.OUTPUTS

RequestTimeFilterFastArrivalManyToOneSearch<PSCustomObject>
#>

function Initialize-RequestTimeFilterFastArrivalManyToOneSearch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrivalLocationId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DepartureLocationIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Transportation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TravelTime},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArrivalTimePeriod},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RequestTimeFilterFastArrivalManyToOneSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($ArrivalLocationId -eq $null) {
            throw "invalid value for 'ArrivalLocationId', 'ArrivalLocationId' cannot be null."
        }

        if ($DepartureLocationIds -eq $null) {
            throw "invalid value for 'DepartureLocationIds', 'DepartureLocationIds' cannot be null."
        }

        if ($DepartureLocationIds.length -gt 100000) {
            throw "invalid value for 'DepartureLocationIds', number of items must be less than or equal to 100000."
        }

        if ($DepartureLocationIds.length -lt 1) {
            throw "invalid value for 'DepartureLocationIds', number of items must be greater than or equal to 1."
        }

        if ($Transportation -eq $null) {
            throw "invalid value for 'Transportation', 'Transportation' cannot be null."
        }

        if ($TravelTime -eq $null) {
            throw "invalid value for 'TravelTime', 'TravelTime' cannot be null."
        }

        if ($TravelTime -gt 14400) {
          throw "invalid value for 'TravelTime', must be smaller than or equal to 14400."
        }

        if ($TravelTime -lt 60) {
          throw "invalid value for 'TravelTime', must be greater than or equal to 60."
        }

        if ($ArrivalTimePeriod -eq $null) {
            throw "invalid value for 'ArrivalTimePeriod', 'ArrivalTimePeriod' cannot be null."
        }

        if ($Properties -eq $null) {
            throw "invalid value for 'Properties', 'Properties' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "arrival_location_id" = ${ArrivalLocationId}
            "departure_location_ids" = ${DepartureLocationIds}
            "transportation" = ${Transportation}
            "travel_time" = ${TravelTime}
            "arrival_time_period" = ${ArrivalTimePeriod}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RequestTimeFilterFastArrivalManyToOneSearch<PSCustomObject>

.DESCRIPTION

Convert from JSON to RequestTimeFilterFastArrivalManyToOneSearch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RequestTimeFilterFastArrivalManyToOneSearch<PSCustomObject>
#>
function ConvertFrom-JsonToRequestTimeFilterFastArrivalManyToOneSearch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RequestTimeFilterFastArrivalManyToOneSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RequestTimeFilterFastArrivalManyToOneSearch
        $AllProperties = ("id", "arrival_location_id", "departure_location_ids", "transportation", "travel_time", "arrival_time_period", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrival_location_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'arrival_location_id' missing."
        } else {
            $ArrivalLocationId = $JsonParameters.PSobject.Properties["arrival_location_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "departure_location_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'departure_location_ids' missing."
        } else {
            $DepartureLocationIds = $JsonParameters.PSobject.Properties["departure_location_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transportation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'transportation' missing."
        } else {
            $Transportation = $JsonParameters.PSobject.Properties["transportation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "travel_time"))) {
            throw "Error! JSON cannot be serialized due to the required property 'travel_time' missing."
        } else {
            $TravelTime = $JsonParameters.PSobject.Properties["travel_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrival_time_period"))) {
            throw "Error! JSON cannot be serialized due to the required property 'arrival_time_period' missing."
        } else {
            $ArrivalTimePeriod = $JsonParameters.PSobject.Properties["arrival_time_period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) {
            throw "Error! JSON cannot be serialized due to the required property 'properties' missing."
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "arrival_location_id" = ${ArrivalLocationId}
            "departure_location_ids" = ${DepartureLocationIds}
            "transportation" = ${Transportation}
            "travel_time" = ${TravelTime}
            "arrival_time_period" = ${ArrivalTimePeriod}
            "properties" = ${Properties}
        }

        return $PSO
    }

}

