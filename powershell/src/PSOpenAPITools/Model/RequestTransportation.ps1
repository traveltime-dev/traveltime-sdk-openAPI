#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.3
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER DisableBorderCrossing
No description available.
.PARAMETER PtChangeDelay
No description available.
.PARAMETER WalkingTime
No description available.
.PARAMETER DrivingTimeToStation
No description available.
.PARAMETER CyclingTimeToStation
No description available.
.PARAMETER ParkingTime
No description available.
.PARAMETER BoardingTime
No description available.
.OUTPUTS

RequestTransportation<PSCustomObject>
#>

function Initialize-RequestTransportation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("cycling", "driving", "driving+train", "public_transport", "walking", "coach", "bus", "train", "ferry", "driving+ferry", "cycling+ferry")]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableBorderCrossing},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PtChangeDelay},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${WalkingTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DrivingTimeToStation},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CyclingTimeToStation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ParkingTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BoardingTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RequestTransportation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Type -eq $null) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "disable_border_crossing" = ${DisableBorderCrossing}
            "pt_change_delay" = ${PtChangeDelay}
            "walking_time" = ${WalkingTime}
            "driving_time_to_station" = ${DrivingTimeToStation}
            "cycling_time_to_station" = ${CyclingTimeToStation}
            "parking_time" = ${ParkingTime}
            "boarding_time" = ${BoardingTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RequestTransportation<PSCustomObject>

.DESCRIPTION

Convert from JSON to RequestTransportation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RequestTransportation<PSCustomObject>
#>
function ConvertFrom-JsonToRequestTransportation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RequestTransportation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RequestTransportation
        $AllProperties = ("type", "disable_border_crossing", "pt_change_delay", "walking_time", "driving_time_to_station", "cycling_time_to_station", "parking_time", "boarding_time")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable_border_crossing"))) { #optional property not found
            $DisableBorderCrossing = $null
        } else {
            $DisableBorderCrossing = $JsonParameters.PSobject.Properties["disable_border_crossing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pt_change_delay"))) { #optional property not found
            $PtChangeDelay = $null
        } else {
            $PtChangeDelay = $JsonParameters.PSobject.Properties["pt_change_delay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "walking_time"))) { #optional property not found
            $WalkingTime = $null
        } else {
            $WalkingTime = $JsonParameters.PSobject.Properties["walking_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driving_time_to_station"))) { #optional property not found
            $DrivingTimeToStation = $null
        } else {
            $DrivingTimeToStation = $JsonParameters.PSobject.Properties["driving_time_to_station"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cycling_time_to_station"))) { #optional property not found
            $CyclingTimeToStation = $null
        } else {
            $CyclingTimeToStation = $JsonParameters.PSobject.Properties["cycling_time_to_station"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parking_time"))) { #optional property not found
            $ParkingTime = $null
        } else {
            $ParkingTime = $JsonParameters.PSobject.Properties["parking_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boarding_time"))) { #optional property not found
            $BoardingTime = $null
        } else {
            $BoardingTime = $JsonParameters.PSobject.Properties["boarding_time"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "disable_border_crossing" = ${DisableBorderCrossing}
            "pt_change_delay" = ${PtChangeDelay}
            "walking_time" = ${WalkingTime}
            "driving_time_to_station" = ${DrivingTimeToStation}
            "cycling_time_to_station" = ${CyclingTimeToStation}
            "parking_time" = ${ParkingTime}
            "boarding_time" = ${BoardingTime}
        }

        return $PSO
    }

}

