#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.2
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Modes
No description available.
.PARAMETER RoutePartIds
No description available.
.PARAMETER Tickets
No description available.
.OUTPUTS

ResponseFaresBreakdownItem<PSCustomObject>
#>

function Initialize-ResponseFaresBreakdownItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Modes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${RoutePartIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tickets}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseFaresBreakdownItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Modes -eq $null) {
            throw "invalid value for 'Modes', 'Modes' cannot be null."
        }

        if ($RoutePartIds -eq $null) {
            throw "invalid value for 'RoutePartIds', 'RoutePartIds' cannot be null."
        }

        if ($Tickets -eq $null) {
            throw "invalid value for 'Tickets', 'Tickets' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "modes" = ${Modes}
            "route_part_ids" = ${RoutePartIds}
            "tickets" = ${Tickets}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseFaresBreakdownItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseFaresBreakdownItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseFaresBreakdownItem<PSCustomObject>
#>
function ConvertFrom-JsonToResponseFaresBreakdownItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseFaresBreakdownItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseFaresBreakdownItem
        $AllProperties = ("modes", "route_part_ids", "tickets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'modes' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'modes' missing."
        } else {
            $Modes = $JsonParameters.PSobject.Properties["modes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route_part_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'route_part_ids' missing."
        } else {
            $RoutePartIds = $JsonParameters.PSobject.Properties["route_part_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tickets"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tickets' missing."
        } else {
            $Tickets = $JsonParameters.PSobject.Properties["tickets"].value
        }

        $PSO = [PSCustomObject]@{
            "modes" = ${Modes}
            "route_part_ids" = ${RoutePartIds}
            "tickets" = ${Tickets}
        }

        return $PSO
    }

}

