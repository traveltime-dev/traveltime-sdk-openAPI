#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.2
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Label
No description available.
.PARAMETER Score
No description available.
.PARAMETER HouseNumber
No description available.
.PARAMETER Street
No description available.
.PARAMETER Region
No description available.
.PARAMETER RegionCode
No description available.
.PARAMETER Neighbourhood
No description available.
.PARAMETER County
No description available.
.PARAMETER Macroregion
No description available.
.PARAMETER City
No description available.
.PARAMETER Country
No description available.
.PARAMETER CountryCode
No description available.
.PARAMETER Continent
No description available.
.PARAMETER Postcode
No description available.
.PARAMETER Features
No description available.
.OUTPUTS

ResponseGeocodingProperties<PSCustomObject>
#>

function Initialize-ResponseGeocodingProperties {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Score},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HouseNumber},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Street},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Region},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RegionCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Neighbourhood},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${County},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Macroregion},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryCode},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Continent},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Postcode},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Features}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseGeocodingProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Label -eq $null) {
            throw "invalid value for 'Label', 'Label' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "label" = ${Label}
            "score" = ${Score}
            "house_number" = ${HouseNumber}
            "street" = ${Street}
            "region" = ${Region}
            "region_code" = ${RegionCode}
            "neighbourhood" = ${Neighbourhood}
            "county" = ${County}
            "macroregion" = ${Macroregion}
            "city" = ${City}
            "country" = ${Country}
            "country_code" = ${CountryCode}
            "continent" = ${Continent}
            "postcode" = ${Postcode}
            "features" = ${Features}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseGeocodingProperties<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseGeocodingProperties<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseGeocodingProperties<PSCustomObject>
#>
function ConvertFrom-JsonToResponseGeocodingProperties {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseGeocodingProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseGeocodingProperties
        $AllProperties = ("name", "label", "score", "house_number", "street", "region", "region_code", "neighbourhood", "county", "macroregion", "city", "country", "country_code", "continent", "postcode", "features")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) {
            throw "Error! JSON cannot be serialized due to the required property 'label' missing."
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "score"))) { #optional property not found
            $Score = $null
        } else {
            $Score = $JsonParameters.PSobject.Properties["score"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "house_number"))) { #optional property not found
            $HouseNumber = $null
        } else {
            $HouseNumber = $JsonParameters.PSobject.Properties["house_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "street"))) { #optional property not found
            $Street = $null
        } else {
            $Street = $JsonParameters.PSobject.Properties["street"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region_code"))) { #optional property not found
            $RegionCode = $null
        } else {
            $RegionCode = $JsonParameters.PSobject.Properties["region_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "neighbourhood"))) { #optional property not found
            $Neighbourhood = $null
        } else {
            $Neighbourhood = $JsonParameters.PSobject.Properties["neighbourhood"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "county"))) { #optional property not found
            $County = $null
        } else {
            $County = $JsonParameters.PSobject.Properties["county"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "macroregion"))) { #optional property not found
            $Macroregion = $null
        } else {
            $Macroregion = $JsonParameters.PSobject.Properties["macroregion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country_code"))) { #optional property not found
            $CountryCode = $null
        } else {
            $CountryCode = $JsonParameters.PSobject.Properties["country_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "continent"))) { #optional property not found
            $Continent = $null
        } else {
            $Continent = $JsonParameters.PSobject.Properties["continent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postcode"))) { #optional property not found
            $Postcode = $null
        } else {
            $Postcode = $JsonParameters.PSobject.Properties["postcode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "features"))) { #optional property not found
            $Features = $null
        } else {
            $Features = $JsonParameters.PSobject.Properties["features"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "label" = ${Label}
            "score" = ${Score}
            "house_number" = ${HouseNumber}
            "street" = ${Street}
            "region" = ${Region}
            "region_code" = ${RegionCode}
            "neighbourhood" = ${Neighbourhood}
            "county" = ${County}
            "macroregion" = ${Macroregion}
            "city" = ${City}
            "country" = ${Country}
            "country_code" = ${CountryCode}
            "continent" = ${Continent}
            "postcode" = ${Postcode}
            "features" = ${Features}
        }

        return $PSO
    }

}

