#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.2
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PublicTransport
No description available.
.PARAMETER Fares
No description available.
.PARAMETER Postcodes
No description available.
.OUTPUTS

ResponseMapInfoFeatures<PSCustomObject>
#>

function Initialize-ResponseMapInfoFeatures {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PublicTransport},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Fares},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Postcodes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseMapInfoFeatures' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Fares -eq $null) {
            throw "invalid value for 'Fares', 'Fares' cannot be null."
        }

        if ($Postcodes -eq $null) {
            throw "invalid value for 'Postcodes', 'Postcodes' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "public_transport" = ${PublicTransport}
            "fares" = ${Fares}
            "postcodes" = ${Postcodes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseMapInfoFeatures<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseMapInfoFeatures<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseMapInfoFeatures<PSCustomObject>
#>
function ConvertFrom-JsonToResponseMapInfoFeatures {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseMapInfoFeatures' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseMapInfoFeatures
        $AllProperties = ("public_transport", "fares", "postcodes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'fares' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fares"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fares' missing."
        } else {
            $Fares = $JsonParameters.PSobject.Properties["fares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postcodes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'postcodes' missing."
        } else {
            $Postcodes = $JsonParameters.PSobject.Properties["postcodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "public_transport"))) { #optional property not found
            $PublicTransport = $null
        } else {
            $PublicTransport = $JsonParameters.PSobject.Properties["public_transport"].value
        }

        $PSO = [PSCustomObject]@{
            "public_transport" = ${PublicTransport}
            "fares" = ${Fares}
            "postcodes" = ${Postcodes}
        }

        return $PSO
    }

}

