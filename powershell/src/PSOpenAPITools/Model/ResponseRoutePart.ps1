#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.3
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Type
No description available.
.PARAMETER Mode
No description available.
.PARAMETER Directions
No description available.
.PARAMETER Distance
No description available.
.PARAMETER TravelTime
No description available.
.PARAMETER Coords
No description available.
.PARAMETER Direction
No description available.
.PARAMETER Road
No description available.
.PARAMETER Turn
No description available.
.PARAMETER Line
No description available.
.PARAMETER DepartureStation
No description available.
.PARAMETER ArrivalStation
No description available.
.PARAMETER DepartsAt
No description available.
.PARAMETER ArrivesAt
No description available.
.PARAMETER NumStops
No description available.
.OUTPUTS

ResponseRoutePart<PSCustomObject>
#>

function Initialize-ResponseRoutePart {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("basic", "start_end", "road", "public_transport")]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Mode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Directions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Distance},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TravelTime},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Coords},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Direction},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Road},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Turn},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Line},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DepartureStation},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrivalStation},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DepartsAt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArrivesAt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumStops}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseRoutePart' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($Type -eq $null) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($Mode -eq $null) {
            throw "invalid value for 'Mode', 'Mode' cannot be null."
        }

        if ($Directions -eq $null) {
            throw "invalid value for 'Directions', 'Directions' cannot be null."
        }

        if ($Distance -eq $null) {
            throw "invalid value for 'Distance', 'Distance' cannot be null."
        }

        if ($TravelTime -eq $null) {
            throw "invalid value for 'TravelTime', 'TravelTime' cannot be null."
        }

        if ($Coords -eq $null) {
            throw "invalid value for 'Coords', 'Coords' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "mode" = ${Mode}
            "directions" = ${Directions}
            "distance" = ${Distance}
            "travel_time" = ${TravelTime}
            "coords" = ${Coords}
            "direction" = ${Direction}
            "road" = ${Road}
            "turn" = ${Turn}
            "line" = ${Line}
            "departure_station" = ${DepartureStation}
            "arrival_station" = ${ArrivalStation}
            "departs_at" = ${DepartsAt}
            "arrives_at" = ${ArrivesAt}
            "num_stops" = ${NumStops}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseRoutePart<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseRoutePart<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseRoutePart<PSCustomObject>
#>
function ConvertFrom-JsonToResponseRoutePart {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseRoutePart' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseRoutePart
        $AllProperties = ("id", "type", "mode", "directions", "distance", "travel_time", "coords", "direction", "road", "turn", "line", "departure_station", "arrival_station", "departs_at", "arrives_at", "num_stops")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mode' missing."
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "directions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'directions' missing."
        } else {
            $Directions = $JsonParameters.PSobject.Properties["directions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "distance"))) {
            throw "Error! JSON cannot be serialized due to the required property 'distance' missing."
        } else {
            $Distance = $JsonParameters.PSobject.Properties["distance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "travel_time"))) {
            throw "Error! JSON cannot be serialized due to the required property 'travel_time' missing."
        } else {
            $TravelTime = $JsonParameters.PSobject.Properties["travel_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "coords"))) {
            throw "Error! JSON cannot be serialized due to the required property 'coords' missing."
        } else {
            $Coords = $JsonParameters.PSobject.Properties["coords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "road"))) { #optional property not found
            $Road = $null
        } else {
            $Road = $JsonParameters.PSobject.Properties["road"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "turn"))) { #optional property not found
            $Turn = $null
        } else {
            $Turn = $JsonParameters.PSobject.Properties["turn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "line"))) { #optional property not found
            $Line = $null
        } else {
            $Line = $JsonParameters.PSobject.Properties["line"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "departure_station"))) { #optional property not found
            $DepartureStation = $null
        } else {
            $DepartureStation = $JsonParameters.PSobject.Properties["departure_station"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrival_station"))) { #optional property not found
            $ArrivalStation = $null
        } else {
            $ArrivalStation = $JsonParameters.PSobject.Properties["arrival_station"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "departs_at"))) { #optional property not found
            $DepartsAt = $null
        } else {
            $DepartsAt = $JsonParameters.PSobject.Properties["departs_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arrives_at"))) { #optional property not found
            $ArrivesAt = $null
        } else {
            $ArrivesAt = $JsonParameters.PSobject.Properties["arrives_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_stops"))) { #optional property not found
            $NumStops = $null
        } else {
            $NumStops = $JsonParameters.PSobject.Properties["num_stops"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "mode" = ${Mode}
            "directions" = ${Directions}
            "distance" = ${Distance}
            "travel_time" = ${TravelTime}
            "coords" = ${Coords}
            "direction" = ${Direction}
            "road" = ${Road}
            "turn" = ${Turn}
            "line" = ${Line}
            "departure_station" = ${DepartureStation}
            "arrival_station" = ${ArrivalStation}
            "departs_at" = ${DepartsAt}
            "arrives_at" = ${ArrivesAt}
            "num_stops" = ${NumStops}
        }

        return $PSO
    }

}

