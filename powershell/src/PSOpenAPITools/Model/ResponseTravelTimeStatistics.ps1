#
# TravelTime API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.2.2
# Contact: support@igeolise.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Min
No description available.
.PARAMETER Max
No description available.
.PARAMETER Mean
No description available.
.PARAMETER Median
No description available.
.OUTPUTS

ResponseTravelTimeStatistics<PSCustomObject>
#>

function Initialize-ResponseTravelTimeStatistics {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Min},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Max},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Mean},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Median}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseTravelTimeStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Min -eq $null) {
            throw "invalid value for 'Min', 'Min' cannot be null."
        }

        if ($Max -eq $null) {
            throw "invalid value for 'Max', 'Max' cannot be null."
        }

        if ($Mean -eq $null) {
            throw "invalid value for 'Mean', 'Mean' cannot be null."
        }

        if ($Median -eq $null) {
            throw "invalid value for 'Median', 'Median' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "min" = ${Min}
            "max" = ${Max}
            "mean" = ${Mean}
            "median" = ${Median}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseTravelTimeStatistics<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseTravelTimeStatistics<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseTravelTimeStatistics<PSCustomObject>
#>
function ConvertFrom-JsonToResponseTravelTimeStatistics {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseTravelTimeStatistics' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseTravelTimeStatistics
        $AllProperties = ("min", "max", "mean", "median")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'min' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "min"))) {
            throw "Error! JSON cannot be serialized due to the required property 'min' missing."
        } else {
            $Min = $JsonParameters.PSobject.Properties["min"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max"))) {
            throw "Error! JSON cannot be serialized due to the required property 'max' missing."
        } else {
            $Max = $JsonParameters.PSobject.Properties["max"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mean"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mean' missing."
        } else {
            $Mean = $JsonParameters.PSobject.Properties["mean"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "median"))) {
            throw "Error! JSON cannot be serialized due to the required property 'median' missing."
        } else {
            $Median = $JsonParameters.PSobject.Properties["median"].value
        }

        $PSO = [PSCustomObject]@{
            "min" = ${Min}
            "max" = ${Max}
            "mean" = ${Mean}
            "median" = ${Median}
        }

        return $PSO
    }

}

