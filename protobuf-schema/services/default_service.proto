/*
  TravelTime API
 
  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 
  The version of the OpenAPI document: 1.2.3
  Contact: support@igeolise.com
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/request_routes.proto";
import public "models/request_supported_locations.proto";
import public "models/request_time_filter.proto";
import public "models/request_time_filter_fast.proto";
import public "models/request_time_filter_postcode_districts.proto";
import public "models/request_time_filter_postcode_sectors.proto";
import public "models/request_time_filter_postcodes.proto";
import public "models/request_time_map.proto";
import public "models/response_error.proto";
import public "models/response_geocoding.proto";
import public "models/response_map_info.proto";
import public "models/response_routes.proto";
import public "models/response_supported_locations.proto";
import public "models/response_time_filter.proto";
import public "models/response_time_filter_fast.proto";
import public "models/response_time_filter_postcode_districts.proto";
import public "models/response_time_filter_postcode_sectors.proto";
import public "models/response_time_filter_postcodes.proto";
import public "models/response_time_map.proto";

service DefaultService {
  rpc GeocodingReverseSearch (GeocodingReverseSearchRequest) returns (ResponseGeocoding);

  rpc GeocodingSearch (GeocodingSearchRequest) returns (ResponseGeocoding);

  rpc MapInfo (google.protobuf.Empty) returns (ResponseMapInfo);

  rpc Routes (RoutesRequest) returns (ResponseRoutes);

  rpc SupportedLocations (SupportedLocationsRequest) returns (ResponseSupportedLocations);

  rpc TimeFilter (TimeFilterRequest) returns (ResponseTimeFilter);

  rpc TimeFilterFast (TimeFilterFastRequest) returns (ResponseTimeFilterFast);

  rpc TimeFilterPostcodeDistricts (TimeFilterPostcodeDistrictsRequest) returns (ResponseTimeFilterPostcodeDistricts);

  rpc TimeFilterPostcodeSectors (TimeFilterPostcodeSectorsRequest) returns (ResponseTimeFilterPostcodeSectors);

  rpc TimeFilterPostcodes (TimeFilterPostcodesRequest) returns (ResponseTimeFilterPostcodes);

  rpc TimeMap (TimeMapRequest) returns (ResponseTimeMap);

}

message GeocodingReverseSearchRequest {
  double lat = 1;
  double lng = 2;
  string withinPeriodcountry = 3;

}

message GeocodingSearchRequest {
  string query = 1;
  double focusPeriodlat = 2;
  double focusPeriodlng = 3;
  string withinPeriodcountry = 4;

}

message RoutesRequest {
  RequestRoutes requestRoutes = 1;

}

message SupportedLocationsRequest {
  RequestSupportedLocations requestSupportedLocations = 1;

}

message TimeFilterRequest {
  RequestTimeFilter requestTimeFilter = 1;

}

message TimeFilterFastRequest {
  RequestTimeFilterFast requestTimeFilterFast = 1;

}

message TimeFilterPostcodeDistrictsRequest {
  RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts = 1;

}

message TimeFilterPostcodeSectorsRequest {
  RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors = 1;

}

message TimeFilterPostcodesRequest {
  RequestTimeFilterPostcodes requestTimeFilterPostcodes = 1;

}

message TimeMapRequest {
  RequestTimeMap requestTimeMap = 1;

}

