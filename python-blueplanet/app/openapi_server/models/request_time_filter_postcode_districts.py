# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from app.openapi_server.models.request_time_filter_postcode_districts_arrival_search import RequestTimeFilterPostcodeDistrictsArrivalSearch  # noqa: F401,E501
from app.openapi_server.models.request_time_filter_postcode_districts_departure_search import RequestTimeFilterPostcodeDistrictsDepartureSearch  # noqa: F401,E501
from openapi_server import util


class RequestTimeFilterPostcodeDistricts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, departure_searches: List[RequestTimeFilterPostcodeDistrictsDepartureSearch]=None, arrival_searches: List[RequestTimeFilterPostcodeDistrictsArrivalSearch]=None):  # noqa: E501
        """RequestTimeFilterPostcodeDistricts - a model defined in Swagger

        :param departure_searches: The departure_searches of this RequestTimeFilterPostcodeDistricts.  # noqa: E501
        :type departure_searches: List[RequestTimeFilterPostcodeDistrictsDepartureSearch]
        :param arrival_searches: The arrival_searches of this RequestTimeFilterPostcodeDistricts.  # noqa: E501
        :type arrival_searches: List[RequestTimeFilterPostcodeDistrictsArrivalSearch]
        """
        self.swagger_types = {
            'departure_searches': List[RequestTimeFilterPostcodeDistrictsDepartureSearch],
            'arrival_searches': List[RequestTimeFilterPostcodeDistrictsArrivalSearch]
        }

        self.attribute_map = {
            'departure_searches': 'departure_searches',
            'arrival_searches': 'arrival_searches'
        }

        self._departure_searches = departure_searches
        self._arrival_searches = arrival_searches

    @classmethod
    def from_dict(cls, dikt) -> 'RequestTimeFilterPostcodeDistricts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestTimeFilterPostcodeDistricts of this RequestTimeFilterPostcodeDistricts.  # noqa: E501
        :rtype: RequestTimeFilterPostcodeDistricts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def departure_searches(self) -> List[RequestTimeFilterPostcodeDistrictsDepartureSearch]:
        """Gets the departure_searches of this RequestTimeFilterPostcodeDistricts.


        :return: The departure_searches of this RequestTimeFilterPostcodeDistricts.
        :rtype: List[RequestTimeFilterPostcodeDistrictsDepartureSearch]
        """
        return self._departure_searches

    @departure_searches.setter
    def departure_searches(self, departure_searches: List[RequestTimeFilterPostcodeDistrictsDepartureSearch]):
        """Sets the departure_searches of this RequestTimeFilterPostcodeDistricts.


        :param departure_searches: The departure_searches of this RequestTimeFilterPostcodeDistricts.
        :type departure_searches: List[RequestTimeFilterPostcodeDistrictsDepartureSearch]
        """
        if departure_searches is not None and len(departure_searches) > 10:
            raise ValueError("Invalid value for `departure_searches`, number of items must be less than or equal to `10`")  # noqa: E501

        self._departure_searches = departure_searches

    @property
    def arrival_searches(self) -> List[RequestTimeFilterPostcodeDistrictsArrivalSearch]:
        """Gets the arrival_searches of this RequestTimeFilterPostcodeDistricts.


        :return: The arrival_searches of this RequestTimeFilterPostcodeDistricts.
        :rtype: List[RequestTimeFilterPostcodeDistrictsArrivalSearch]
        """
        return self._arrival_searches

    @arrival_searches.setter
    def arrival_searches(self, arrival_searches: List[RequestTimeFilterPostcodeDistrictsArrivalSearch]):
        """Sets the arrival_searches of this RequestTimeFilterPostcodeDistricts.


        :param arrival_searches: The arrival_searches of this RequestTimeFilterPostcodeDistricts.
        :type arrival_searches: List[RequestTimeFilterPostcodeDistrictsArrivalSearch]
        """
        if arrival_searches is not None and len(arrival_searches) > 10:
            raise ValueError("Invalid value for `arrival_searches`, number of items must be less than or equal to `10`")  # noqa: E501

        self._arrival_searches = arrival_searches
