"""
    TravelTime API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Contact: support@igeolise.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.request_routes import RequestRoutes
from openapi_client.model.request_supported_locations import RequestSupportedLocations
from openapi_client.model.request_time_filter import RequestTimeFilter
from openapi_client.model.request_time_filter_fast import RequestTimeFilterFast
from openapi_client.model.request_time_filter_postcode_districts import RequestTimeFilterPostcodeDistricts
from openapi_client.model.request_time_filter_postcode_sectors import RequestTimeFilterPostcodeSectors
from openapi_client.model.request_time_filter_postcodes import RequestTimeFilterPostcodes
from openapi_client.model.request_time_map import RequestTimeMap
from openapi_client.model.response_error import ResponseError
from openapi_client.model.response_geocoding import ResponseGeocoding
from openapi_client.model.response_map_info import ResponseMapInfo
from openapi_client.model.response_routes import ResponseRoutes
from openapi_client.model.response_supported_locations import ResponseSupportedLocations
from openapi_client.model.response_time_filter import ResponseTimeFilter
from openapi_client.model.response_time_filter_fast import ResponseTimeFilterFast
from openapi_client.model.response_time_filter_postcode_districts import ResponseTimeFilterPostcodeDistricts
from openapi_client.model.response_time_filter_postcode_sectors import ResponseTimeFilterPostcodeSectors
from openapi_client.model.response_time_filter_postcodes import ResponseTimeFilterPostcodes
from openapi_client.model.response_time_map import ResponseTimeMap


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __geocoding_reverse_search(
            self,
            lat,
            lng,
            **kwargs
        ):
            """geocoding_reverse_search  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.geocoding_reverse_search(lat, lng, async_req=True)
            >>> result = thread.get()

            Args:
                lat (float):
                lng (float):

            Keyword Args:
                within_country (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseGeocoding
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat'] = \
                lat
            kwargs['lng'] = \
                lng
            return self.call_with_http_info(**kwargs)

        self.geocoding_reverse_search = _Endpoint(
            settings={
                'response_type': (ResponseGeocoding,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/geocoding/reverse',
                'operation_id': 'geocoding_reverse_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat',
                    'lng',
                    'within_country',
                ],
                'required': [
                    'lat',
                    'lng',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat':
                        (float,),
                    'lng':
                        (float,),
                    'within_country':
                        (str,),
                },
                'attribute_map': {
                    'lat': 'lat',
                    'lng': 'lng',
                    'within_country': 'within.country',
                },
                'location_map': {
                    'lat': 'query',
                    'lng': 'query',
                    'within_country': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__geocoding_reverse_search
        )

        def __geocoding_search(
            self,
            query,
            **kwargs
        ):
            """geocoding_search  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.geocoding_search(query, async_req=True)
            >>> result = thread.get()

            Args:
                query (str):

            Keyword Args:
                focus_lat (float): [optional]
                focus_lng (float): [optional]
                within_country (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseGeocoding
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['query'] = \
                query
            return self.call_with_http_info(**kwargs)

        self.geocoding_search = _Endpoint(
            settings={
                'response_type': (ResponseGeocoding,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/geocoding/search',
                'operation_id': 'geocoding_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'focus_lat',
                    'focus_lng',
                    'within_country',
                ],
                'required': [
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'focus_lat':
                        (float,),
                    'focus_lng':
                        (float,),
                    'within_country':
                        (str,),
                },
                'attribute_map': {
                    'query': 'query',
                    'focus_lat': 'focus.lat',
                    'focus_lng': 'focus.lng',
                    'within_country': 'within.country',
                },
                'location_map': {
                    'query': 'query',
                    'focus_lat': 'query',
                    'focus_lng': 'query',
                    'within_country': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__geocoding_search
        )

        def __map_info(
            self,
            **kwargs
        ):
            """map_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.map_info(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseMapInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.map_info = _Endpoint(
            settings={
                'response_type': (ResponseMapInfo,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/map-info',
                'operation_id': 'map_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__map_info
        )

        def __routes(
            self,
            request_routes,
            **kwargs
        ):
            """routes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.routes(request_routes, async_req=True)
            >>> result = thread.get()

            Args:
                request_routes (RequestRoutes):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseRoutes
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_routes'] = \
                request_routes
            return self.call_with_http_info(**kwargs)

        self.routes = _Endpoint(
            settings={
                'response_type': (ResponseRoutes,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/routes',
                'operation_id': 'routes',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_routes',
                ],
                'required': [
                    'request_routes',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_routes':
                        (RequestRoutes,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_routes': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__routes
        )

        def __supported_locations(
            self,
            request_supported_locations,
            **kwargs
        ):
            """supported_locations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.supported_locations(request_supported_locations, async_req=True)
            >>> result = thread.get()

            Args:
                request_supported_locations (RequestSupportedLocations):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseSupportedLocations
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_supported_locations'] = \
                request_supported_locations
            return self.call_with_http_info(**kwargs)

        self.supported_locations = _Endpoint(
            settings={
                'response_type': (ResponseSupportedLocations,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/supported-locations',
                'operation_id': 'supported_locations',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_supported_locations',
                ],
                'required': [
                    'request_supported_locations',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_supported_locations':
                        (RequestSupportedLocations,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_supported_locations': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__supported_locations
        )

        def __time_filter(
            self,
            request_time_filter,
            **kwargs
        ):
            """time_filter  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_filter(request_time_filter, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_filter (RequestTimeFilter):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeFilter
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_filter'] = \
                request_time_filter
            return self.call_with_http_info(**kwargs)

        self.time_filter = _Endpoint(
            settings={
                'response_type': (ResponseTimeFilter,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-filter',
                'operation_id': 'time_filter',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_filter',
                ],
                'required': [
                    'request_time_filter',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_filter':
                        (RequestTimeFilter,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_filter': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_filter
        )

        def __time_filter_fast(
            self,
            request_time_filter_fast,
            **kwargs
        ):
            """time_filter_fast  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_filter_fast(request_time_filter_fast, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_filter_fast (RequestTimeFilterFast):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeFilterFast
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_filter_fast'] = \
                request_time_filter_fast
            return self.call_with_http_info(**kwargs)

        self.time_filter_fast = _Endpoint(
            settings={
                'response_type': (ResponseTimeFilterFast,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-filter/fast',
                'operation_id': 'time_filter_fast',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_filter_fast',
                ],
                'required': [
                    'request_time_filter_fast',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_filter_fast':
                        (RequestTimeFilterFast,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_filter_fast': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_filter_fast
        )

        def __time_filter_postcode_districts(
            self,
            request_time_filter_postcode_districts,
            **kwargs
        ):
            """time_filter_postcode_districts  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_filter_postcode_districts(request_time_filter_postcode_districts, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_filter_postcode_districts (RequestTimeFilterPostcodeDistricts):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeFilterPostcodeDistricts
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_filter_postcode_districts'] = \
                request_time_filter_postcode_districts
            return self.call_with_http_info(**kwargs)

        self.time_filter_postcode_districts = _Endpoint(
            settings={
                'response_type': (ResponseTimeFilterPostcodeDistricts,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-filter/postcode-districts',
                'operation_id': 'time_filter_postcode_districts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_filter_postcode_districts',
                ],
                'required': [
                    'request_time_filter_postcode_districts',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_filter_postcode_districts':
                        (RequestTimeFilterPostcodeDistricts,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_filter_postcode_districts': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_filter_postcode_districts
        )

        def __time_filter_postcode_sectors(
            self,
            request_time_filter_postcode_sectors,
            **kwargs
        ):
            """time_filter_postcode_sectors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_filter_postcode_sectors(request_time_filter_postcode_sectors, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_filter_postcode_sectors (RequestTimeFilterPostcodeSectors):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeFilterPostcodeSectors
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_filter_postcode_sectors'] = \
                request_time_filter_postcode_sectors
            return self.call_with_http_info(**kwargs)

        self.time_filter_postcode_sectors = _Endpoint(
            settings={
                'response_type': (ResponseTimeFilterPostcodeSectors,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-filter/postcode-sectors',
                'operation_id': 'time_filter_postcode_sectors',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_filter_postcode_sectors',
                ],
                'required': [
                    'request_time_filter_postcode_sectors',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_filter_postcode_sectors':
                        (RequestTimeFilterPostcodeSectors,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_filter_postcode_sectors': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_filter_postcode_sectors
        )

        def __time_filter_postcodes(
            self,
            request_time_filter_postcodes,
            **kwargs
        ):
            """time_filter_postcodes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_filter_postcodes(request_time_filter_postcodes, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_filter_postcodes (RequestTimeFilterPostcodes):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeFilterPostcodes
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_filter_postcodes'] = \
                request_time_filter_postcodes
            return self.call_with_http_info(**kwargs)

        self.time_filter_postcodes = _Endpoint(
            settings={
                'response_type': (ResponseTimeFilterPostcodes,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-filter/postcodes',
                'operation_id': 'time_filter_postcodes',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_filter_postcodes',
                ],
                'required': [
                    'request_time_filter_postcodes',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_filter_postcodes':
                        (RequestTimeFilterPostcodes,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_filter_postcodes': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_filter_postcodes
        )

        def __time_map(
            self,
            request_time_map,
            **kwargs
        ):
            """time_map  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.time_map(request_time_map, async_req=True)
            >>> result = thread.get()

            Args:
                request_time_map (RequestTimeMap):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponseTimeMap
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['request_time_map'] = \
                request_time_map
            return self.call_with_http_info(**kwargs)

        self.time_map = _Endpoint(
            settings={
                'response_type': (ResponseTimeMap,),
                'auth': [
                    'ApiKey',
                    'ApplicationId'
                ],
                'endpoint_path': '/v4/time-map',
                'operation_id': 'time_map',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_time_map',
                ],
                'required': [
                    'request_time_map',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_time_map':
                        (RequestTimeMap,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_time_map': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/vnd.wkt+json',
                    'application/vnd.wkt-no-holes+json',
                    'application/vnd.bounding-boxes+json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__time_map
        )
