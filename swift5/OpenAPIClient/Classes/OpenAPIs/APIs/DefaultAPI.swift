//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DefaultAPI {
    /**

     - parameter lat: (query)  
     - parameter lng: (query)  
     - parameter withinCountry: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geocodingReverseSearch(lat: Double, lng: Double, withinCountry: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseGeocoding?, _ error: Error?) -> Void)) {
        geocodingReverseSearchWithRequestBuilder(lat: lat, lng: lng, withinCountry: withinCountry).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v4/geocoding/reverse
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/geocoding-reverse
}
     - parameter lat: (query)  
     - parameter lng: (query)  
     - parameter withinCountry: (query)  (optional)
     - returns: RequestBuilder<ResponseGeocoding> 
     */
    open class func geocodingReverseSearchWithRequestBuilder(lat: Double, lng: Double, withinCountry: String? = nil) -> RequestBuilder<ResponseGeocoding> {
        let path = "/v4/geocoding/reverse"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "lat": lat.encodeToJSON(),
            "lng": lng.encodeToJSON(),
            "within.country": withinCountry?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseGeocoding>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter query: (query)  
     - parameter focusLat: (query)  (optional)
     - parameter focusLng: (query)  (optional)
     - parameter withinCountry: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geocodingSearch(query: String, focusLat: Double? = nil, focusLng: Double? = nil, withinCountry: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseGeocoding?, _ error: Error?) -> Void)) {
        geocodingSearchWithRequestBuilder(query: query, focusLat: focusLat, focusLng: focusLng, withinCountry: withinCountry).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v4/geocoding/search
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/geocoding-search
}
     - parameter query: (query)  
     - parameter focusLat: (query)  (optional)
     - parameter focusLng: (query)  (optional)
     - parameter withinCountry: (query)  (optional)
     - returns: RequestBuilder<ResponseGeocoding> 
     */
    open class func geocodingSearchWithRequestBuilder(query: String, focusLat: Double? = nil, focusLng: Double? = nil, withinCountry: String? = nil) -> RequestBuilder<ResponseGeocoding> {
        let path = "/v4/geocoding/search"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "focus.lat": focusLat?.encodeToJSON(),
            "focus.lng": focusLng?.encodeToJSON(),
            "within.country": withinCountry?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseGeocoding>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mapInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseMapInfo?, _ error: Error?) -> Void)) {
        mapInfoWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v4/map-info
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/map-info
}
     - returns: RequestBuilder<ResponseMapInfo> 
     */
    open class func mapInfoWithRequestBuilder() -> RequestBuilder<ResponseMapInfo> {
        let path = "/v4/map-info"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseMapInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestRoutes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func routes(requestRoutes: RequestRoutes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseRoutes?, _ error: Error?) -> Void)) {
        routesWithRequestBuilder(requestRoutes: requestRoutes).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/routes
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/routes
}
     - parameter requestRoutes: (body)  
     - returns: RequestBuilder<ResponseRoutes> 
     */
    open class func routesWithRequestBuilder(requestRoutes: RequestRoutes) -> RequestBuilder<ResponseRoutes> {
        let path = "/v4/routes"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestRoutes)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseRoutes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestSupportedLocations: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func supportedLocations(requestSupportedLocations: RequestSupportedLocations, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseSupportedLocations?, _ error: Error?) -> Void)) {
        supportedLocationsWithRequestBuilder(requestSupportedLocations: requestSupportedLocations).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/supported-locations
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/supported-locations
}
     - parameter requestSupportedLocations: (body)  
     - returns: RequestBuilder<ResponseSupportedLocations> 
     */
    open class func supportedLocationsWithRequestBuilder(requestSupportedLocations: RequestSupportedLocations) -> RequestBuilder<ResponseSupportedLocations> {
        let path = "/v4/supported-locations"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestSupportedLocations)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseSupportedLocations>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeFilter: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeFilter(requestTimeFilter: RequestTimeFilter, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeFilter?, _ error: Error?) -> Void)) {
        timeFilterWithRequestBuilder(requestTimeFilter: requestTimeFilter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-filter
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/time-filter
}
     - parameter requestTimeFilter: (body)  
     - returns: RequestBuilder<ResponseTimeFilter> 
     */
    open class func timeFilterWithRequestBuilder(requestTimeFilter: RequestTimeFilter) -> RequestBuilder<ResponseTimeFilter> {
        let path = "/v4/time-filter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeFilter)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeFilter>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeFilterFast: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeFilterFast?, _ error: Error?) -> Void)) {
        timeFilterFastWithRequestBuilder(requestTimeFilterFast: requestTimeFilterFast).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-filter/fast
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/time-filter-fast
}
     - parameter requestTimeFilterFast: (body)  
     - returns: RequestBuilder<ResponseTimeFilterFast> 
     */
    open class func timeFilterFastWithRequestBuilder(requestTimeFilterFast: RequestTimeFilterFast) -> RequestBuilder<ResponseTimeFilterFast> {
        let path = "/v4/time-filter/fast"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeFilterFast)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeFilterFast>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeFilterPostcodeDistricts: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeFilterPostcodeDistricts?, _ error: Error?) -> Void)) {
        timeFilterPostcodeDistrictsWithRequestBuilder(requestTimeFilterPostcodeDistricts: requestTimeFilterPostcodeDistricts).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-filter/postcode-districts
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/postcode-search
}
     - parameter requestTimeFilterPostcodeDistricts: (body)  
     - returns: RequestBuilder<ResponseTimeFilterPostcodeDistricts> 
     */
    open class func timeFilterPostcodeDistrictsWithRequestBuilder(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts) -> RequestBuilder<ResponseTimeFilterPostcodeDistricts> {
        let path = "/v4/time-filter/postcode-districts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeFilterPostcodeDistricts)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeFilterPostcodeDistricts>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeFilterPostcodeSectors: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeFilterPostcodeSectors?, _ error: Error?) -> Void)) {
        timeFilterPostcodeSectorsWithRequestBuilder(requestTimeFilterPostcodeSectors: requestTimeFilterPostcodeSectors).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-filter/postcode-sectors
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/postcode-sector-filter
}
     - parameter requestTimeFilterPostcodeSectors: (body)  
     - returns: RequestBuilder<ResponseTimeFilterPostcodeSectors> 
     */
    open class func timeFilterPostcodeSectorsWithRequestBuilder(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors) -> RequestBuilder<ResponseTimeFilterPostcodeSectors> {
        let path = "/v4/time-filter/postcode-sectors"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeFilterPostcodeSectors)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeFilterPostcodeSectors>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeFilterPostcodes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeFilterPostcodes?, _ error: Error?) -> Void)) {
        timeFilterPostcodesWithRequestBuilder(requestTimeFilterPostcodes: requestTimeFilterPostcodes).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-filter/postcodes
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/postcode-search
}
     - parameter requestTimeFilterPostcodes: (body)  
     - returns: RequestBuilder<ResponseTimeFilterPostcodes> 
     */
    open class func timeFilterPostcodesWithRequestBuilder(requestTimeFilterPostcodes: RequestTimeFilterPostcodes) -> RequestBuilder<ResponseTimeFilterPostcodes> {
        let path = "/v4/time-filter/postcodes"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeFilterPostcodes)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeFilterPostcodes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter requestTimeMap: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timeMap(requestTimeMap: RequestTimeMap, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseTimeMap?, _ error: Error?) -> Void)) {
        timeMapWithRequestBuilder(requestTimeMap: requestTimeMap).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v4/time-map
     - API Key:
       - type: apiKey X-Api-Key 
       - name: ApiKey
     - API Key:
       - type: apiKey X-Application-Id 
       - name: ApplicationId
     - externalDocs: class ExternalDocumentation {
    description: null
    url: http://docs.traveltime.com/reference/time-map
}
     - parameter requestTimeMap: (body)  
     - returns: RequestBuilder<ResponseTimeMap> 
     */
    open class func timeMapWithRequestBuilder(requestTimeMap: RequestTimeMap) -> RequestBuilder<ResponseTimeMap> {
        let path = "/v4/time-map"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestTimeMap)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseTimeMap>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
