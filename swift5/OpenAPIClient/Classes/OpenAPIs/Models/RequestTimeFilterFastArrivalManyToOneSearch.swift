//
// RequestTimeFilterFastArrivalManyToOneSearch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct RequestTimeFilterFastArrivalManyToOneSearch: Codable, Hashable {

    public var id: String
    public var arrivalLocationId: String
    public var departureLocationIds: [String]
    public var transportation: RequestTransportationFast
    public var travelTime: Int
    public var arrivalTimePeriod: RequestArrivalTimePeriod
    public var properties: [RequestTimeFilterFastProperty]

    public init(id: String, arrivalLocationId: String, departureLocationIds: [String], transportation: RequestTransportationFast, travelTime: Int, arrivalTimePeriod: RequestArrivalTimePeriod, properties: [RequestTimeFilterFastProperty]) {
        self.id = id
        self.arrivalLocationId = arrivalLocationId
        self.departureLocationIds = departureLocationIds
        self.transportation = transportation
        self.travelTime = travelTime
        self.arrivalTimePeriod = arrivalTimePeriod
        self.properties = properties
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case arrivalLocationId = "arrival_location_id"
        case departureLocationIds = "departure_location_ids"
        case transportation
        case travelTime = "travel_time"
        case arrivalTimePeriod = "arrival_time_period"
        case properties
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(arrivalLocationId, forKey: .arrivalLocationId)
        try container.encode(departureLocationIds, forKey: .departureLocationIds)
        try container.encode(transportation, forKey: .transportation)
        try container.encode(travelTime, forKey: .travelTime)
        try container.encode(arrivalTimePeriod, forKey: .arrivalTimePeriod)
        try container.encode(properties, forKey: .properties)
    }



}
