//
// RequestTimeMapArrivalSearch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RequestTimeMapArrivalSearch: Codable, Hashable {

    public var id: String
    public var coords: Coords
    public var transportation: RequestTransportation
    public var travelTime: Int
    public var arrivalTime: Date
    public var properties: [RequestTimeMapProperty]?
    public var range: RequestRangeNoMaxResults?
    public var levelOfDetail: RequestLevelOfDetail?

    public init(id: String, coords: Coords, transportation: RequestTransportation, travelTime: Int, arrivalTime: Date, properties: [RequestTimeMapProperty]? = nil, range: RequestRangeNoMaxResults? = nil, levelOfDetail: RequestLevelOfDetail? = nil) {
        self.id = id
        self.coords = coords
        self.transportation = transportation
        self.travelTime = travelTime
        self.arrivalTime = arrivalTime
        self.properties = properties
        self.range = range
        self.levelOfDetail = levelOfDetail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case coords
        case transportation
        case travelTime = "travel_time"
        case arrivalTime = "arrival_time"
        case properties
        case range
        case levelOfDetail = "level_of_detail"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(coords, forKey: .coords)
        try container.encode(transportation, forKey: .transportation)
        try container.encode(travelTime, forKey: .travelTime)
        try container.encode(arrivalTime, forKey: .arrivalTime)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(range, forKey: .range)
        try container.encodeIfPresent(levelOfDetail, forKey: .levelOfDetail)
    }
}
