//
// ResponseGeocodingProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ResponseGeocodingProperties: Codable, Hashable {

    public var name: String
    public var label: String
    public var score: Double?
    public var houseNumber: String?
    public var street: String?
    public var region: String?
    public var regionCode: String?
    public var neighbourhood: String?
    public var county: String?
    public var macroregion: String?
    public var city: String?
    public var country: String?
    public var countryCode: String?
    public var continent: String?
    public var postcode: String?
    public var features: ResponseMapInfoFeatures?

    public init(name: String, label: String, score: Double? = nil, houseNumber: String? = nil, street: String? = nil, region: String? = nil, regionCode: String? = nil, neighbourhood: String? = nil, county: String? = nil, macroregion: String? = nil, city: String? = nil, country: String? = nil, countryCode: String? = nil, continent: String? = nil, postcode: String? = nil, features: ResponseMapInfoFeatures? = nil) {
        self.name = name
        self.label = label
        self.score = score
        self.houseNumber = houseNumber
        self.street = street
        self.region = region
        self.regionCode = regionCode
        self.neighbourhood = neighbourhood
        self.county = county
        self.macroregion = macroregion
        self.city = city
        self.country = country
        self.countryCode = countryCode
        self.continent = continent
        self.postcode = postcode
        self.features = features
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case label
        case score
        case houseNumber = "house_number"
        case street
        case region
        case regionCode = "region_code"
        case neighbourhood
        case county
        case macroregion
        case city
        case country
        case countryCode = "country_code"
        case continent
        case postcode
        case features
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(label, forKey: .label)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(houseNumber, forKey: .houseNumber)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(regionCode, forKey: .regionCode)
        try container.encodeIfPresent(neighbourhood, forKey: .neighbourhood)
        try container.encodeIfPresent(county, forKey: .county)
        try container.encodeIfPresent(macroregion, forKey: .macroregion)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(continent, forKey: .continent)
        try container.encodeIfPresent(postcode, forKey: .postcode)
        try container.encodeIfPresent(features, forKey: .features)
    }



}
