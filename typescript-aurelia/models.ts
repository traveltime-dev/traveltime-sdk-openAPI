/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface Coords {
  lat: number;
  lng: number;
}


export type RequestArrivalTimePeriod = 'weekday_morning';

export interface RequestLocation {
  id: string;
  coords: Coords;
}


export interface RequestRangeFull {
  enabled: boolean;
  max_results: number;
  width: number;
}


export interface RequestRangeNoMaxResults {
  enabled: boolean;
  width: number;
}


export interface RequestRoutes {
  locations: Array<RequestLocation>;
  departure_searches?: Array<RequestRoutesDepartureSearch>;
  arrival_searches?: Array<RequestRoutesArrivalSearch>;
}


export interface RequestRoutesArrivalSearch {
  id: string;
  departure_location_ids: Array<string>;
  arrival_location_id: string;
  transportation: RequestTransportation;
  arrival_time: string;
  properties: Array<RequestRoutesProperty>;
  range?: RequestRangeFull;
}


export interface RequestRoutesDepartureSearch {
  id: string;
  departure_location_id: string;
  arrival_location_ids: Array<string>;
  transportation: RequestTransportation;
  departure_time: string;
  properties: Array<RequestRoutesProperty>;
  range?: RequestRangeFull;
}


export type RequestRoutesProperty = 'travel_time' | 'distance' | 'fares' | 'route';

export interface RequestSupportedLocations {
  locations: Array<RequestLocation>;
}


export interface RequestTimeFilter {
  locations: Array<RequestLocation>;
  departure_searches?: Array<RequestTimeFilterDepartureSearch>;
  arrival_searches?: Array<RequestTimeFilterArrivalSearch>;
}


export interface RequestTimeFilterArrivalSearch {
  id: string;
  departure_location_ids: Array<string>;
  arrival_location_id: string;
  transportation: RequestTransportation;
  travel_time: number;
  arrival_time: string;
  properties: Array<RequestTimeFilterProperty>;
  range?: RequestRangeFull;
}


export interface RequestTimeFilterDepartureSearch {
  id: string;
  departure_location_id: string;
  arrival_location_ids: Array<string>;
  transportation: RequestTransportation;
  travel_time: number;
  departure_time: string;
  properties: Array<RequestTimeFilterProperty>;
  range?: RequestRangeFull;
}


export interface RequestTimeFilterFast {
  locations: Array<RequestLocation>;
  arrival_searches: RequestTimeFilterFastArrivalSearches;
}


export interface RequestTimeFilterFastArrivalManyToOneSearch {
  id: string;
  arrival_location_id: string;
  departure_location_ids: Array<string>;
  transportation: RequestTransportationFast;
  travel_time: number;
  arrival_time_period: RequestArrivalTimePeriod;
  properties: Array<RequestTimeFilterFastProperty>;
}


export interface RequestTimeFilterFastArrivalOneToManySearch {
  id: string;
  departure_location_id: string;
  arrival_location_ids: Array<string>;
  transportation: RequestTransportationFast;
  travel_time: number;
  arrival_time_period: RequestArrivalTimePeriod;
  properties: Array<RequestTimeFilterFastProperty>;
}


export interface RequestTimeFilterFastArrivalSearches {
  many_to_one?: Array<RequestTimeFilterFastArrivalManyToOneSearch>;
  one_to_many?: Array<RequestTimeFilterFastArrivalOneToManySearch>;
}


export type RequestTimeFilterFastProperty = 'travel_time' | 'fares';

export interface RequestTimeFilterPostcodeDistricts {
  departure_searches?: Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>;
  arrival_searches?: Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>;
}


export interface RequestTimeFilterPostcodeDistrictsArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  arrival_time: string;
  reachable_postcodes_threshold: number;
  properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
  range?: RequestRangeFull;
}


export interface RequestTimeFilterPostcodeDistrictsDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  departure_time: string;
  reachable_postcodes_threshold: number;
  properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
  range?: RequestRangeFull;
}


export type RequestTimeFilterPostcodeDistrictsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';

export interface RequestTimeFilterPostcodeSectors {
  departure_searches?: Array<RequestTimeFilterPostcodeSectorsDepartureSearch>;
  arrival_searches?: Array<RequestTimeFilterPostcodeSectorsArrivalSearch>;
}


export interface RequestTimeFilterPostcodeSectorsArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  arrival_time: string;
  reachable_postcodes_threshold: number;
  properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
  range?: RequestRangeFull;
}


export interface RequestTimeFilterPostcodeSectorsDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  departure_time: string;
  reachable_postcodes_threshold: number;
  properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
  range?: RequestRangeFull;
}


export type RequestTimeFilterPostcodeSectorsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';

export interface RequestTimeFilterPostcodes {
  departure_searches?: Array<RequestTimeFilterPostcodesDepartureSearch>;
  arrival_searches?: Array<RequestTimeFilterPostcodesArrivalSearch>;
}


export interface RequestTimeFilterPostcodesArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  arrival_time: string;
  properties: Array<RequestTimeFilterPostcodesProperty>;
  range?: RequestRangeFull;
}


export interface RequestTimeFilterPostcodesDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travel_time: number;
  departure_time: string;
  properties: Array<RequestTimeFilterPostcodesProperty>;
  range?: RequestRangeFull;
}


export type RequestTimeFilterPostcodesProperty = 'travel_time' | 'distance';

export type RequestTimeFilterProperty = 'travel_time' | 'distance' | 'distance_breakdown' | 'fares' | 'route';

export interface RequestTimeMap {
  departure_searches?: Array<RequestTimeMapDepartureSearch>;
  arrival_searches?: Array<RequestTimeMapArrivalSearch>;
  unions?: Array<RequestUnionOnIntersection>;
  intersections?: Array<RequestUnionOnIntersection>;
}


export interface RequestTimeMapArrivalSearch {
  id: string;
  coords: Coords;
  transportation: RequestTransportation;
  travel_time: number;
  arrival_time: string;
  properties?: Array<RequestTimeMapProperty>;
  range?: RequestRangeNoMaxResults;
}


export interface RequestTimeMapDepartureSearch {
  id: string;
  coords: Coords;
  transportation: RequestTransportation;
  travel_time: number;
  departure_time: string;
  properties?: Array<RequestTimeMapProperty>;
  range?: RequestRangeNoMaxResults;
}


export type RequestTimeMapProperty = 'is_only_walking';

export interface RequestTransportation {
  type: RequestTransportationTypeEnum;
  pt_change_delay?: number;
  walking_time?: number;
  driving_time_to_station?: number;
  parking_time?: number;
  boarding_time?: number;
}

/**
 * Enum for the type property.
 */
export type RequestTransportationTypeEnum = 'cycling' | 'driving' | 'driving+train' | 'public_transport' | 'walking' | 'coach' | 'bus' | 'train' | 'ferry' | 'driving+ferry' | 'cycling+ferry';


export interface RequestTransportationFast {
  type: RequestTransportationFastTypeEnum;
}

/**
 * Enum for the type property.
 */
export type RequestTransportationFastTypeEnum = 'public_transport' | 'driving' | 'driving+public_transport';


export interface RequestUnionOnIntersection {
  id: string;
  search_ids: Array<string>;
}


export interface ResponseBoundingBox {
  envelope: ResponseBox;
  boxes: Array<ResponseBox>;
}


export interface ResponseBox {
  min_lat: number;
  max_lat: number;
  min_lng: number;
  max_lng: number;
}


export interface ResponseDistanceBreakdownItem {
  mode: ResponseTransportationMode;
  distance: number;
}


export interface ResponseError {
  http_status?: number;
  error_code?: number;
  description?: string;
  documentation_link?: string;
  additional_info?: { [key: string]: Array<string>; };
}


export interface ResponseFareTicket {
  type: ResponseFareTicketTypeEnum;
  price: number;
  currency: string;
}

/**
 * Enum for the type property.
 */
export type ResponseFareTicketTypeEnum = 'single' | 'week' | 'month' | 'year';


export interface ResponseFares {
  breakdown: Array<ResponseFaresBreakdownItem>;
  tickets_total: Array<ResponseFareTicket>;
}


export interface ResponseFaresBreakdownItem {
  modes: Array<ResponseTransportationMode>;
  route_part_ids: Array<number>;
  tickets: Array<ResponseFareTicket>;
}


export interface ResponseFaresFast {
  tickets_total: Array<ResponseFareTicket>;
}


export interface ResponseGeocoding {
  type: string;
  features: Array<ResponseGeocodingGeoJsonFeature>;
}


export interface ResponseGeocodingGeoJsonFeature {
  type: string;
  geometry: ResponseGeocodingGeometry;
  properties: ResponseGeocodingProperties;
}


export interface ResponseGeocodingGeometry {
  type: string;
  coordinates: Array<number>;
}


export interface ResponseGeocodingProperties {
  name: string;
  label: string;
  score?: number;
  house_number?: string;
  street?: string;
  region?: string;
  region_code?: string;
  neighbourhood?: string;
  county?: string;
  macroregion?: string;
  city?: string;
  country?: string;
  country_code?: string;
  continent?: string;
  postcode?: string;
  features?: ResponseMapInfoFeatures;
}


export interface ResponseMapInfo {
  maps: Array<ResponseMapInfoMap>;
}


export interface ResponseMapInfoFeatures {
  public_transport?: ResponseMapInfoFeaturesPublicTransport;
  fares: boolean;
  postcodes: boolean;
}


export interface ResponseMapInfoFeaturesPublicTransport {
  date_start: string;
  date_end: string;
}


export interface ResponseMapInfoMap {
  name: string;
  features: ResponseMapInfoFeatures;
}


export interface ResponseRoute {
  departure_time: string;
  arrival_time: string;
  parts: Array<ResponseRoutePart>;
}


export interface ResponseRoutePart {
  id: string;
  type: ResponseRoutePartTypeEnum;
  mode: ResponseTransportationMode;
  directions: string;
  distance: number;
  travel_time: number;
  coords: Array<Coords>;
  direction?: string;
  road?: string;
  turn?: string;
  line?: string;
  departure_station?: string;
  arrival_station?: string;
  departs_at?: string;
  arrives_at?: string;
  num_stops?: number;
}

/**
 * Enum for the type property.
 */
export type ResponseRoutePartTypeEnum = 'basic' | 'start_end' | 'road' | 'public_transport';


export interface ResponseRoutes {
  results: Array<ResponseRoutesResult>;
}


export interface ResponseRoutesLocation {
  id: string;
  properties: Array<ResponseRoutesProperties>;
}


export interface ResponseRoutesProperties {
  travel_time?: number;
  distance?: number;
  fares?: ResponseFares;
  route?: ResponseRoute;
}


export interface ResponseRoutesResult {
  search_id: string;
  locations: Array<ResponseRoutesLocation>;
  unreachable: Array<string>;
}


export interface ResponseShape {
  shell: Array<Coords>;
  holes: Array<Array<Coords>>;
}


export interface ResponseSupportedLocation {
  id: string;
  map_name: string;
}


export interface ResponseSupportedLocations {
  locations: Array<ResponseSupportedLocation>;
  unsupported_locations: Array<string>;
}


export interface ResponseTimeFilter {
  results: Array<ResponseTimeFilterResult>;
}


export interface ResponseTimeFilterFast {
  results: Array<ResponseTimeFilterFastResult>;
}


export interface ResponseTimeFilterFastLocation {
  id: string;
  properties: Array<ResponseTimeFilterFastProperties>;
}


export interface ResponseTimeFilterFastProperties {
  travel_time?: number;
  fares?: ResponseFaresFast;
}


export interface ResponseTimeFilterFastResult {
  search_id: string;
  locations: Array<ResponseTimeFilterFastLocation>;
  unreachable: Array<string>;
}


export interface ResponseTimeFilterLocation {
  id: string;
  properties: Array<ResponseTimeFilterProperties>;
}


export interface ResponseTimeFilterPostcode {
  code: string;
  properties: Array<ResponseTimeFilterPostcodesProperties>;
}


export interface ResponseTimeFilterPostcodeDistrict {
  code: string;
  properties: ResponseTimeFilterPostcodeDistrictProperties;
}


export interface ResponseTimeFilterPostcodeDistrictProperties {
  travel_time_reachable?: ResponseTravelTimeStatistics;
  travel_time_all?: ResponseTravelTimeStatistics;
  coverage?: number;
}


export interface ResponseTimeFilterPostcodeDistricts {
  results: Array<ResponseTimeFilterPostcodeDistrictsResult>;
}


export interface ResponseTimeFilterPostcodeDistrictsResult {
  search_id: string;
  districts: Array<ResponseTimeFilterPostcodeDistrict>;
}


export interface ResponseTimeFilterPostcodeSector {
  code: string;
  properties: ResponseTimeFilterPostcodeSectorProperties;
}


export interface ResponseTimeFilterPostcodeSectorProperties {
  travel_time_reachable?: ResponseTravelTimeStatistics;
  travel_time_all?: ResponseTravelTimeStatistics;
  coverage?: number;
}


export interface ResponseTimeFilterPostcodeSectors {
  results: Array<ResponseTimeFilterPostcodeSectorsResult>;
}


export interface ResponseTimeFilterPostcodeSectorsResult {
  search_id: string;
  sectors: Array<ResponseTimeFilterPostcodeSector>;
}


export interface ResponseTimeFilterPostcodes {
  results: Array<ResponseTimeFilterPostcodesResult>;
}


export interface ResponseTimeFilterPostcodesProperties {
  travel_time?: number;
  distance?: number;
}


export interface ResponseTimeFilterPostcodesResult {
  search_id: string;
  postcodes: Array<ResponseTimeFilterPostcode>;
}


export interface ResponseTimeFilterProperties {
  travel_time?: number;
  distance?: number;
  distance_breakdown?: Array<ResponseDistanceBreakdownItem>;
  fares?: ResponseFares;
  route?: ResponseRoute;
}


export interface ResponseTimeFilterResult {
  search_id: string;
  locations: Array<ResponseTimeFilterLocation>;
  unreachable: Array<string>;
}


export interface ResponseTimeMap {
  results: Array<ResponseTimeMapResult>;
}


export interface ResponseTimeMapBoundingBoxes {
  results: Array<ResponseTimeMapBoundingBoxesResult>;
}


export interface ResponseTimeMapBoundingBoxesResult {
  search_id: string;
  bounding_boxes: Array<ResponseBoundingBox>;
  properties: ResponseTimeMapProperties;
}


export interface ResponseTimeMapProperties {
  is_only_walking?: boolean;
}


export interface ResponseTimeMapResult {
  search_id: string;
  shapes: Array<ResponseShape>;
  properties: ResponseTimeMapProperties;
}


export interface ResponseTimeMapWkt {
  results: Array<ResponseTimeMapWktResult>;
}


export interface ResponseTimeMapWktResult {
  search_id: string;
  shape: string;
  properties: ResponseTimeMapProperties;
}


export type ResponseTransportationMode = 'car' | 'parking' | 'boarding' | 'walk' | 'bike' | 'train' | 'rail_national' | 'rail_overground' | 'rail_underground' | 'rail_dlr' | 'bus' | 'cable_car' | 'plane' | 'ferry' | 'coach';

export interface ResponseTravelTimeStatistics {
  min: number;
  max: number;
  mean: number;
  median: number;
}

