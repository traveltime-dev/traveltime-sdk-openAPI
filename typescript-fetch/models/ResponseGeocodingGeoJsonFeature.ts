/* tslint:disable */
/* eslint-disable */
/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResponseGeocodingGeometry,
    ResponseGeocodingGeometryFromJSON,
    ResponseGeocodingGeometryFromJSONTyped,
    ResponseGeocodingGeometryToJSON,
    ResponseGeocodingProperties,
    ResponseGeocodingPropertiesFromJSON,
    ResponseGeocodingPropertiesFromJSONTyped,
    ResponseGeocodingPropertiesToJSON,
} from './';

/**
 * 
 * @export
 * @interface ResponseGeocodingGeoJsonFeature
 */
export interface ResponseGeocodingGeoJsonFeature {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    type: string;
    /**
     * 
     * @type {ResponseGeocodingGeometry}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    geometry: ResponseGeocodingGeometry;
    /**
     * 
     * @type {ResponseGeocodingProperties}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    properties: ResponseGeocodingProperties;
}

export function ResponseGeocodingGeoJsonFeatureFromJSON(json: any): ResponseGeocodingGeoJsonFeature {
    return ResponseGeocodingGeoJsonFeatureFromJSONTyped(json, false);
}

export function ResponseGeocodingGeoJsonFeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseGeocodingGeoJsonFeature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'geometry': ResponseGeocodingGeometryFromJSON(json['geometry']),
        'properties': ResponseGeocodingPropertiesFromJSON(json['properties']),
    };
}

export function ResponseGeocodingGeoJsonFeatureToJSON(value?: ResponseGeocodingGeoJsonFeature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'geometry': ResponseGeocodingGeometryToJSON(value.geometry),
        'properties': ResponseGeocodingPropertiesToJSON(value.properties),
    };
}


