/**
 * TravelTime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { RequestRoutes } from '../model/requestRoutes';
import { RequestSupportedLocations } from '../model/requestSupportedLocations';
import { RequestTimeFilter } from '../model/requestTimeFilter';
import { RequestTimeFilterFast } from '../model/requestTimeFilterFast';
import { RequestTimeFilterPostcodeDistricts } from '../model/requestTimeFilterPostcodeDistricts';
import { RequestTimeFilterPostcodeSectors } from '../model/requestTimeFilterPostcodeSectors';
import { RequestTimeFilterPostcodes } from '../model/requestTimeFilterPostcodes';
import { RequestTimeMap } from '../model/requestTimeMap';
import { ResponseError } from '../model/responseError';
import { ResponseGeocoding } from '../model/responseGeocoding';
import { ResponseMapInfo } from '../model/responseMapInfo';
import { ResponseRoutes } from '../model/responseRoutes';
import { ResponseSupportedLocations } from '../model/responseSupportedLocations';
import { ResponseTimeFilter } from '../model/responseTimeFilter';
import { ResponseTimeFilterFast } from '../model/responseTimeFilterFast';
import { ResponseTimeFilterPostcodeDistricts } from '../model/responseTimeFilterPostcodeDistricts';
import { ResponseTimeFilterPostcodeSectors } from '../model/responseTimeFilterPostcodeSectors';
import { ResponseTimeFilterPostcodes } from '../model/responseTimeFilterPostcodes';
import { ResponseTimeMap } from '../model/responseTimeMap';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'https://api.traveltimeapp.com';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param lat 
     * @param lng 
     * @param withinCountry 
     
     */
    public geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, observe?: 'body', headers?: Headers): Observable<ResponseGeocoding>;
    public geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseGeocoding>>;
    public geocodingReverseSearch(lat: number, lng: number, withinCountry?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (lat === null || lat === undefined){
            throw new Error('Required parameter lat was null or undefined when calling geocodingReverseSearch.');
        }

        if (lng === null || lng === undefined){
            throw new Error('Required parameter lng was null or undefined when calling geocodingReverseSearch.');
        }

        let queryParameters: string[] = [];
        if (lat !== undefined) {
            queryParameters.push('lat='+encodeURIComponent(String(lat)));
        }
        if (lng !== undefined) {
            queryParameters.push('lng='+encodeURIComponent(String(lng)));
        }
        if (withinCountry !== undefined) {
            queryParameters.push('withinCountry='+encodeURIComponent(String(withinCountry)));
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ResponseGeocoding>> = this.httpClient.get(`${this.basePath}/v4/geocoding/reverse?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseGeocoding>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param query 
     * @param focusLat 
     * @param focusLng 
     * @param withinCountry 
     
     */
    public geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, observe?: 'body', headers?: Headers): Observable<ResponseGeocoding>;
    public geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseGeocoding>>;
    public geocodingSearch(query: string, focusLat?: number, focusLng?: number, withinCountry?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (query === null || query === undefined){
            throw new Error('Required parameter query was null or undefined when calling geocodingSearch.');
        }

        let queryParameters: string[] = [];
        if (query !== undefined) {
            queryParameters.push('query='+encodeURIComponent(String(query)));
        }
        if (focusLat !== undefined) {
            queryParameters.push('focusLat='+encodeURIComponent(String(focusLat)));
        }
        if (focusLng !== undefined) {
            queryParameters.push('focusLng='+encodeURIComponent(String(focusLng)));
        }
        if (withinCountry !== undefined) {
            queryParameters.push('withinCountry='+encodeURIComponent(String(withinCountry)));
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ResponseGeocoding>> = this.httpClient.get(`${this.basePath}/v4/geocoding/search?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseGeocoding>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     
     */
    public mapInfo(observe?: 'body', headers?: Headers): Observable<ResponseMapInfo>;
    public mapInfo(observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseMapInfo>>;
    public mapInfo(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ResponseMapInfo>> = this.httpClient.get(`${this.basePath}/v4/map-info`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseMapInfo>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestRoutes 
     
     */
    public routes(requestRoutes: RequestRoutes, observe?: 'body', headers?: Headers): Observable<ResponseRoutes>;
    public routes(requestRoutes: RequestRoutes, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseRoutes>>;
    public routes(requestRoutes: RequestRoutes, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestRoutes === null || requestRoutes === undefined){
            throw new Error('Required parameter requestRoutes was null or undefined when calling routes.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseRoutes>> = this.httpClient.post(`${this.basePath}/v4/routes`, requestRoutes , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseRoutes>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestSupportedLocations 
     
     */
    public supportedLocations(requestSupportedLocations: RequestSupportedLocations, observe?: 'body', headers?: Headers): Observable<ResponseSupportedLocations>;
    public supportedLocations(requestSupportedLocations: RequestSupportedLocations, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseSupportedLocations>>;
    public supportedLocations(requestSupportedLocations: RequestSupportedLocations, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestSupportedLocations === null || requestSupportedLocations === undefined){
            throw new Error('Required parameter requestSupportedLocations was null or undefined when calling supportedLocations.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseSupportedLocations>> = this.httpClient.post(`${this.basePath}/v4/supported-locations`, requestSupportedLocations , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseSupportedLocations>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeFilter 
     
     */
    public timeFilter(requestTimeFilter: RequestTimeFilter, observe?: 'body', headers?: Headers): Observable<ResponseTimeFilter>;
    public timeFilter(requestTimeFilter: RequestTimeFilter, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeFilter>>;
    public timeFilter(requestTimeFilter: RequestTimeFilter, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeFilter === null || requestTimeFilter === undefined){
            throw new Error('Required parameter requestTimeFilter was null or undefined when calling timeFilter.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeFilter>> = this.httpClient.post(`${this.basePath}/v4/time-filter`, requestTimeFilter , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeFilter>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeFilterFast 
     
     */
    public timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, observe?: 'body', headers?: Headers): Observable<ResponseTimeFilterFast>;
    public timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeFilterFast>>;
    public timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeFilterFast === null || requestTimeFilterFast === undefined){
            throw new Error('Required parameter requestTimeFilterFast was null or undefined when calling timeFilterFast.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeFilterFast>> = this.httpClient.post(`${this.basePath}/v4/time-filter/fast`, requestTimeFilterFast , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeFilterFast>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeFilterPostcodeDistricts 
     
     */
    public timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, observe?: 'body', headers?: Headers): Observable<ResponseTimeFilterPostcodeDistricts>;
    public timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeFilterPostcodeDistricts>>;
    public timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeFilterPostcodeDistricts === null || requestTimeFilterPostcodeDistricts === undefined){
            throw new Error('Required parameter requestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeFilterPostcodeDistricts>> = this.httpClient.post(`${this.basePath}/v4/time-filter/postcode-districts`, requestTimeFilterPostcodeDistricts , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeFilterPostcodeDistricts>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeFilterPostcodeSectors 
     
     */
    public timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, observe?: 'body', headers?: Headers): Observable<ResponseTimeFilterPostcodeSectors>;
    public timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeFilterPostcodeSectors>>;
    public timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeFilterPostcodeSectors === null || requestTimeFilterPostcodeSectors === undefined){
            throw new Error('Required parameter requestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeFilterPostcodeSectors>> = this.httpClient.post(`${this.basePath}/v4/time-filter/postcode-sectors`, requestTimeFilterPostcodeSectors , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeFilterPostcodeSectors>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeFilterPostcodes 
     
     */
    public timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, observe?: 'body', headers?: Headers): Observable<ResponseTimeFilterPostcodes>;
    public timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeFilterPostcodes>>;
    public timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeFilterPostcodes === null || requestTimeFilterPostcodes === undefined){
            throw new Error('Required parameter requestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeFilterPostcodes>> = this.httpClient.post(`${this.basePath}/v4/time-filter/postcodes`, requestTimeFilterPostcodes , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeFilterPostcodes>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * 
     * @param requestTimeMap 
     
     */
    public timeMap(requestTimeMap: RequestTimeMap, observe?: 'body', headers?: Headers): Observable<ResponseTimeMap>;
    public timeMap(requestTimeMap: RequestTimeMap, observe?: 'response', headers?: Headers): Observable<HttpResponse<ResponseTimeMap>>;
    public timeMap(requestTimeMap: RequestTimeMap, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (requestTimeMap === null || requestTimeMap === undefined){
            throw new Error('Required parameter requestTimeMap was null or undefined when calling timeMap.');
        }

        // authentication (ApiKey) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Api-Key']) {
            headers['X-Api-Key'] = this.APIConfiguration.apiKeys['X-Api-Key'];
        }
        // authentication (ApplicationId) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-Application-Id']) {
            headers['X-Application-Id'] = this.APIConfiguration.apiKeys['X-Application-Id'];
        }
        headers['Accept'] = 'application/json, application/vnd.wkt+json, application/vnd.wkt-no-holes+json, application/vnd.bounding-boxes+json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<ResponseTimeMap>> = this.httpClient.post(`${this.basePath}/v4/time-map`, requestTimeMap , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ResponseTimeMap>(httpResponse.response))
               );
        }
        return response;
    }

}
